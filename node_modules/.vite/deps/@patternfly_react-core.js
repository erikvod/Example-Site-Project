import {
  __awaiter,
  __generator,
  __read,
  __rest,
  __spreadArray,
  init_tslib_es6
} from "./chunk-Q2RI6E2M.js";
import {
  require_react_dom
} from "./chunk-ZW7WJ6XU.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment37 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment37;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement11, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement11(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement11(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/attr-accept/dist/es/index.js
var require_es = __commonJS({
  "node_modules/attr-accept/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = function(file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        var fileName = file.name || "";
        var mimeType = (file.type || "").toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some(function(type) {
          var validType = type.trim().toLowerCase();
          if (validType.charAt(0) === ".") {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith("/*")) {
            return baseMimeType === validType.replace(/\/.*$/, "");
          }
          return mimeType === validType;
        });
      }
      return true;
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModal.js
init_tslib_es6();
var React31 = __toESM(require_react());

// node_modules/@patternfly/react-styles/dist/esm/index.js
function css(...args) {
  const classes = [];
  const hasOwn = {}.hasOwnProperty;
  args.filter(Boolean).forEach((arg) => {
    const argType = typeof arg;
    if (argType === "string" || argType === "number") {
      classes.push(arg);
    } else if (Array.isArray(arg) && arg.length) {
      const inner = css(...arg);
      if (inner) {
        classes.push(inner);
      }
    } else if (argType === "object") {
      for (const key in arg) {
        if (hasOwn.call(arg, key) && arg[key]) {
          classes.push(key);
        }
      }
    }
  });
  return classes.join(" ");
}

// node_modules/@patternfly/react-tokens/dist/esm/c_about_modal_box_BackgroundImage.js
var c_about_modal_box_BackgroundImage = {
  "name": "--pf-v5-c-about-modal-box--BackgroundImage",
  "value": "none",
  "var": "var(--pf-v5-c-about-modal-box--BackgroundImage)"
};
var c_about_modal_box_BackgroundImage_default = c_about_modal_box_BackgroundImage;

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxContent.js
init_tslib_es6();
var React = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/AboutModalBox/about-modal-box.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/AboutModalBox/about-modal-box.css";
var about_modal_box_default = {
  "aboutModalBox": "pf-v5-c-about-modal-box",
  "aboutModalBoxBrand": "pf-v5-c-about-modal-box__brand",
  "aboutModalBoxBrandImage": "pf-v5-c-about-modal-box__brand-image",
  "aboutModalBoxClose": "pf-v5-c-about-modal-box__close",
  "aboutModalBoxContent": "pf-v5-c-about-modal-box__content",
  "aboutModalBoxHeader": "pf-v5-c-about-modal-box__header",
  "aboutModalBoxStrapline": "pf-v5-c-about-modal-box__strapline",
  "button": "pf-v5-c-button",
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "plain": "pf-m-plain"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-styles/css/components/Content/content.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Content/content.css";
var content_default = {
  "content": "pf-v5-c-content",
  "modifiers": {
    "visited": "pf-m-visited",
    "plain": "pf-m-plain"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxContent.js
var AboutModalBoxContent = (_a) => {
  var { children, trademark, hasNoContentContainer = false } = _a, props = __rest(_a, ["children", "trademark", "hasNoContentContainer"]);
  return React.createElement(
    "div",
    Object.assign({ className: css(about_modal_box_default.aboutModalBoxContent) }, props),
    React.createElement("div", { className: css(`${about_modal_box_default.aboutModalBox}__body`) }, hasNoContentContainer ? children : React.createElement("div", { className: css(content_default.content) }, children)),
    React.createElement("p", { className: css(about_modal_box_default.aboutModalBoxStrapline) }, trademark)
  );
};
AboutModalBoxContent.displayName = "AboutModalBoxContent";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxHeader.js
init_tslib_es6();
var React10 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js
init_tslib_es6();
var React9 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Title/title.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Title/title.css";
var title_default = {
  "modifiers": {
    "4xl": "pf-m-4xl",
    "3xl": "pf-m-3xl",
    "2xl": "pf-m-2xl",
    "xl": "pf-m-xl",
    "lg": "pf-m-lg",
    "md": "pf-m-md"
  },
  "title": "pf-v5-c-title"
};

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_sm.js
var global_breakpoint_sm = {
  "name": "--pf-v5-global--breakpoint--sm",
  "value": "576px",
  "var": "var(--pf-v5-global--breakpoint--sm)"
};
var global_breakpoint_sm_default = global_breakpoint_sm;

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_md.js
var global_breakpoint_md = {
  "name": "--pf-v5-global--breakpoint--md",
  "value": "768px",
  "var": "var(--pf-v5-global--breakpoint--md)"
};
var global_breakpoint_md_default = global_breakpoint_md;

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_lg.js
var global_breakpoint_lg = {
  "name": "--pf-v5-global--breakpoint--lg",
  "value": "992px",
  "var": "var(--pf-v5-global--breakpoint--lg)"
};
var global_breakpoint_lg_default = global_breakpoint_lg;

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_xl.js
var global_breakpoint_xl = {
  "name": "--pf-v5-global--breakpoint--xl",
  "value": "1200px",
  "var": "var(--pf-v5-global--breakpoint--xl)"
};
var global_breakpoint_xl_default = global_breakpoint_xl;

// node_modules/@patternfly/react-tokens/dist/esm/global_breakpoint_2xl.js
var global_breakpoint_2xl = {
  "name": "--pf-v5-global--breakpoint--2xl",
  "value": "1450px",
  "var": "var(--pf-v5-global--breakpoint--2xl)"
};
var global_breakpoint_2xl_default = global_breakpoint_2xl;

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_sm.js
var global_height_breakpoint_sm = {
  "name": "--pf-v5-global--height-breakpoint--sm",
  "value": "0",
  "var": "var(--pf-v5-global--height-breakpoint--sm)"
};
var global_height_breakpoint_sm_default = global_height_breakpoint_sm;

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_md.js
var global_height_breakpoint_md = {
  "name": "--pf-v5-global--height-breakpoint--md",
  "value": "40rem",
  "var": "var(--pf-v5-global--height-breakpoint--md)"
};
var global_height_breakpoint_md_default = global_height_breakpoint_md;

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_lg.js
var global_height_breakpoint_lg = {
  "name": "--pf-v5-global--height-breakpoint--lg",
  "value": "48rem",
  "var": "var(--pf-v5-global--height-breakpoint--lg)"
};
var global_height_breakpoint_lg_default = global_height_breakpoint_lg;

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_xl.js
var global_height_breakpoint_xl = {
  "name": "--pf-v5-global--height-breakpoint--xl",
  "value": "60rem",
  "var": "var(--pf-v5-global--height-breakpoint--xl)"
};
var global_height_breakpoint_xl_default = global_height_breakpoint_xl;

// node_modules/@patternfly/react-tokens/dist/esm/global_height_breakpoint_2xl.js
var global_height_breakpoint_2xl = {
  "name": "--pf-v5-global--height-breakpoint--2xl",
  "value": "80rem",
  "var": "var(--pf-v5-global--height-breakpoint--2xl)"
};
var global_height_breakpoint_2xl_default = global_height_breakpoint_2xl;

// node_modules/@patternfly/react-core/dist/esm/helpers/constants.js
var SIDE = { RIGHT: "right", LEFT: "left", BOTH: "both", NONE: "none" };
var KEYHANDLER_DIRECTION = { UP: "up", DOWN: "down", RIGHT: "right", LEFT: "left" };
var ValidatedOptions;
(function(ValidatedOptions2) {
  ValidatedOptions2["success"] = "success";
  ValidatedOptions2["error"] = "error";
  ValidatedOptions2["warning"] = "warning";
  ValidatedOptions2["default"] = "default";
})(ValidatedOptions || (ValidatedOptions = {}));
var KeyTypes = {
  Tab: "Tab",
  Space: " ",
  Escape: "Escape",
  Enter: "Enter",
  ArrowUp: "ArrowUp",
  ArrowDown: "ArrowDown",
  ArrowLeft: "ArrowLeft",
  ArrowRight: "ArrowRight"
};
var globalWidthBreakpoints = {
  sm: parseInt(global_breakpoint_sm_default.value),
  md: parseInt(global_breakpoint_md_default.value),
  lg: parseInt(global_breakpoint_lg_default.value),
  xl: parseInt(global_breakpoint_xl_default.value),
  "2xl": parseInt(global_breakpoint_2xl_default.value)
};
var globalHeightBreakpoints = {
  sm: parseInt(global_height_breakpoint_sm_default.value),
  md: parseInt(global_height_breakpoint_md_default.value),
  lg: parseInt(global_height_breakpoint_lg_default.value),
  xl: parseInt(global_height_breakpoint_xl_default.value),
  "2xl": parseInt(global_height_breakpoint_2xl_default.value)
};

// node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js
init_tslib_es6();

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  var _element$getRootNode;
  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function(element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
var isInert = function isInert2(node, lookUp) {
  var _node$getAttribute;
  if (lookUp === void 0) {
    lookUp = true;
  }
  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
  var inert = inertAtt === "" || inertAtt === "true";
  var result = inert || lookUp && node && isInert2(node.parentNode);
  return result;
};
var isContentEditable = function isContentEditable2(node) {
  var _node$getAttribute2;
  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
  return attValue === "" || attValue === "true";
};
var getCandidates = function getCandidates2(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (isInert(element, false)) {
      continue;
    }
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options);
      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);
      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var hasTabIndex = function hasTabIndex2(node) {
  return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
};
var getTabIndex = function getTabIndex2(node) {
  if (!node) {
    throw new Error("No node provided");
  }
  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }
  return node.tabIndex;
};
var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
  var tabIndex = getTabIndex(node);
  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }
  return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a, b) {
  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i = 0; i < nodes.length; i++) {
    if (nodes[i].checked && nodes[i].form === form) {
      return nodes[i];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isNodeAttached = function isNodeAttached2(node) {
  var _nodeRoot;
  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;
  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }
  return attached;
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden = function isHidden2(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
    if (typeof getShadowRoot === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }
    if (displayCheck !== "legacy-full") {
      return true;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i = 0; i < parentNode.children.length; i++) {
          var child = parentNode.children.item(i);
          if (child.tagName === "LEGEND") {
            return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
  //  because we're limited in the type of selectors we can use in JSDom (see related
  //  note related to `candidateSelectors`)
  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }
  return sortByOrder(candidates);
};
var focusable = function focusable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorFocusable.bind(null, options),
      flatten: true,
      getShadowRoot: options.getShadowRoot
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
  }
  return candidates;
};
var isTabbable = function isTabbable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, candidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorTabbable(options, node);
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");
var isFocusable = function isFocusable2(node, options) {
  options = options || {};
  if (!node) {
    throw new Error("No node provided");
  }
  if (matches.call(node, focusableCandidateSelector) === false) {
    return false;
  }
  return isNodeMatchingSelectorFocusable(options, node);
};

// node_modules/focus-trap/dist/focus-trap.esm.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var activeFocusTraps = {
  activateTrap: function activateTrap(trapStack, trap) {
    if (trapStack.length > 0) {
      var activeTrap = trapStack[trapStack.length - 1];
      if (activeTrap !== trap) {
        activeTrap.pause();
      }
    }
    var trapIndex = trapStack.indexOf(trap);
    if (trapIndex === -1) {
      trapStack.push(trap);
    } else {
      trapStack.splice(trapIndex, 1);
      trapStack.push(trap);
    }
  },
  deactivateTrap: function deactivateTrap(trapStack, trap) {
    var trapIndex = trapStack.indexOf(trap);
    if (trapIndex !== -1) {
      trapStack.splice(trapIndex, 1);
    }
    if (trapStack.length > 0) {
      trapStack[trapStack.length - 1].unpause();
    }
  }
};
var isSelectableInput = function isSelectableInput2(node) {
  return node.tagName && node.tagName.toLowerCase() === "input" && typeof node.select === "function";
};
var isEscapeEvent = function isEscapeEvent2(e) {
  return (e === null || e === void 0 ? void 0 : e.key) === "Escape" || (e === null || e === void 0 ? void 0 : e.key) === "Esc" || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;
};
var isTabEvent = function isTabEvent2(e) {
  return (e === null || e === void 0 ? void 0 : e.key) === "Tab" || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;
};
var isKeyForward = function isKeyForward2(e) {
  return isTabEvent(e) && !e.shiftKey;
};
var isKeyBackward = function isKeyBackward2(e) {
  return isTabEvent(e) && e.shiftKey;
};
var delay = function delay2(fn) {
  return setTimeout(fn, 0);
};
var findIndex = function findIndex2(arr, fn) {
  var idx = -1;
  arr.every(function(value, i) {
    if (fn(value)) {
      idx = i;
      return false;
    }
    return true;
  });
  return idx;
};
var valueOrHandler = function valueOrHandler2(value) {
  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }
  return typeof value === "function" ? value.apply(void 0, params) : value;
};
var getActualTarget = function getActualTarget2(event) {
  return event.target.shadowRoot && typeof event.composedPath === "function" ? event.composedPath()[0] : event.target;
};
var internalTrapStack = [];
var createFocusTrap = function createFocusTrap2(elements, userOptions) {
  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;
  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;
  var config = _objectSpread2({
    returnFocusOnDeactivate: true,
    escapeDeactivates: true,
    delayInitialFocus: true,
    isKeyForward,
    isKeyBackward
  }, userOptions);
  var state = {
    // containers given to createFocusTrap()
    // @type {Array<HTMLElement>}
    containers: [],
    // list of objects identifying tabbable nodes in `containers` in the trap
    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap
    //  is active, but the trap should never get to a state where there isn't at least one group
    //  with at least one tabbable node in it (that would lead to an error condition that would
    //  result in an error being thrown)
    // @type {Array<{
    //   container: HTMLElement,
    //   tabbableNodes: Array<HTMLElement>, // empty if none
    //   focusableNodes: Array<HTMLElement>, // empty if none
    //   posTabIndexesFound: boolean,
    //   firstTabbableNode: HTMLElement|undefined,
    //   lastTabbableNode: HTMLElement|undefined,
    //   firstDomTabbableNode: HTMLElement|undefined,
    //   lastDomTabbableNode: HTMLElement|undefined,
    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined
    // }>}
    containerGroups: [],
    // same order/length as `containers` list
    // references to objects in `containerGroups`, but only those that actually have
    //  tabbable nodes in them
    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__
    //  the same length
    tabbableGroups: [],
    nodeFocusedBeforeActivation: null,
    mostRecentlyFocusedNode: null,
    active: false,
    paused: false,
    // timer ID for when delayInitialFocus is true and initial focus in this trap
    //  has been delayed during activation
    delayInitialFocusTimer: void 0,
    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any
    recentNavEvent: void 0
  };
  var trap;
  var getOption = function getOption2(configOverrideOptions, optionName, configOptionName) {
    return configOverrideOptions && configOverrideOptions[optionName] !== void 0 ? configOverrideOptions[optionName] : config[configOptionName || optionName];
  };
  var findContainerIndex = function findContainerIndex2(element, event) {
    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === "function" ? event.composedPath() : void 0;
    return state.containerGroups.findIndex(function(_ref) {
      var container = _ref.container, tabbableNodes = _ref.tabbableNodes;
      return container.contains(element) || // fall back to explicit tabbable search which will take into consideration any
      //  web components if the `tabbableOptions.getShadowRoot` option was used for
      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't
      //  look inside web components even if open)
      (composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function(node) {
        return node === element;
      });
    });
  };
  var getNodeForOption = function getNodeForOption2(optionName) {
    var optionValue = config[optionName];
    if (typeof optionValue === "function") {
      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        params[_key2 - 1] = arguments[_key2];
      }
      optionValue = optionValue.apply(void 0, params);
    }
    if (optionValue === true) {
      optionValue = void 0;
    }
    if (!optionValue) {
      if (optionValue === void 0 || optionValue === false) {
        return optionValue;
      }
      throw new Error("`".concat(optionName, "` was specified but was not a node, or did not return a node"));
    }
    var node = optionValue;
    if (typeof optionValue === "string") {
      node = doc.querySelector(optionValue);
      if (!node) {
        throw new Error("`".concat(optionName, "` as selector refers to no known node"));
      }
    }
    return node;
  };
  var getInitialFocusNode = function getInitialFocusNode2() {
    var node = getNodeForOption("initialFocus");
    if (node === false) {
      return false;
    }
    if (node === void 0 || !isFocusable(node, config.tabbableOptions)) {
      if (findContainerIndex(doc.activeElement) >= 0) {
        node = doc.activeElement;
      } else {
        var firstTabbableGroup = state.tabbableGroups[0];
        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;
        node = firstTabbableNode || getNodeForOption("fallbackFocus");
      }
    }
    if (!node) {
      throw new Error("Your focus-trap needs to have at least one focusable element");
    }
    return node;
  };
  var updateTabbableNodes = function updateTabbableNodes2() {
    state.containerGroups = state.containers.map(function(container) {
      var tabbableNodes = tabbable(container, config.tabbableOptions);
      var focusableNodes = focusable(container, config.tabbableOptions);
      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : void 0;
      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : void 0;
      var firstDomTabbableNode = focusableNodes.find(function(node) {
        return isTabbable(node);
      });
      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function(node) {
        return isTabbable(node);
      });
      var posTabIndexesFound = !!tabbableNodes.find(function(node) {
        return getTabIndex(node) > 0;
      });
      return {
        container,
        tabbableNodes,
        focusableNodes,
        /** True if at least one node with positive `tabindex` was found in this container. */
        posTabIndexesFound,
        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */
        firstTabbableNode,
        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */
        lastTabbableNode,
        // NOTE: DOM order is NOT NECESSARILY "document position" order, but figuring that out
        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
        //  because that API doesn't work with Shadow DOM as well as it should (@see
        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,
        //  to address an edge case related to positive tabindex support, this seems like a much easier,
        //  "close enough most of the time" alternative for positive tabindexes which should generally
        //  be avoided anyway...
        /** First tabbable node in container, __DOM__ order; `undefined` if none. */
        firstDomTabbableNode,
        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */
        lastDomTabbableNode,
        /**
         * Finds the __tabbable__ node that follows the given node in the specified direction,
         *  in this container, if any.
         * @param {HTMLElement} node
         * @param {boolean} [forward] True if going in forward tab order; false if going
         *  in reverse.
         * @returns {HTMLElement|undefined} The next tabbable node, if any.
         */
        nextTabbableNode: function nextTabbableNode(node) {
          var forward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var nodeIdx = tabbableNodes.indexOf(node);
          if (nodeIdx < 0) {
            if (forward) {
              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function(el) {
                return isTabbable(el);
              });
            }
            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function(el) {
              return isTabbable(el);
            });
          }
          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];
        }
      };
    });
    state.tabbableGroups = state.containerGroups.filter(function(group) {
      return group.tabbableNodes.length > 0;
    });
    if (state.tabbableGroups.length <= 0 && !getNodeForOption("fallbackFocus")) {
      throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times");
    }
    if (state.containerGroups.find(function(g) {
      return g.posTabIndexesFound;
    }) && state.containerGroups.length > 1) {
      throw new Error("At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.");
    }
  };
  var tryFocus = function tryFocus2(node) {
    if (node === false) {
      return;
    }
    if (node === doc.activeElement) {
      return;
    }
    if (!node || !node.focus) {
      tryFocus2(getInitialFocusNode());
      return;
    }
    node.focus({
      preventScroll: !!config.preventScroll
    });
    state.mostRecentlyFocusedNode = node;
    if (isSelectableInput(node)) {
      node.select();
    }
  };
  var getReturnFocusNode = function getReturnFocusNode2(previousActiveElement) {
    var node = getNodeForOption("setReturnFocus", previousActiveElement);
    return node ? node : node === false ? false : previousActiveElement;
  };
  var findNextNavNode = function findNextNavNode2(_ref2) {
    var target = _ref2.target, event = _ref2.event, _ref2$isBackward = _ref2.isBackward, isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;
    target = target || getActualTarget(event);
    updateTabbableNodes();
    var destinationNode = null;
    if (state.tabbableGroups.length > 0) {
      var containerIndex = findContainerIndex(target, event);
      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : void 0;
      if (containerIndex < 0) {
        if (isBackward) {
          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;
        } else {
          destinationNode = state.tabbableGroups[0].firstTabbableNode;
        }
      } else if (isBackward) {
        var startOfGroupIndex = findIndex(state.tabbableGroups, function(_ref3) {
          var firstTabbableNode = _ref3.firstTabbableNode;
          return target === firstTabbableNode;
        });
        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {
          startOfGroupIndex = containerIndex;
        }
        if (startOfGroupIndex >= 0) {
          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;
          var destinationGroup = state.tabbableGroups[destinationGroupIndex];
          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;
        } else if (!isTabEvent(event)) {
          destinationNode = containerGroup.nextTabbableNode(target, false);
        }
      } else {
        var lastOfGroupIndex = findIndex(state.tabbableGroups, function(_ref4) {
          var lastTabbableNode = _ref4.lastTabbableNode;
          return target === lastTabbableNode;
        });
        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {
          lastOfGroupIndex = containerIndex;
        }
        if (lastOfGroupIndex >= 0) {
          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;
          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];
          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;
        } else if (!isTabEvent(event)) {
          destinationNode = containerGroup.nextTabbableNode(target);
        }
      }
    } else {
      destinationNode = getNodeForOption("fallbackFocus");
    }
    return destinationNode;
  };
  var checkPointerDown = function checkPointerDown2(e) {
    var target = getActualTarget(e);
    if (findContainerIndex(target, e) >= 0) {
      return;
    }
    if (valueOrHandler(config.clickOutsideDeactivates, e)) {
      trap.deactivate({
        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,
        //  which will result in the outside click setting focus to the node
        //  that was clicked (and if not focusable, to "nothing"); by setting
        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused
        //  on activation (or the configured `setReturnFocus` node), whether the
        //  outside click was on a focusable node or not
        returnFocus: config.returnFocusOnDeactivate
      });
      return;
    }
    if (valueOrHandler(config.allowOutsideClick, e)) {
      return;
    }
    e.preventDefault();
  };
  var checkFocusIn = function checkFocusIn2(event) {
    var target = getActualTarget(event);
    var targetContained = findContainerIndex(target, event) >= 0;
    if (targetContained || target instanceof Document) {
      if (targetContained) {
        state.mostRecentlyFocusedNode = target;
      }
    } else {
      event.stopImmediatePropagation();
      var nextNode;
      var navAcrossContainers = true;
      if (state.mostRecentlyFocusedNode) {
        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {
          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);
          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;
          if (tabbableNodes.length > 0) {
            var mruTabIdx = tabbableNodes.findIndex(function(node) {
              return node === state.mostRecentlyFocusedNode;
            });
            if (mruTabIdx >= 0) {
              if (config.isKeyForward(state.recentNavEvent)) {
                if (mruTabIdx + 1 < tabbableNodes.length) {
                  nextNode = tabbableNodes[mruTabIdx + 1];
                  navAcrossContainers = false;
                }
              } else {
                if (mruTabIdx - 1 >= 0) {
                  nextNode = tabbableNodes[mruTabIdx - 1];
                  navAcrossContainers = false;
                }
              }
            }
          }
        } else {
          if (!state.containerGroups.some(function(g) {
            return g.tabbableNodes.some(function(n) {
              return getTabIndex(n) > 0;
            });
          })) {
            navAcrossContainers = false;
          }
        }
      } else {
        navAcrossContainers = false;
      }
      if (navAcrossContainers) {
        nextNode = findNextNavNode({
          // move FROM the MRU node, not event-related node (which will be the node that is
          //  outside the trap causing the focus escape we're trying to fix)
          target: state.mostRecentlyFocusedNode,
          isBackward: config.isKeyBackward(state.recentNavEvent)
        });
      }
      if (nextNode) {
        tryFocus(nextNode);
      } else {
        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());
      }
    }
    state.recentNavEvent = void 0;
  };
  var checkKeyNav = function checkKeyNav2(event) {
    var isBackward = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    state.recentNavEvent = event;
    var destinationNode = findNextNavNode({
      event,
      isBackward
    });
    if (destinationNode) {
      if (isTabEvent(event)) {
        event.preventDefault();
      }
      tryFocus(destinationNode);
    }
  };
  var checkKey = function checkKey2(event) {
    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {
      event.preventDefault();
      trap.deactivate();
      return;
    }
    if (config.isKeyForward(event) || config.isKeyBackward(event)) {
      checkKeyNav(event, config.isKeyBackward(event));
    }
  };
  var checkClick = function checkClick2(e) {
    var target = getActualTarget(e);
    if (findContainerIndex(target, e) >= 0) {
      return;
    }
    if (valueOrHandler(config.clickOutsideDeactivates, e)) {
      return;
    }
    if (valueOrHandler(config.allowOutsideClick, e)) {
      return;
    }
    e.preventDefault();
    e.stopImmediatePropagation();
  };
  var addListeners = function addListeners2() {
    if (!state.active) {
      return;
    }
    activeFocusTraps.activateTrap(trapStack, trap);
    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function() {
      tryFocus(getInitialFocusNode());
    }) : tryFocus(getInitialFocusNode());
    doc.addEventListener("focusin", checkFocusIn, true);
    doc.addEventListener("mousedown", checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener("touchstart", checkPointerDown, {
      capture: true,
      passive: false
    });
    doc.addEventListener("click", checkClick, {
      capture: true,
      passive: false
    });
    doc.addEventListener("keydown", checkKey, {
      capture: true,
      passive: false
    });
    return trap;
  };
  var removeListeners = function removeListeners2() {
    if (!state.active) {
      return;
    }
    doc.removeEventListener("focusin", checkFocusIn, true);
    doc.removeEventListener("mousedown", checkPointerDown, true);
    doc.removeEventListener("touchstart", checkPointerDown, true);
    doc.removeEventListener("click", checkClick, true);
    doc.removeEventListener("keydown", checkKey, true);
    return trap;
  };
  var checkDomRemoval = function checkDomRemoval2(mutations) {
    var isFocusedNodeRemoved = mutations.some(function(mutation) {
      var removedNodes = Array.from(mutation.removedNodes);
      return removedNodes.some(function(node) {
        return node === state.mostRecentlyFocusedNode;
      });
    });
    if (isFocusedNodeRemoved) {
      tryFocus(getInitialFocusNode());
    }
  };
  var mutationObserver = typeof window !== "undefined" && "MutationObserver" in window ? new MutationObserver(checkDomRemoval) : void 0;
  var updateObservedNodes = function updateObservedNodes2() {
    if (!mutationObserver) {
      return;
    }
    mutationObserver.disconnect();
    if (state.active && !state.paused) {
      state.containers.map(function(container) {
        mutationObserver.observe(container, {
          subtree: true,
          childList: true
        });
      });
    }
  };
  trap = {
    get active() {
      return state.active;
    },
    get paused() {
      return state.paused;
    },
    activate: function activate(activateOptions) {
      if (state.active) {
        return this;
      }
      var onActivate = getOption(activateOptions, "onActivate");
      var onPostActivate = getOption(activateOptions, "onPostActivate");
      var checkCanFocusTrap = getOption(activateOptions, "checkCanFocusTrap");
      if (!checkCanFocusTrap) {
        updateTabbableNodes();
      }
      state.active = true;
      state.paused = false;
      state.nodeFocusedBeforeActivation = doc.activeElement;
      onActivate === null || onActivate === void 0 ? void 0 : onActivate();
      var finishActivation = function finishActivation2() {
        if (checkCanFocusTrap) {
          updateTabbableNodes();
        }
        addListeners();
        updateObservedNodes();
        onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();
      };
      if (checkCanFocusTrap) {
        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);
        return this;
      }
      finishActivation();
      return this;
    },
    deactivate: function deactivate(deactivateOptions) {
      if (!state.active) {
        return this;
      }
      var options = _objectSpread2({
        onDeactivate: config.onDeactivate,
        onPostDeactivate: config.onPostDeactivate,
        checkCanReturnFocus: config.checkCanReturnFocus
      }, deactivateOptions);
      clearTimeout(state.delayInitialFocusTimer);
      state.delayInitialFocusTimer = void 0;
      removeListeners();
      state.active = false;
      state.paused = false;
      updateObservedNodes();
      activeFocusTraps.deactivateTrap(trapStack, trap);
      var onDeactivate = getOption(options, "onDeactivate");
      var onPostDeactivate = getOption(options, "onPostDeactivate");
      var checkCanReturnFocus = getOption(options, "checkCanReturnFocus");
      var returnFocus = getOption(options, "returnFocus", "returnFocusOnDeactivate");
      onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();
      var finishDeactivation = function finishDeactivation2() {
        delay(function() {
          if (returnFocus) {
            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));
          }
          onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();
        });
      };
      if (returnFocus && checkCanReturnFocus) {
        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);
        return this;
      }
      finishDeactivation();
      return this;
    },
    pause: function pause(pauseOptions) {
      if (state.paused || !state.active) {
        return this;
      }
      var onPause = getOption(pauseOptions, "onPause");
      var onPostPause = getOption(pauseOptions, "onPostPause");
      state.paused = true;
      onPause === null || onPause === void 0 ? void 0 : onPause();
      removeListeners();
      updateObservedNodes();
      onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();
      return this;
    },
    unpause: function unpause(unpauseOptions) {
      if (!state.paused || !state.active) {
        return this;
      }
      var onUnpause = getOption(unpauseOptions, "onUnpause");
      var onPostUnpause = getOption(unpauseOptions, "onPostUnpause");
      state.paused = false;
      onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();
      updateTabbableNodes();
      addListeners();
      updateObservedNodes();
      onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();
      return this;
    },
    updateContainerElements: function updateContainerElements(containerElements) {
      var elementsAsArray = [].concat(containerElements).filter(Boolean);
      state.containers = elementsAsArray.map(function(element) {
        return typeof element === "string" ? doc.querySelector(element) : element;
      });
      if (state.active) {
        updateTabbableNodes();
      }
      updateObservedNodes();
      return this;
    }
  };
  trap.updateContainerElements(elements);
  return trap;
};

// node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js
var import_react2 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/helpers/useUnmountEffect.js
var import_react = __toESM(require_react());
function useUnmountEffect(effect4) {
  const effectRef = (0, import_react.useRef)(effect4);
  effectRef.current = effect4;
  (0, import_react.useEffect)(() => () => {
    effectRef.current();
  }, []);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js
var FocusTrap = (0, import_react2.forwardRef)(function FocusTrap2(_a, forwardedRef) {
  var { active = true, paused = false, focusTrapOptions = {}, preventScrollOnDeactivate = false } = _a, props = __rest(_a, ["active", "paused", "focusTrapOptions", "preventScrollOnDeactivate"]);
  const ref = (0, import_react2.useRef)(null);
  (0, import_react2.useImperativeHandle)(forwardedRef, () => ref.current);
  const focusTrapRef = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    const focusTrap = createFocusTrap(ref.current, Object.assign(Object.assign({}, focusTrapOptions), { returnFocusOnDeactivate: false }));
    focusTrapRef.current = focusTrap;
    return () => {
      focusTrap.deactivate();
    };
  }, []);
  (0, import_react2.useEffect)(() => {
    const focusTrap = focusTrapRef.current;
    active ? focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.activate() : focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.deactivate();
  }, [active]);
  (0, import_react2.useEffect)(() => {
    const focusTrap = focusTrapRef.current;
    paused ? focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.pause() : focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.unpause();
  }, [paused]);
  const previousElementRef = (0, import_react2.useRef)(typeof document !== "undefined" ? document.activeElement : null);
  useUnmountEffect(() => {
    if (focusTrapOptions.returnFocusOnDeactivate !== false && previousElementRef.current instanceof HTMLElement) {
      previousElementRef.current.focus({
        preventScroll: preventScrollOnDeactivate
      });
    }
  });
  return import_react2.default.createElement("div", Object.assign({ ref }, props));
});
FocusTrap.displayName = "FocusTrap";

// node_modules/@patternfly/react-core/dist/esm/helpers/GenerateId/GenerateId.js
var React3 = __toESM(require_react());
var currentId = 0;
var GenerateId = class extends React3.Component {
  constructor() {
    super(...arguments);
    this.id = `${this.props.prefix}${currentId++}`;
  }
  render() {
    return this.props.children(this.id);
  }
};
GenerateId.displayName = "GenerateId";
GenerateId.defaultProps = {
  prefix: "pf-random-id-"
};

// node_modules/@patternfly/react-core/dist/esm/helpers/htmlConstants.js
var ASTERISK = "*";

// node_modules/@patternfly/react-core/dist/esm/helpers/OUIA/ouia.js
var import_react3 = __toESM(require_react());
var uid = 0;
var ouiaPrefix = "OUIA-Generated-";
var ouiaIdByRoute = {};
function getOUIAProps(componentType, id, ouiaSafe = true) {
  return {
    "data-ouia-component-type": `PF5/${componentType}`,
    "data-ouia-safe": ouiaSafe,
    "data-ouia-component-id": id
  };
}
var useOUIAProps = (componentType, id, ouiaSafe = true, variant) => ({
  "data-ouia-component-type": `PF5/${componentType}`,
  "data-ouia-safe": ouiaSafe,
  "data-ouia-component-id": useOUIAId(componentType, id, variant)
});
var useOUIAId = (componentType, id, variant) => {
  const defaultOUIAId = (0, import_react3.useMemo)(() => getDefaultOUIAId(componentType, variant), [componentType, variant]);
  return id !== null && id !== void 0 ? id : defaultOUIAId;
};
function getDefaultOUIAId(componentType, variant) {
  try {
    let key;
    if (typeof window !== "undefined") {
      key = `${window.location.href}-${componentType}-${variant || ""}`;
    } else {
      key = `${componentType}-${variant || ""}`;
    }
    if (!ouiaIdByRoute[key]) {
      ouiaIdByRoute[key] = 0;
    }
    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ""}${++ouiaIdByRoute[key]}`;
  } catch (exception) {
    return `${ouiaPrefix}${componentType}-${variant ? `${variant}-` : ""}${++uid}`;
  }
}

// node_modules/@patternfly/react-core/dist/esm/helpers/util.js
var ReactDOM = __toESM(require_react_dom());
function capitalize(input) {
  return input[0].toUpperCase() + input.substring(1);
}
function getUniqueId(prefix = "pf") {
  const uid2 = (/* @__PURE__ */ new Date()).getTime() + Math.random().toString(36).slice(2);
  return `${prefix}-${uid2}`;
}
function debounce(func, wait) {
  let timeout;
  return (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}
function isElementInView(container, element, partial, strict = false) {
  if (!container || !element) {
    return false;
  }
  const containerBounds = container.getBoundingClientRect();
  const elementBounds = element.getBoundingClientRect();
  const containerBoundsLeft = Math.ceil(containerBounds.left);
  const containerBoundsRight = Math.floor(containerBounds.right);
  const elementBoundsLeft = Math.ceil(elementBounds.left);
  const elementBoundsRight = Math.floor(elementBounds.right);
  const isTotallyInView = elementBoundsLeft >= containerBoundsLeft && elementBoundsRight <= containerBoundsRight;
  const isPartiallyInView = (partial || !strict && containerBounds.width < elementBounds.width) && (elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft || elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight);
  return isTotallyInView || isPartiallyInView;
}
function sideElementIsOutOfView(container, element) {
  const containerBounds = container.getBoundingClientRect();
  const elementBounds = element.getBoundingClientRect();
  const containerBoundsLeft = Math.floor(containerBounds.left);
  const containerBoundsRight = Math.floor(containerBounds.right);
  const elementBoundsLeft = Math.floor(elementBounds.left);
  const elementBoundsRight = Math.floor(elementBounds.right);
  const isOffLeft = elementBoundsLeft < containerBoundsLeft;
  const isOffRight = elementBoundsRight > containerBoundsRight;
  let side = SIDE.NONE;
  if (isOffRight && isOffLeft) {
    side = SIDE.BOTH;
  } else if (isOffRight) {
    side = SIDE.RIGHT;
  } else if (isOffLeft) {
    side = SIDE.LEFT;
  }
  return side;
}
function fillTemplate(templateString, templateVars) {
  return templateString.replace(/\${(.*?)}/g, (_, match) => templateVars[match] || "");
}
function keyHandler(index, innerIndex, position, refsCollection, kids, custom = false) {
  if (!Array.isArray(kids)) {
    return;
  }
  const isMultiDimensional = refsCollection.filter((ref) => ref)[0].constructor === Array;
  let nextIndex = index;
  let nextInnerIndex = innerIndex;
  if (position === "up") {
    if (index === 0) {
      nextIndex = kids.length - 1;
    } else {
      nextIndex = index - 1;
    }
  } else if (position === "down") {
    if (index === kids.length - 1) {
      nextIndex = 0;
    } else {
      nextIndex = index + 1;
    }
  } else if (position === "left") {
    if (innerIndex === 0) {
      nextInnerIndex = refsCollection[index].length - 1;
    } else {
      nextInnerIndex = innerIndex - 1;
    }
  } else if (position === "right") {
    if (innerIndex === refsCollection[index].length - 1) {
      nextInnerIndex = 0;
    } else {
      nextInnerIndex = innerIndex + 1;
    }
  }
  if (refsCollection[nextIndex] === null || refsCollection[nextIndex] === void 0 || isMultiDimensional && (refsCollection[nextIndex][nextInnerIndex] === null || refsCollection[nextIndex][nextInnerIndex] === void 0)) {
    keyHandler(nextIndex, nextInnerIndex, position, refsCollection, kids, custom);
  } else if (custom) {
    if (refsCollection[nextIndex].focus) {
      refsCollection[nextIndex].focus();
    }
    const element = ReactDOM.findDOMNode(refsCollection[nextIndex]);
    element.focus();
  } else if (position !== "tab") {
    if (isMultiDimensional) {
      refsCollection[nextIndex][nextInnerIndex].focus();
    } else {
      refsCollection[nextIndex].focus();
    }
  }
}
function findTabbableElements(containerRef, tababbleSelectors) {
  const tabbable3 = containerRef.current.querySelectorAll(tababbleSelectors);
  const list = Array.prototype.filter.call(tabbable3, function(item) {
    return item.tabIndex >= "0";
  });
  return list;
}
function getNextIndex(index, position, collection) {
  let nextIndex;
  if (position === "up") {
    if (index === 0) {
      nextIndex = collection.length - 1;
    } else {
      nextIndex = index - 1;
    }
  } else if (index === collection.length - 1) {
    nextIndex = 0;
  } else {
    nextIndex = index + 1;
  }
  if (collection[nextIndex] === void 0 || collection[nextIndex][0] === null) {
    return getNextIndex(nextIndex, position, collection);
  } else {
    return nextIndex;
  }
}
function pluralize(i, singular, plural) {
  if (!plural) {
    plural = `${singular}s`;
  }
  return `${i || 0} ${i === 1 ? singular : plural}`;
}
var setBreakpointCssVars = (mods, cssVar) => Object.entries(mods || {}).reduce((acc, [breakpoint, value]) => breakpoint === "default" ? Object.assign(Object.assign({}, acc), { [cssVar]: value }) : Object.assign(Object.assign({}, acc), { [`${cssVar}-on-${breakpoint}`]: value }), {});
var formatBreakpointMods = (mods, styles, stylePrefix = "", breakpoint, vertical) => {
  if (!mods) {
    return "";
  }
  if (breakpoint && !vertical) {
    if (breakpoint in mods) {
      return styles.modifiers[toCamel(`${stylePrefix}${mods[breakpoint]}`)];
    }
    const breakpointsOrder = ["2xl", "xl", "lg", "md", "sm", "default"];
    const breakpointsIndex = breakpointsOrder.indexOf(breakpoint);
    for (let i = breakpointsIndex; i < breakpointsOrder.length; i++) {
      if (breakpointsOrder[i] in mods) {
        return styles.modifiers[toCamel(`${stylePrefix}${mods[breakpointsOrder[i]]}`)];
      }
    }
    return "";
  }
  return Object.entries(mods || {}).map(([breakpoint2, mod]) => `${stylePrefix}${mod}${breakpoint2 !== "default" ? `-on-${breakpoint2}` : ""}${vertical && breakpoint2 !== "default" ? "-height" : ""}`).map(toCamel).map((mod) => mod.replace(/-?(\dxl)/gi, (_res, group) => `_${group}`)).map((modifierKey) => styles.modifiers[modifierKey]).filter(Boolean).join(" ");
};
var getVerticalBreakpoint = (height) => {
  if (height === null) {
    return null;
  }
  if (height >= globalHeightBreakpoints["2xl"]) {
    return "2xl";
  }
  if (height >= globalHeightBreakpoints.xl) {
    return "xl";
  }
  if (height >= globalHeightBreakpoints.lg) {
    return "lg";
  }
  if (height >= globalHeightBreakpoints.md) {
    return "md";
  }
  if (height >= globalHeightBreakpoints.sm) {
    return "sm";
  }
  return "default";
};
var getBreakpoint = (width) => {
  if (width === null) {
    return null;
  }
  if (width >= globalWidthBreakpoints["2xl"]) {
    return "2xl";
  }
  if (width >= globalWidthBreakpoints.xl) {
    return "xl";
  }
  if (width >= globalWidthBreakpoints.lg) {
    return "lg";
  }
  if (width >= globalWidthBreakpoints.md) {
    return "md";
  }
  if (width >= globalWidthBreakpoints.sm) {
    return "sm";
  }
  return "default";
};
var camelize = (s) => s.toUpperCase().replace("-", "").replace("_", "");
var toCamel = (s) => s.replace(/([-_][a-z])/gi, camelize);
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var getTextWidth = (text, node) => {
  const computedStyle = getComputedStyle(node);
  const getFontFromComputedStyle = () => {
    let computedFont = "";
    const fontStretchLookupTable = {
      "50%": "ultra-condensed",
      "62.5%": "extra-condensed",
      "75%": "condensed",
      "87.5%": "semi-condensed",
      "100%": "normal",
      "112.5%": "semi-expanded",
      "125%": "expanded",
      "150%": "extra-expanded",
      "200%": "ultra-expanded"
    };
    let fontStretch;
    if (computedStyle.fontStretch in fontStretchLookupTable) {
      fontStretch = fontStretchLookupTable[computedStyle.fontStretch];
    } else {
      fontStretch = "normal";
    }
    computedFont = computedStyle.fontStyle + " " + computedStyle.fontVariant + " " + computedStyle.fontWeight + " " + fontStretch + " " + computedStyle.fontSize + "/" + computedStyle.lineHeight + " " + computedStyle.fontFamily;
    return computedFont;
  };
  const canvas = document.createElement("canvas");
  const context = canvas.getContext("2d");
  context.font = computedStyle.font || getFontFromComputedStyle();
  return context.measureText(text).width;
};
var innerDimensions = (node) => {
  const computedStyle = getComputedStyle(node);
  let width = node.clientWidth;
  let height = node.clientHeight;
  height -= parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);
  width -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);
  return { height, width };
};
var trimLeft = (node, value) => {
  const availableWidth = innerDimensions(node).width;
  let newValue = value;
  if (getTextWidth(value, node) > availableWidth) {
    while (getTextWidth(`...${newValue}`, node) > availableWidth) {
      newValue = newValue.substring(1);
    }
    if (node.value) {
      node.value = `...${newValue}`;
    } else {
      node.innerText = `...${newValue}`;
    }
  } else {
    if (node.value) {
      node.value = value;
    } else {
      node.innerText = value;
    }
  }
};
var preventedEvents = (events) => events.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), { [eventToPrevent]: (event) => {
  event.preventDefault();
} }), {});
var clearTimeouts = (timeoutRefs) => {
  timeoutRefs.forEach((ref) => {
    if (ref.current) {
      clearTimeout(ref.current);
    }
  });
};
var getLanguageDirection = (targetElement, defaultDirection = "ltr") => {
  if (!targetElement) {
    return defaultDirection;
  }
  const computedDirection = getComputedStyle(targetElement).getPropertyValue("direction");
  if (["ltr", "rtl"].includes(computedDirection)) {
    return computedDirection;
  }
  return defaultDirection;
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/Popper.js
var React6 = __toESM(require_react());
var ReactDOM2 = __toESM(require_react_dom());

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/react-popper/usePopper.js
var React5 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element) {
  const rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindow.js
function getWindow(node) {
  if (node.toString() !== "[object Window]") {
    const ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView : window;
  }
  return node;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  const win = getWindow(node);
  const scrollLeft = win.pageXOffset;
  const scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/instanceOf.js
function isElement(node) {
  const OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  const OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return (isElement(element) ? element.ownerDocument : element.document).documentElement;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getComputedStyle.js
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isScrollParent.js
function isScrollParent(element) {
  const { overflow, overflowX, overflowY } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getCompositeRect.js
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed = false) {
  const documentElement = getDocumentElement(offsetParent);
  const rect = getBoundingClientRect(elementOrVirtualElement);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  let scroll = { scrollLeft: 0, scrollTop: 0 };
  let offsets = { x: 0, y: 0 };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // $FlowFixMe: this is a quicker (but less type safe) way to save quite some bytes from the bundle
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    // $FlowFixMe: need a better way to handle this...
    element.host || // ShadowRoot detected
    // $FlowFixMe: HTMLElement is a Node
    getDocumentElement(element)
  );
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/listScrollParents.js
function listScrollParents(element, list = []) {
  const scrollParent = getScrollParent(element);
  const isBody = getNodeName(scrollParent) === "body";
  const win = getWindow(scrollParent);
  const target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  const updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle2(element).position === "fixed") {
    return null;
  }
  const offsetParent = element.offsetParent;
  if (offsetParent) {
    const html = getDocumentElement(offsetParent);
    if (getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && getComputedStyle2(html).position !== "static") {
      return html;
    }
  }
  return offsetParent;
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    const css2 = getComputedStyle2(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.willChange && css2.willChange !== "auto") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  const window2 = getWindow(element);
  let offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static") {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce((acc, placement) => acc.concat([`${placement}-${start}`, `${placement}-${end}`]), []);
var placements = [...basePlacements, auto].reduce((acc, placement) => acc.concat([placement, `${placement}-${start}`, `${placement}-${end}`]), []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [
  beforeRead,
  read,
  afterRead,
  beforeMain,
  main,
  afterMain,
  beforeWrite,
  write,
  afterWrite
];

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/orderModifiers.js
function order(modifiers) {
  const map = /* @__PURE__ */ new Map();
  const visited = /* @__PURE__ */ new Set();
  const result = [];
  modifiers.forEach((modifier) => {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    const requires = [...modifier.requires || [], ...modifier.requiresIfExists || []];
    requires.forEach((dep) => {
      if (!visited.has(dep)) {
        const depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach((modifier) => {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  const orderedModifiers = order(modifiers);
  return modifierPhases.reduce((acc, phase) => acc.concat(orderedModifiers.filter((modifier) => modifier.phase === phase)), []);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/debounce.js
function debounce2(fn) {
  let pending;
  return () => {
    if (!pending) {
      pending = new Promise((resolve) => {
        Promise.resolve().then(() => {
          pending = void 0;
          resolve(fn());
        });
      });
    }
    return pending;
  };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergeByName.js
function mergeByName(modifiers) {
  const merged = modifiers.reduce((merged2, current) => {
    const existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), { options: Object.assign(Object.assign({}, existing.options), current.options), data: Object.assign(Object.assign({}, existing.data), current.data) }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map((key) => merged[key]);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getViewportRect.js
function getViewportRect(element) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const winScroll = getWindowScroll(element);
  const body = element.ownerDocument.body;
  const width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  const height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  let x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  const y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return { width, height, x, y };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/contains.js
function contains(parent, child) {
  const isShadow = Boolean(child.getRootNode && child.getRootNode().host);
  if (parent.contains(child)) {
    return true;
  } else if (isShadow) {
    let next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign(Object.assign({}, rect), { left: rect.x, top: rect.y, right: rect.x + rect.width, bottom: rect.y + rect.height });
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element) {
  const rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  const clippingParents2 = listScrollParents(getParentNode(element));
  const canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
  const clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter((clippingParent) => isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body");
}
function getClippingRect(element, boundary, rootBoundary) {
  const mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  const clippingParents2 = [...mainClippingParents, rootBoundary];
  const firstClippingParent = clippingParents2[0];
  const clippingRect = clippingParents2.reduce((accRect, clippingParent) => {
    const rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = Math.max(rect.top, accRect.top);
    accRect.right = Math.min(rect.right, accRect.right);
    accRect.bottom = Math.min(rect.bottom, accRect.bottom);
    accRect.left = Math.max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeOffsets.js
function computeOffsets({ reference: reference2, element, placement }) {
  const basePlacement = placement ? getBasePlacement(placement) : null;
  const variation = placement ? getVariation(placement) : null;
  const commonX = reference2.x + reference2.width / 2 - element.width / 2;
  const commonY = reference2.y + reference2.height / 2 - element.height / 2;
  let offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  const mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    const len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = Math.floor(offsets[mainAxis]) - Math.floor(reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = Math.floor(offsets[mainAxis]) + Math.ceil(reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce((hashMap, key) => {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/detectOverflow.js
function detectOverflow(state, options = {}) {
  const { placement = state.placement, boundary = clippingParents, rootBoundary = viewport, elementContext = popper, altBoundary = false, padding = 0 } = options;
  const paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  const altContext = elementContext === popper ? reference : popper;
  const referenceElement = state.elements.reference;
  const popperRect = state.rects.popper;
  const element = state.elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  const referenceClientRect = getBoundingClientRect(referenceElement);
  const popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  const popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets2));
  const elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  const overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  const offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    const offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach((key) => {
      const multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      const axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/index.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements(...args) {
  return !args.some((element) => !(element && typeof element.getBoundingClientRect === "function"));
}
function popperGenerator(generatorOptions = {}) {
  const { defaultModifiers: defaultModifiers2 = [], defaultOptions = DEFAULT_OPTIONS } = generatorOptions;
  return function createPopper3(reference2, popper2, options = defaultOptions) {
    let state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    let effectCleanupFns = [];
    let isDestroyed = false;
    const instance = {
      state,
      setOptions(options2) {
        cleanupModifierEffects();
        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        const orderedModifiers = orderModifiers(mergeByName([...defaultModifiers2, ...state.options.modifiers]));
        state.orderedModifiers = orderedModifiers.filter((m) => m.enabled);
        if (false) {
          const modifiers = uniqueBy([...orderedModifiers, ...state.options.modifiers], ({ name }) => name);
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            const flipModifier = state.orderedModifiers.find(({ name }) => name === "flip");
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          const { marginTop, marginRight, marginBottom, marginLeft } = getComputedStyle2(popper2);
          if ([marginTop, marginRight, marginBottom, marginLeft].some((margin) => parseFloat(margin))) {
            console.warn([
              'Popper: CSS "margin" styles cannot be used to apply padding',
              "between the popper and its reference element or boundary.",
              "To replicate margin, use the `offset` modifier, as well as",
              "the `padding` option in the `preventOverflow` and `flip`",
              "modifiers."
            ].join(" "));
          }
        }
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate() {
        if (isDestroyed) {
          return;
        }
        const { reference: reference3, popper: popper3 } = state.elements;
        if (!areValidElements(reference3, popper3)) {
          if (false) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach((modifier) => state.modifiersData[modifier.name] = Object.assign({}, modifier.data));
        let __debug_loops__ = 0;
        for (let index = 0; index < state.orderedModifiers.length; index++) {
          if (false) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          const { fn, options: options2 = {}, name } = state.orderedModifiers[index];
          if (typeof fn === "function") {
            state = fn({ state, options: options2, name, instance }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce2(() => new Promise((resolve) => {
        instance.forceUpdate();
        resolve(state);
      })),
      destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (false) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance;
    }
    instance.setOptions(options).then((state2) => {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(({ name, options: options2 = {}, effect: effect4 }) => {
        if (typeof effect4 === "function") {
          const cleanupFn = effect4({ state, name, instance, options: options2 });
          const noopFn = () => {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach((fn) => fn());
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/eventListeners.js
var passive = { passive: true };
function effect({ state, instance, options }) {
  const { scroll = true, resize = true } = options;
  const window2 = getWindow(state.elements.popper);
  const scrollParents = [...state.scrollParents.reference, ...state.scrollParents.popper];
  if (scroll) {
    scrollParents.forEach((scrollParent) => {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return () => {
    if (scroll) {
      scrollParents.forEach((scrollParent) => {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: () => {
  },
  effect,
  data: {}
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/popperOffsets.js
function popperOffsets({ state, name }) {
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsets({ x, y }) {
  const win = window;
  const dpr = win.devicePixelRatio || 1;
  return {
    x: Math.round(x * dpr) / dpr || 0,
    y: Math.round(y * dpr) / dpr || 0
  };
}
function mapToStyles({ popper: popper2, popperRect, placement, offsets, position, gpuAcceleration, adaptive }) {
  let { x, y } = roundOffsets(offsets);
  const hasX = offsets.hasOwnProperty("x");
  const hasY = offsets.hasOwnProperty("y");
  let sideX = left;
  let sideY = top;
  const win = window;
  if (adaptive) {
    let offsetParent = getOffsetParent(popper2);
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
    }
    if (placement === top) {
      sideY = bottom;
      y -= offsetParent.clientHeight - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left) {
      sideX = right;
      x -= offsetParent.clientWidth - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  const commonStyles = Object.assign({ position }, adaptive && unsetSides);
  if (gpuAcceleration) {
    return Object.assign(Object.assign({}, commonStyles), {
      [sideY]: hasY ? "0" : "",
      [sideX]: hasX ? "0" : "",
      // Layer acceleration can disable subpixel rendering which causes slightly
      // blurry text on low PPI displays, so we want to use 2D transforms
      // instead
      transform: (win.devicePixelRatio || 1) < 2 ? `translate(${x}px, ${y}px)` : `translate3d(${x}px, ${y}px, 0)`
    });
  }
  return Object.assign(Object.assign({}, commonStyles), { [sideY]: hasY ? `${y}px` : "", [sideX]: hasX ? `${x}px` : "", transform: "" });
}
function computeStyles({ state, options }) {
  const { gpuAcceleration = true, adaptive = true } = options;
  if (false) {
    const transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some((property) => transitionProperty.indexOf(property) >= 0)) {
      console.warn([
        "Popper: Detected CSS transitions on at least one of the following",
        'CSS properties: "transform", "top", "right", "bottom", "left".',
        "\n\n",
        'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
        "for smooth transitions, or remove these properties from the CSS",
        "transition declaration on the popper element if only transitioning",
        "opacity or background-color for example.",
        "\n\n",
        "We recommend using the popper element as a wrapper around an inner",
        "element that can have any CSS property transitioned for animations."
      ].join(" "));
    }
  }
  const commonStyles = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.popperOffsets, position: state.options.strategy, adaptive })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), { offsets: state.modifiersData.arrow, position: "absolute", adaptive: false })));
  }
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { "data-popper-placement": state.placement });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/applyStyles.js
function applyStyles({ state }) {
  Object.keys(state.elements).forEach((name) => {
    const style = state.styles[name] || {};
    const attributes = state.attributes[name] || {};
    const element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach((name2) => {
      const value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect2({ state }) {
  const initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return () => {
    Object.keys(state.elements).forEach((name) => {
      const element = state.elements[name];
      const attributes = state.attributes[name] || {};
      const styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      const style = styleProperties.reduce((style2, property) => {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach((attribute) => {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect: effect2,
  requires: ["computeStyles"]
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  const basePlacement = getBasePlacement(placement);
  const invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  let [skidding, distance] = typeof offset2 === "function" ? offset2(Object.assign(Object.assign({}, rects), { placement })) : offset2;
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? { x: distance, y: skidding } : { x: skidding, y: distance };
}
function offset({ state, options, name }) {
  const { offset: offset2 = [0, 0] } = options;
  const data = placements.reduce((acc, placement) => {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  const { x, y } = data[state.placement];
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositePlacement.js
var hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (matched) => hash[matched]);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getOppositeVariationPlacement.js
var hash2 = { start: "end", end: "start" };
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, (matched) => hash2[matched]);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options = {}) {
  const { placement, boundary, rootBoundary, padding, flipVariations, allowedAutoPlacements = placements } = options;
  const variation = getVariation(placement);
  const placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter((placement2) => getVariation(placement2) === variation) : basePlacements;
  let allowedPlacements = placements2.filter((placement2) => allowedAutoPlacements.indexOf(placement2) >= 0);
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (false) {
      console.error([
        "Popper: The `allowedAutoPlacements` option did not allow any",
        "placements. Ensure the `placement` option matches the variation",
        "of the allowed placements.",
        'For example, "auto" cannot be used to allow "bottom-start".',
        'Use "auto-start" instead.'
      ].join(" "));
    }
  }
  const overflows = allowedPlacements.reduce((acc, placement2) => {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  const oppositePlacement = getOppositePlacement(placement);
  return [
    getOppositeVariationPlacement(placement),
    oppositePlacement,
    getOppositeVariationPlacement(oppositePlacement)
  ];
}
function flip({ state, options, name }) {
  if (state.modifiersData[name]._skip) {
    return;
  }
  const { mainAxis: checkMainAxis = true, altAxis: checkAltAxis = true, fallbackPlacements: specifiedFallbackPlacements, padding, boundary, rootBoundary, altBoundary, flipVariations = true, allowedAutoPlacements } = options;
  const preferredPlacement = state.options.placement;
  const basePlacement = getBasePlacement(preferredPlacement);
  const isBasePlacement = basePlacement === preferredPlacement;
  const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  const placements2 = [preferredPlacement, ...fallbackPlacements].reduce((acc, placement) => acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
    placement,
    boundary,
    rootBoundary,
    padding,
    flipVariations,
    allowedAutoPlacements
  }) : placement), []);
  const referenceRect = state.rects.reference;
  const popperRect = state.rects.popper;
  const checksMap = /* @__PURE__ */ new Map();
  let makeFallbackChecks = true;
  let firstFittingPlacement = placements2[0];
  for (let i = 0; i < placements2.length; i++) {
    const placement = placements2[i];
    const basePlacement2 = getBasePlacement(placement);
    const isStartVariation = getVariation(placement) === start;
    const isVertical = [top, bottom].indexOf(basePlacement2) >= 0;
    const len = isVertical ? "width" : "height";
    const overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    let mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    const altVariationSide = getOppositePlacement(mainVariationSide);
    const checks = [];
    if (checkMainAxis) {
      checks.push(overflow[basePlacement2] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every((check) => check)) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    const numberOfChecks = flipVariations ? 3 : 1;
    for (let i = numberOfChecks; i > 0; i--) {
      const fittingPlacement = placements2.find((placement) => {
        const checks = checksMap.get(placement);
        if (checks) {
          return checks.slice(0, i).every((check) => check);
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        break;
      }
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: { _skip: false }
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/utils/within.js
function within(min, value, max) {
  return Math.max(min, Math.min(value, max));
}

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/preventOverflow.js
function preventOverflow({ state, options, name }) {
  const { mainAxis: checkMainAxis = true, altAxis: checkAltAxis = false, boundary, rootBoundary, altBoundary, padding, tether = true, tetherOffset = 0 } = options;
  const overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  const basePlacement = getBasePlacement(state.placement);
  const variation = getVariation(state.placement);
  const isBasePlacement = !variation;
  const mainAxis = getMainAxisFromPlacement(basePlacement);
  const altAxis = getAltAxis(mainAxis);
  const popperOffsets2 = state.modifiersData.popperOffsets;
  const referenceRect = state.rects.reference;
  const popperRect = state.rects.popper;
  const tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign(Object.assign({}, state.rects), { placement: state.placement })) : tetherOffset;
  const data = { x: 0, y: 0 };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    const mainSide = mainAxis === "y" ? top : left;
    const altSide = mainAxis === "y" ? bottom : right;
    const len = mainAxis === "y" ? "height" : "width";
    const offset2 = popperOffsets2[mainAxis];
    const min = popperOffsets2[mainAxis] + overflow[mainSide];
    const max = popperOffsets2[mainAxis] - overflow[altSide];
    const additive = tether ? -popperRect[len] / 2 : 0;
    const minLen = variation === start ? referenceRect[len] : popperRect[len];
    const maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    const arrowElement = state.elements.arrow;
    const arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : { width: 0, height: 0 };
    const arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    const arrowPaddingMin = arrowPaddingObject[mainSide];
    const arrowPaddingMax = arrowPaddingObject[altSide];
    const arrowLen = within(0, referenceRect[len], arrowRect[len]);
    const minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    const maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    const arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    const clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    const offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    const tetherMin = popperOffsets2[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    const tetherMax = popperOffsets2[mainAxis] + maxOffset - offsetModifierValue;
    const preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset2, tether ? Math.max(max, tetherMax) : max);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    const mainSide = mainAxis === "x" ? top : left;
    const altSide = mainAxis === "x" ? bottom : right;
    const offset2 = popperOffsets2[altAxis];
    const min = offset2 + overflow[mainSide];
    const max = offset2 - overflow[altSide];
    const preventedOffset = within(min, offset2, max);
    popperOffsets2[altAxis] = preventedOffset;
    data[altAxis] = preventedOffset - offset2;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/arrow.js
function arrow({ state, name }) {
  const arrowElement = state.elements.arrow;
  const popperOffsets2 = state.modifiersData.popperOffsets;
  const basePlacement = getBasePlacement(state.placement);
  const axis = getMainAxisFromPlacement(basePlacement);
  const isVertical = [left, right].indexOf(basePlacement) >= 0;
  const len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  const paddingObject = state.modifiersData[`${name}#persistent`].padding;
  const arrowRect = getLayoutRect(arrowElement);
  const minProp = axis === "y" ? top : left;
  const maxProp = axis === "y" ? bottom : right;
  const endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  const startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  const arrowOffsetParent = getOffsetParent(arrowElement);
  const clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  const centerToReference = endDiff / 2 - startDiff / 2;
  const min = paddingObject[minProp];
  const max = clientSize - arrowRect[len] - paddingObject[maxProp];
  const center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  const offset2 = within(min, center, max);
  const axisProp = axis;
  state.modifiersData[name] = {
    [axisProp]: offset2,
    centerOffset: offset2 - center
  };
}
function effect3({ state, options, name }) {
  let { element: arrowElement = "[data-popper-arrow]", padding = 0 } = options;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (false) {
    if (!isHTMLElement(arrowElement)) {
      console.error([
        'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
        "To use an SVG arrow, wrap it in an HTMLElement that will be used as",
        "the arrow."
      ].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (false) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
  state.modifiersData[`${name}#persistent`] = {
    padding: mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements))
  };
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect3,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets = { x: 0, y: 0 }) {
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some((side) => overflow[side] >= 0);
}
function hide({ state, name }) {
  const referenceRect = state.rects.reference;
  const popperRect = state.rects.popper;
  const preventedOffsets = state.modifiersData.preventOverflow;
  const referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  const popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  const referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  const popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  const isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  const hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), { "data-popper-reference-hidden": isReferenceHidden, "data-popper-escaped": hasPopperEscaped });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/popper-core/popper.js
var defaultModifiers = [
  eventListeners_default,
  popperOffsets_default,
  computeStyles_default,
  applyStyles_default,
  offset_default,
  flip_default,
  preventOverflow_default,
  arrow_default,
  hide_default
];
var createPopper2 = popperGenerator({ defaultModifiers });

// node_modules/@patternfly/react-core/dist/esm/helpers/useIsomorphicLayout.js
var React4 = __toESM(require_react());
var useIsomorphicLayoutEffect = canUseDOM ? React4.useLayoutEffect : React4.useEffect;

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/thirdparty/react-popper/usePopper.js
var isEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);
var fromEntries = (entries) => entries.reduce((acc, [key, value]) => {
  acc[key] = value;
  return acc;
}, {});
var EMPTY_MODIFIERS = [];
var usePopper = (referenceElement, popperElement, options = {}) => {
  const prevOptions = React5.useRef(null);
  const optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || "bottom",
    strategy: options.strategy || "absolute",
    modifiers: options.modifiers || EMPTY_MODIFIERS
  };
  const [state, setState] = React5.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      }
    },
    attributes: {}
  });
  const updateStateModifier = React5.useMemo(() => ({
    name: "updateState",
    enabled: true,
    phase: "write",
    // eslint-disable-next-line no-shadow
    fn: ({ state: state2 }) => {
      const elements = Object.keys(state2.elements);
      setState({
        styles: fromEntries(elements.map((element) => [element, state2.styles[element] || {}])),
        attributes: fromEntries(elements.map((element) => [element, state2.attributes[element]]))
      });
    },
    requires: ["computeStyles"]
  }), []);
  const popperOptions = React5.useMemo(() => {
    const newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [...optionsWithDefaults.modifiers, updateStateModifier, { name: "applyStyles", enabled: false }]
    };
    if (isEqual(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [
    optionsWithDefaults.onFirstUpdate,
    optionsWithDefaults.placement,
    optionsWithDefaults.strategy,
    optionsWithDefaults.modifiers,
    updateStateModifier
  ]);
  const popperInstanceRef = React5.useRef();
  useIsomorphicLayoutEffect(() => {
    if (popperInstanceRef && popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect(() => {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    const createPopper3 = options.createPopper || createPopper2;
    const popperInstance = createPopper3(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return () => {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/@patternfly/react-core/dist/esm/helpers/Popper/Popper.js
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Popper/Popper.css";
var hash3 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom",
  "top-start": "bottom-end",
  "top-end": "bottom-start",
  "bottom-start": "top-end",
  "bottom-end": "top-start",
  "left-start": "right-end",
  "left-end": "right-start",
  "right-start": "left-end",
  "right-end": "left-start"
};
var getOppositePlacement2 = (placement) => placement.replace(/left|right|bottom|top|top-start|top-end|bottom-start|bottom-end|right-start|right-end|left-start|left-end/g, (matched) => hash3[matched]);
var getOpacityTransition = (animationDuration) => `opacity ${animationDuration}ms cubic-bezier(.54, 1.5, .38, 1.11)`;
var Popper = ({ trigger, popper: popper2, direction = "down", position = "start", placement, width, minWidth = "trigger", maxWidth, appendTo = "inline", zIndex = 9999, isVisible = true, positionModifiers, distance = 0, onMouseEnter, onMouseLeave, onFocus, onBlur, onDocumentClick, onTriggerClick, onTriggerEnter, onPopperClick, onPopperMouseEnter, onPopperMouseLeave, onDocumentKeyDown, enableFlip = true, flipBehavior = "flip", triggerRef, popperRef, animationDuration = 0, entryDelay = 0, exitDelay = 0, onHidden = () => {
}, onHide = () => {
}, onMount = () => {
}, onShow = () => {
}, onShown = () => {
}, preventOverflow: preventOverflow2 = false }) => {
  var _a;
  const [triggerElement, setTriggerElement] = React6.useState(null);
  const [refElement, setRefElement] = React6.useState(null);
  const [popperElement, setPopperElement] = React6.useState(null);
  const [popperContent, setPopperContent] = React6.useState(null);
  const [ready, setReady] = React6.useState(false);
  const [opacity, setOpacity] = React6.useState(0);
  const [internalIsVisible, setInternalIsVisible] = React6.useState(isVisible);
  const transitionTimerRef = React6.useRef(null);
  const showTimerRef = React6.useRef(null);
  const hideTimerRef = React6.useRef(null);
  const prevExitDelayRef = React6.useRef();
  const refOrTrigger = refElement || triggerElement;
  const showPopper = isVisible || internalIsVisible;
  const triggerParent = (_a = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) || triggerElement) === null || _a === void 0 ? void 0 : _a.parentElement;
  const languageDirection = getLanguageDirection(triggerParent);
  const internalPosition = React6.useMemo(() => {
    const fixedPositions = { left: "left", right: "right", center: "center" };
    const positionMap = {
      ltr: Object.assign({ start: "left", end: "right" }, fixedPositions),
      rtl: Object.assign({ start: "right", end: "left" }, fixedPositions)
    };
    return positionMap[languageDirection][position];
  }, [position, languageDirection]);
  const onDocumentClickCallback = React6.useCallback((event) => onDocumentClick(event, refOrTrigger, popperElement), [showPopper, triggerElement, refElement, popperElement, onDocumentClick]);
  React6.useEffect(() => {
    setReady(true);
    onMount();
  }, []);
  React6.useEffect(() => () => {
    clearTimeouts([transitionTimerRef, hideTimerRef, showTimerRef]);
  }, []);
  React6.useEffect(() => {
    if (triggerRef) {
      if (triggerRef.current) {
        setRefElement(triggerRef.current);
      } else if (typeof triggerRef === "function") {
        setRefElement(triggerRef());
      }
    }
  }, [triggerRef, trigger]);
  React6.useEffect(() => {
    if (popperRef) {
      if (popperRef.current) {
        setPopperElement(popperRef.current);
      } else if (typeof popperRef === "function") {
        setPopperElement(popperRef());
      }
    }
  }, [showPopper, popperRef]);
  React6.useEffect(() => {
    const observer = new MutationObserver(() => {
      update && update();
    });
    popperElement && observer.observe(popperElement, { attributes: true, childList: true, subtree: true });
    return () => {
      observer.disconnect();
    };
  }, [popperElement]);
  const addEventListener = (listener, element, event, capture = false) => {
    if (listener && element) {
      element.addEventListener(event, listener, { capture });
    }
  };
  const removeEventListener = (listener, element, event, capture = false) => {
    if (listener && element) {
      element.removeEventListener(event, listener, { capture });
    }
  };
  React6.useEffect(() => {
    addEventListener(onMouseEnter, refOrTrigger, "mouseenter");
    addEventListener(onMouseLeave, refOrTrigger, "mouseleave");
    addEventListener(onFocus, refOrTrigger, "focus");
    addEventListener(onBlur, refOrTrigger, "blur");
    addEventListener(onTriggerClick, refOrTrigger, "click");
    addEventListener(onTriggerEnter, refOrTrigger, "keydown");
    addEventListener(onPopperClick, popperElement, "click");
    addEventListener(onPopperMouseEnter, popperElement, "mouseenter");
    addEventListener(onPopperMouseLeave, popperElement, "mouseleave");
    onDocumentClick && addEventListener(onDocumentClickCallback, document, "click", true);
    addEventListener(onDocumentKeyDown, document, "keydown", true);
    return () => {
      removeEventListener(onMouseEnter, refOrTrigger, "mouseenter");
      removeEventListener(onMouseLeave, refOrTrigger, "mouseleave");
      removeEventListener(onFocus, refOrTrigger, "focus");
      removeEventListener(onBlur, refOrTrigger, "blur");
      removeEventListener(onTriggerClick, refOrTrigger, "click");
      removeEventListener(onTriggerEnter, refOrTrigger, "keydown");
      removeEventListener(onPopperClick, popperElement, "click");
      removeEventListener(onPopperMouseEnter, popperElement, "mouseenter");
      removeEventListener(onPopperMouseLeave, popperElement, "mouseleave");
      onDocumentClick && removeEventListener(onDocumentClickCallback, document, "click", true);
      removeEventListener(onDocumentKeyDown, document, "keydown", true);
    };
  }, [
    triggerElement,
    popperElement,
    onMouseEnter,
    onMouseLeave,
    onFocus,
    onBlur,
    onTriggerClick,
    onTriggerEnter,
    onPopperClick,
    onPopperMouseEnter,
    onPopperMouseLeave,
    onDocumentClick,
    onDocumentKeyDown,
    refElement
  ]);
  const getPlacement = () => {
    if (placement) {
      return placement;
    }
    let convertedPlacement = direction === "up" ? "top" : "bottom";
    if (internalPosition !== "center") {
      convertedPlacement = `${convertedPlacement}-${internalPosition === "right" ? "end" : "start"}`;
    }
    return convertedPlacement;
  };
  const getPlacementMemo = React6.useMemo(getPlacement, [direction, internalPosition, placement]);
  const getOppositePlacementMemo = React6.useMemo(() => getOppositePlacement2(getPlacement()), [direction, internalPosition, placement]);
  const widthMods = React6.useMemo(() => ({
    name: "widthMods",
    enabled: width !== void 0 || minWidth !== void 0 || maxWidth !== void 0,
    phase: "beforeWrite",
    requires: ["computeStyles"],
    fn: ({ state }) => {
      const triggerWidth = state.rects.reference.width;
      if (width) {
        state.styles.popper.width = width === "trigger" ? `${triggerWidth}px` : width;
      }
      if (minWidth) {
        state.styles.popper.minWidth = minWidth === "trigger" ? `${triggerWidth}px` : minWidth;
      }
      if (maxWidth) {
        state.styles.popper.maxWidth = maxWidth === "trigger" ? `${triggerWidth}px` : maxWidth;
      }
    },
    effect: ({ state }) => {
      const triggerWidth = state.elements.reference.offsetWidth;
      if (width) {
        state.elements.popper.style.width = width === "trigger" ? `${triggerWidth}px` : width;
      }
      if (minWidth) {
        state.elements.popper.style.minWidth = minWidth === "trigger" ? `${triggerWidth}px` : minWidth;
      }
      if (maxWidth) {
        state.elements.popper.style.maxWidth = maxWidth === "trigger" ? `${triggerWidth}px` : maxWidth;
      }
      return () => {
      };
    }
  }), [width, minWidth, maxWidth]);
  const { styles: popperStyles, attributes, update, forceUpdate } = usePopper(refOrTrigger, popperElement, {
    placement: getPlacementMemo,
    modifiers: [
      {
        name: "offset",
        options: {
          offset: [0, distance]
        }
      },
      {
        name: "preventOverflow",
        enabled: preventOverflow2
      },
      {
        // adds attribute [data-popper-reference-hidden] to the popper element which can be used to hide it using CSS
        name: "hide",
        enabled: true
      },
      {
        name: "flip",
        enabled: getPlacementMemo.startsWith("auto") || enableFlip,
        options: {
          fallbackPlacements: flipBehavior === "flip" ? [getOppositePlacementMemo] : flipBehavior
        }
      },
      widthMods
    ]
  });
  React6.useEffect(() => {
    var _a2, _b, _c, _d, _e, _f;
    const currentPopperContent = ((_c = (_b = (_a2 = popper2 === null || popper2 === void 0 ? void 0 : popper2.props) === null || _a2 === void 0 ? void 0 : _a2.children[1]) === null || _b === void 0 ? void 0 : _b.props) === null || _c === void 0 ? void 0 : _c.children) || ((_f = (_e = (_d = popper2 === null || popper2 === void 0 ? void 0 : popper2.props) === null || _d === void 0 ? void 0 : _d.children) === null || _e === void 0 ? void 0 : _e.props) === null || _f === void 0 ? void 0 : _f.children);
    setPopperContent(currentPopperContent);
    if (currentPopperContent && popperContent && currentPopperContent !== popperContent) {
      forceUpdate && forceUpdate();
    }
  }, [popper2]);
  React6.useEffect(() => {
    if (prevExitDelayRef.current < exitDelay) {
      clearTimeouts([transitionTimerRef, hideTimerRef]);
      hideTimerRef.current = setTimeout(() => {
        transitionTimerRef.current = setTimeout(() => {
          setInternalIsVisible(false);
        }, animationDuration);
      }, exitDelay);
    }
    prevExitDelayRef.current = exitDelay;
  }, [exitDelay]);
  const show = () => {
    onShow();
    clearTimeouts([transitionTimerRef, hideTimerRef]);
    showTimerRef.current = setTimeout(() => {
      setInternalIsVisible(true);
      setOpacity(1);
      onShown();
    }, entryDelay);
  };
  const hide2 = () => {
    onHide();
    clearTimeouts([showTimerRef]);
    hideTimerRef.current = setTimeout(() => {
      setOpacity(0);
      transitionTimerRef.current = setTimeout(() => {
        setInternalIsVisible(false);
        onHidden();
      }, animationDuration);
    }, exitDelay);
  };
  React6.useEffect(() => {
    if (isVisible) {
      show();
    } else {
      hide2();
    }
  }, [isVisible]);
  const modifierFromPopperPosition = () => {
    if (attributes && attributes.popper && attributes.popper["data-popper-placement"]) {
      const popperPlacement = attributes.popper["data-popper-placement"];
      return positionModifiers[popperPlacement];
    }
    return positionModifiers.top;
  };
  const options = Object.assign({ className: css(popper2.props && popper2.props.className, positionModifiers && modifierFromPopperPosition()), style: Object.assign(Object.assign(Object.assign({}, popper2.props && popper2.props.style || {}), popperStyles.popper), {
    zIndex,
    opacity,
    transition: getOpacityTransition(animationDuration)
  }) }, attributes.popper);
  const getMenuWithPopper = () => {
    const localPopper = React6.cloneElement(popper2, options);
    return popperRef ? localPopper : React6.createElement("div", { style: { display: "contents" }, ref: (node) => setPopperElement(node === null || node === void 0 ? void 0 : node.firstElementChild) }, localPopper);
  };
  const getPopper = () => {
    if (appendTo === "inline") {
      return getMenuWithPopper();
    } else {
      const target = typeof appendTo === "function" ? appendTo() : appendTo;
      return ReactDOM2.createPortal(getMenuWithPopper(), target);
    }
  };
  return React6.createElement(
    React6.Fragment,
    null,
    !triggerRef && trigger && React6.isValidElement(trigger) && React6.createElement("div", { style: { display: "contents" }, ref: (node) => setTriggerElement(node === null || node === void 0 ? void 0 : node.firstElementChild) }, trigger),
    triggerRef && trigger && React6.isValidElement(trigger) && trigger,
    ready && showPopper && getPopper()
  );
};
Popper.displayName = "Popper";

// node_modules/@patternfly/react-core/dist/esm/helpers/KeyboardHandler.js
var React7 = __toESM(require_react());
var handleArrows = (event, navigableElements, isActiveElement = (element) => document.activeElement.contains(element), getFocusableElement = (element) => element, validSiblingTags = ["A", "BUTTON", "INPUT"], noVerticalArrowHandling = false, noHorizontalArrowHandling = false, updateTabIndex = true, onlyTraverseSiblings = true) => {
  const activeElement = document.activeElement;
  const key = event.key;
  let moveTarget = null;
  if (!noVerticalArrowHandling) {
    if (["ArrowUp", "ArrowDown"].includes(key)) {
      event.preventDefault();
      event.stopImmediatePropagation();
      let currentIndex = -1;
      navigableElements.forEach((element, index) => {
        if (isActiveElement(element)) {
          let increment = 0;
          while (!moveTarget && increment < navigableElements.length && increment * -1 < navigableElements.length) {
            key === "ArrowUp" ? increment-- : increment++;
            currentIndex = index + increment;
            if (currentIndex >= navigableElements.length) {
              currentIndex = 0;
            }
            if (currentIndex < 0) {
              currentIndex = navigableElements.length - 1;
            }
            moveTarget = getFocusableElement(navigableElements[currentIndex]);
          }
        }
      });
    }
  }
  if (!noHorizontalArrowHandling) {
    if (["ArrowLeft", "ArrowRight"].includes(key)) {
      event.preventDefault();
      event.stopImmediatePropagation();
      let currentIndex = -1;
      navigableElements.forEach((element, index) => {
        if (isActiveElement(element)) {
          const activeRow = navigableElements[index].querySelectorAll(validSiblingTags.join(","));
          if (!activeRow.length || onlyTraverseSiblings) {
            let nextSibling = activeElement;
            while (nextSibling) {
              nextSibling = key === "ArrowLeft" ? nextSibling.previousElementSibling : nextSibling.nextElementSibling;
              if (nextSibling) {
                if (validSiblingTags.includes(nextSibling.tagName)) {
                  moveTarget = nextSibling;
                  break;
                }
              }
            }
          } else {
            activeRow.forEach((focusableElement, index2) => {
              if (event.target === focusableElement) {
                const increment = key === "ArrowLeft" ? -1 : 1;
                currentIndex = index2 + increment;
                if (currentIndex >= activeRow.length) {
                  currentIndex = 0;
                }
                if (currentIndex < 0) {
                  currentIndex = activeRow.length - 1;
                }
                moveTarget = activeRow[currentIndex];
              }
            });
          }
        }
      });
    }
  }
  if (moveTarget) {
    if (updateTabIndex) {
      activeElement.tabIndex = -1;
      moveTarget.tabIndex = 0;
    }
    moveTarget.focus();
  }
};
var setTabIndex = (options) => {
  if (options && options.length > 0) {
    options.forEach((option) => {
      option.tabIndex = -1;
    });
    options[0].tabIndex = 0;
  }
};
var KeyboardHandler = class extends React7.Component {
  constructor() {
    super(...arguments);
    this.keyHandler = (event) => {
      const { isEventFromContainer } = this.props;
      if (isEventFromContainer ? !isEventFromContainer(event) : !this._isEventFromContainer(event)) {
        return;
      }
      const { isActiveElement, getFocusableElement, noVerticalArrowHandling, noHorizontalArrowHandling, noEnterHandling, noSpaceHandling, updateTabIndex, validSiblingTags, additionalKeyHandler, createNavigableElements, onlyTraverseSiblings } = this.props;
      additionalKeyHandler && additionalKeyHandler(event);
      const navigableElements = createNavigableElements();
      if (!navigableElements) {
        console.warn("No navigable elements have been passed to the KeyboardHandler. Keyboard navigation provided by this component will be ignored.");
        return;
      }
      const key = event.key;
      if (!noEnterHandling) {
        if (key === "Enter") {
          event.preventDefault();
          event.stopImmediatePropagation();
          document.activeElement.click();
        }
      }
      if (!noSpaceHandling) {
        if (key === " ") {
          event.preventDefault();
          event.stopImmediatePropagation();
          document.activeElement.click();
        }
      }
      handleArrows(event, navigableElements, isActiveElement, getFocusableElement, validSiblingTags, noVerticalArrowHandling, noHorizontalArrowHandling, updateTabIndex, onlyTraverseSiblings);
    };
    this._isEventFromContainer = (event) => {
      const { containerRef } = this.props;
      return containerRef.current && containerRef.current.contains(event.target);
    };
  }
  componentDidMount() {
    if (canUseDOM) {
      window.addEventListener("keydown", this.keyHandler);
    }
  }
  componentWillUnmount() {
    if (canUseDOM) {
      window.removeEventListener("keydown", this.keyHandler);
    }
  }
  render() {
    return null;
  }
};
KeyboardHandler.displayName = "KeyboardHandler";
KeyboardHandler.defaultProps = {
  containerRef: null,
  createNavigableElements: () => null,
  isActiveElement: (navigableElement) => document.activeElement === navigableElement,
  getFocusableElement: (navigableElement) => navigableElement,
  validSiblingTags: ["BUTTON", "A"],
  onlyTraverseSiblings: true,
  updateTabIndex: true,
  noHorizontalArrowHandling: false,
  noVerticalArrowHandling: false,
  noEnterHandling: false,
  noSpaceHandling: false
};

// node_modules/@patternfly/react-core/dist/esm/helpers/resizeObserver.js
var getResizeObserver = (containerRefElement, handleResize, useRequestAnimationFrame) => {
  let unobserve;
  if (canUseDOM) {
    const { ResizeObserver } = window;
    if (containerRefElement && ResizeObserver) {
      const resizeObserver = new ResizeObserver((entries) => {
        if (useRequestAnimationFrame) {
          window.requestAnimationFrame(() => {
            if (Array.isArray(entries) && entries.length > 0) {
              handleResize();
            }
          });
        } else {
          if (Array.isArray(entries) && entries.length > 0) {
            handleResize();
          }
        }
      });
      resizeObserver.observe(containerRefElement);
      unobserve = () => resizeObserver.unobserve(containerRefElement);
    } else {
      window.addEventListener("resize", handleResize);
      unobserve = () => window.removeEventListener("resize", handleResize);
    }
  }
  return () => {
    if (unobserve) {
      unobserve();
    }
  };
};

// node_modules/@patternfly/react-core/dist/esm/helpers/useInterval.js
var React8 = __toESM(require_react());
function useInterval(callback, delay3) {
  const savedCallback = React8.useRef(() => {
  });
  React8.useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);
  React8.useEffect(() => {
    function tick() {
      savedCallback.current();
    }
    if (delay3 !== null) {
      const id = setInterval(tick, delay3);
      return () => clearInterval(id);
    }
  }, [delay3]);
}

// node_modules/@patternfly/react-core/dist/esm/helpers/datetimeUtils.js
var isValidDate = (date) => Boolean(date && !isNaN(date));

// node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js
var TitleSizes;
(function(TitleSizes2) {
  TitleSizes2["md"] = "md";
  TitleSizes2["lg"] = "lg";
  TitleSizes2["xl"] = "xl";
  TitleSizes2["2xl"] = "2xl";
  TitleSizes2["3xl"] = "3xl";
  TitleSizes2["4xl"] = "4xl";
})(TitleSizes || (TitleSizes = {}));
var headingLevelSizeMap;
(function(headingLevelSizeMap2) {
  headingLevelSizeMap2["h1"] = "2xl";
  headingLevelSizeMap2["h2"] = "xl";
  headingLevelSizeMap2["h3"] = "lg";
  headingLevelSizeMap2["h4"] = "md";
  headingLevelSizeMap2["h5"] = "md";
  headingLevelSizeMap2["h6"] = "md";
})(headingLevelSizeMap || (headingLevelSizeMap = {}));
var Title = (_a) => {
  var { className = "", children = "", headingLevel: HeadingLevel, size = headingLevelSizeMap[HeadingLevel], ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["className", "children", "headingLevel", "size", "ouiaId", "ouiaSafe"]);
  const ouiaProps = useOUIAProps(Title.displayName, ouiaId, ouiaSafe);
  return React9.createElement(HeadingLevel, Object.assign({}, ouiaProps, props, { className: css(title_default.title, size && title_default.modifiers[size], className) }), children);
};
Title.displayName = "Title";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxHeader.js
var AboutModalBoxHeader = (_a) => {
  var { productName, id } = _a, props = __rest(_a, ["productName", "id"]);
  return React10.createElement(
    "div",
    Object.assign({ className: css(about_modal_box_default.aboutModalBoxHeader) }, props),
    React10.createElement(Title, { headingLevel: "h1", size: "4xl", id }, productName)
  );
};
AboutModalBoxHeader.displayName = "AboutModalBoxHeader";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxBrand.js
init_tslib_es6();
var React11 = __toESM(require_react());
var AboutModalBoxBrand = (_a) => {
  var { src, alt } = _a, props = __rest(_a, ["src", "alt"]);
  return React11.createElement(
    "div",
    Object.assign({ className: css(about_modal_box_default.aboutModalBoxBrand) }, props),
    React11.createElement("img", { className: css(about_modal_box_default.aboutModalBoxBrandImage), src, alt })
  );
};
AboutModalBoxBrand.displayName = "AboutModalBoxBrand";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxCloseButton.js
init_tslib_es6();
var React16 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js
init_tslib_es6();
var React14 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Button/button.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Button/button.css";
var button_default = {
  "badge": "pf-v5-c-badge",
  "button": "pf-v5-c-button",
  "buttonCount": "pf-v5-c-button__count",
  "buttonIcon": "pf-v5-c-button__icon",
  "buttonProgress": "pf-v5-c-button__progress",
  "modifiers": {
    "active": "pf-m-active",
    "block": "pf-m-block",
    "small": "pf-m-small",
    "primary": "pf-m-primary",
    "displayLg": "pf-m-display-lg",
    "secondary": "pf-m-secondary",
    "tertiary": "pf-m-tertiary",
    "link": "pf-m-link",
    "unread": "pf-m-unread",
    "inline": "pf-m-inline",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "control": "pf-m-control",
    "expanded": "pf-m-expanded",
    "plain": "pf-m-plain",
    "noPadding": "pf-m-no-padding",
    "disabled": "pf-m-disabled",
    "ariaDisabled": "pf-m-aria-disabled",
    "progress": "pf-m-progress",
    "inProgress": "pf-m-in-progress",
    "start": "pf-m-start",
    "end": "pf-m-end"
  },
  "spinner": "pf-v5-c-spinner",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js
init_tslib_es6();
var React12 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Spinner/spinner.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Spinner/spinner.css";
var spinner_default = {
  "modifiers": {
    "inline": "pf-m-inline",
    "sm": "pf-m-sm",
    "md": "pf-m-md",
    "lg": "pf-m-lg",
    "xl": "pf-m-xl"
  },
  "spinner": "pf-v5-c-spinner",
  "spinnerPath": "pf-v5-c-spinner__path"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_spinner_diameter.js
var c_spinner_diameter = {
  "name": "--pf-v5-c-spinner--diameter",
  "value": "0.875rem",
  "var": "var(--pf-v5-c-spinner--diameter)"
};
var c_spinner_diameter_default = c_spinner_diameter;

// node_modules/@patternfly/react-core/dist/esm/components/Spinner/Spinner.js
var spinnerSize;
(function(spinnerSize2) {
  spinnerSize2["sm"] = "sm";
  spinnerSize2["md"] = "md";
  spinnerSize2["lg"] = "lg";
  spinnerSize2["xl"] = "xl";
})(spinnerSize || (spinnerSize = {}));
var Spinner = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    size = "xl",
    "aria-valuetext": ariaValueText = "Loading...",
    diameter,
    isInline = false,
    "aria-label": ariaLabel,
    "aria-labelledBy": ariaLabelledBy
  } = _a, props = __rest(_a, ["className", "size", "aria-valuetext", "diameter", "isInline", "aria-label", "aria-labelledBy"]);
  return React12.createElement(
    "svg",
    Object.assign({ className: css(spinner_default.spinner, isInline ? spinner_default.modifiers.inline : spinner_default.modifiers[size], className), role: "progressbar", "aria-valuetext": ariaValueText, viewBox: "0 0 100 100" }, diameter && { style: { [c_spinner_diameter_default.name]: diameter } }, ariaLabel && { "aria-label": ariaLabel }, ariaLabelledBy && { "aria-labelledBy": ariaLabelledBy }, !ariaLabel && !ariaLabelledBy && { "aria-label": "Contents" }, props),
    React12.createElement("circle", { className: spinner_default.spinnerPath, cx: "50", cy: "50", r: "45", fill: "none" })
  );
};
Spinner.displayName = "Spinner";

// node_modules/@patternfly/react-core/dist/esm/components/Badge/Badge.js
init_tslib_es6();
var React13 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Badge/badge.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Badge/badge.css";
var badge_default = {
  "badge": "pf-v5-c-badge",
  "modifiers": {
    "read": "pf-m-read",
    "unread": "pf-m-unread"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Badge/Badge.js
var Badge = (_a) => {
  var { isRead = false, className = "", children = "", screenReaderText } = _a, props = __rest(_a, ["isRead", "className", "children", "screenReaderText"]);
  return React13.createElement(
    "span",
    Object.assign({}, props, { className: css(badge_default.badge, isRead ? badge_default.modifiers.read : badge_default.modifiers.unread, className) }),
    children,
    screenReaderText && React13.createElement("span", { className: "pf-v5-screen-reader" }, screenReaderText)
  );
};
Badge.displayName = "Badge";

// node_modules/@patternfly/react-core/dist/esm/components/Button/Button.js
var ButtonVariant;
(function(ButtonVariant2) {
  ButtonVariant2["primary"] = "primary";
  ButtonVariant2["secondary"] = "secondary";
  ButtonVariant2["tertiary"] = "tertiary";
  ButtonVariant2["danger"] = "danger";
  ButtonVariant2["warning"] = "warning";
  ButtonVariant2["link"] = "link";
  ButtonVariant2["plain"] = "plain";
  ButtonVariant2["control"] = "control";
})(ButtonVariant || (ButtonVariant = {}));
var ButtonType;
(function(ButtonType2) {
  ButtonType2["button"] = "button";
  ButtonType2["submit"] = "submit";
  ButtonType2["reset"] = "reset";
})(ButtonType || (ButtonType = {}));
var ButtonSize;
(function(ButtonSize2) {
  ButtonSize2["default"] = "default";
  ButtonSize2["sm"] = "sm";
  ButtonSize2["lg"] = "lg";
})(ButtonSize || (ButtonSize = {}));
var ButtonBase = (_a) => {
  var { children = null, className = "", component = "button", isActive = false, isBlock = false, isDisabled = false, isAriaDisabled = false, isLoading = null, isDanger = false, spinnerAriaValueText, spinnerAriaLabelledBy, spinnerAriaLabel, size = ButtonSize.default, inoperableEvents = ["onClick", "onKeyPress"], isInline = false, type = ButtonType.button, variant = ButtonVariant.primary, iconPosition = "start", "aria-label": ariaLabel = null, icon = null, ouiaId, ouiaSafe = true, tabIndex = null, innerRef, countOptions } = _a, props = __rest(_a, ["children", "className", "component", "isActive", "isBlock", "isDisabled", "isAriaDisabled", "isLoading", "isDanger", "spinnerAriaValueText", "spinnerAriaLabelledBy", "spinnerAriaLabel", "size", "inoperableEvents", "isInline", "type", "variant", "iconPosition", "aria-label", "icon", "ouiaId", "ouiaSafe", "tabIndex", "innerRef", "countOptions"]);
  const ouiaProps = useOUIAProps(Button.displayName, ouiaId, ouiaSafe, variant);
  const Component44 = component;
  const isButtonElement = Component44 === "button";
  const isInlineSpan = isInline && Component44 === "span";
  const preventedEvents2 = inoperableEvents.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), { [eventToPrevent]: (event) => {
    event.preventDefault();
  } }), {});
  const getDefaultTabIdx = () => {
    if (isDisabled) {
      return isButtonElement ? null : -1;
    } else if (isAriaDisabled) {
      return null;
    } else if (isInlineSpan) {
      return 0;
    }
  };
  return React14.createElement(
    Component44,
    Object.assign({}, props, isAriaDisabled ? preventedEvents2 : null, { "aria-disabled": isDisabled || isAriaDisabled, "aria-label": ariaLabel, className: css(button_default.button, button_default.modifiers[variant], isBlock && button_default.modifiers.block, isDisabled && button_default.modifiers.disabled, isAriaDisabled && button_default.modifiers.ariaDisabled, isActive && button_default.modifiers.active, isInline && variant === ButtonVariant.link && button_default.modifiers.inline, isDanger && (variant === ButtonVariant.secondary || variant === ButtonVariant.link) && button_default.modifiers.danger, isLoading !== null && variant !== ButtonVariant.plain && button_default.modifiers.progress, isLoading && button_default.modifiers.inProgress, size === ButtonSize.sm && button_default.modifiers.small, size === ButtonSize.lg && button_default.modifiers.displayLg, className), disabled: isButtonElement ? isDisabled : null, tabIndex: tabIndex !== null ? tabIndex : getDefaultTabIdx(), type: isButtonElement || isInlineSpan ? type : null, role: isInlineSpan ? "button" : null, ref: innerRef }, ouiaProps),
    isLoading && React14.createElement(
      "span",
      { className: css(button_default.buttonProgress) },
      React14.createElement(Spinner, { size: spinnerSize.md, isInline, "aria-valuetext": spinnerAriaValueText, "aria-label": spinnerAriaLabel, "aria-labelledby": spinnerAriaLabelledBy })
    ),
    variant === ButtonVariant.plain && children === null && icon ? icon : null,
    variant !== ButtonVariant.plain && icon && (iconPosition === "start" || iconPosition === "left") && React14.createElement("span", { className: css(button_default.buttonIcon, button_default.modifiers.start) }, icon),
    children,
    variant !== ButtonVariant.plain && icon && (iconPosition === "end" || iconPosition === "right") && React14.createElement("span", { className: css(button_default.buttonIcon, button_default.modifiers.end) }, icon),
    countOptions && React14.createElement(
      "span",
      { className: css(button_default.buttonCount, countOptions.className) },
      React14.createElement(Badge, { isRead: countOptions.isRead }, countOptions.count)
    )
  );
};
var Button = React14.forwardRef((props, ref) => React14.createElement(ButtonBase, Object.assign({ innerRef: ref }, props)));
Button.displayName = "Button";

// node_modules/@patternfly/react-icons/dist/esm/createIcon.js
init_tslib_es6();
var React15 = __toESM(require_react());
var currentId2 = 0;
function createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {
  var _a;
  return _a = class SVGIcon extends React15.Component {
    constructor() {
      super(...arguments);
      this.id = `icon-title-${currentId2++}`;
    }
    render() {
      const _a2 = this.props, { title, className } = _a2, props = __rest(_a2, ["title", "className"]);
      const classes = className ? `pf-v5-svg ${className}` : "pf-v5-svg";
      const hasTitle = Boolean(title);
      const viewBox = [xOffset, yOffset, width, height].join(" ");
      return React15.createElement(
        "svg",
        Object.assign({ className: classes, viewBox, fill: "currentColor", "aria-labelledby": hasTitle ? this.id : null, "aria-hidden": hasTitle ? null : true, role: "img", width: "1em", height: "1em" }, props),
        hasTitle && React15.createElement("title", { id: this.id }, title),
        React15.createElement("path", { d: svgPath })
      );
    }
  }, _a.displayName = name, _a;
}

// node_modules/@patternfly/react-icons/dist/esm/icons/times-icon.js
var TimesIconConfig = {
  name: "TimesIcon",
  height: 512,
  width: 352,
  svgPath: "M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z",
  yOffset: 0,
  xOffset: 0
};
var TimesIcon = createIcon(TimesIconConfig);
var times_icon_default = TimesIcon;

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxCloseButton.js
var AboutModalBoxCloseButton = (_a) => {
  var { onClose = (_e) => void 0, "aria-label": ariaLabel = "Close Dialog" } = _a, props = __rest(_a, ["onClose", "aria-label"]);
  return React16.createElement(
    "div",
    Object.assign({ className: css(about_modal_box_default.aboutModalBoxClose) }, props),
    React16.createElement(
      Button,
      { variant: "plain", onClick: onClose, "aria-label": ariaLabel },
      React16.createElement(times_icon_default, null)
    )
  );
};
AboutModalBoxCloseButton.displayName = "AboutModalBoxCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBox.js
init_tslib_es6();
var React17 = __toESM(require_react());
var AboutModalBox = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React17.createElement("div", Object.assign({ className: css(about_modal_box_default.aboutModalBox, className) }, props), children);
};
AboutModalBox.displayName = "AboutModalBox";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/Modal.js
init_tslib_es6();
var React30 = __toESM(require_react());
var ReactDOM3 = __toESM(require_react_dom());

// node_modules/@patternfly/react-styles/css/components/Backdrop/backdrop.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Backdrop/backdrop.css";
var backdrop_default = {
  "backdrop": "pf-v5-c-backdrop",
  "backdropOpen": "pf-v5-c-backdrop__open"
};

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalContent.js
init_tslib_es6();
var React29 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ModalBox/modal-box.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/ModalBox/modal-box.css";
var modal_box_default = {
  "button": "pf-v5-c-button",
  "modalBox": "pf-v5-c-modal-box",
  "modalBoxBody": "pf-v5-c-modal-box__body",
  "modalBoxClose": "pf-v5-c-modal-box__close",
  "modalBoxDescription": "pf-v5-c-modal-box__description",
  "modalBoxFooter": "pf-v5-c-modal-box__footer",
  "modalBoxHeader": "pf-v5-c-modal-box__header",
  "modalBoxHeaderMain": "pf-v5-c-modal-box__header-main",
  "modalBoxTitle": "pf-v5-c-modal-box__title",
  "modalBoxTitleIcon": "pf-v5-c-modal-box__title-icon",
  "modalBoxTitleText": "pf-v5-c-modal-box__title-text",
  "modifiers": {
    "sm": "pf-m-sm",
    "md": "pf-m-md",
    "lg": "pf-m-lg",
    "alignTop": "pf-m-align-top",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "success": "pf-m-success",
    "custom": "pf-m-custom",
    "info": "pf-m-info",
    "help": "pf-m-help",
    "icon": "pf-m-icon"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-styles/css/layouts/Bullseye/bullseye.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/layouts/Bullseye/bullseye.css";
var bullseye_default = {
  "bullseye": "pf-v5-l-bullseye"
};

// node_modules/@patternfly/react-core/dist/esm/components/Backdrop/Backdrop.js
init_tslib_es6();
var React18 = __toESM(require_react());
var Backdrop = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React18.createElement("div", Object.assign({}, props, { className: css(backdrop_default.backdrop, className) }), children);
};
Backdrop.displayName = "Backdrop";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxBody.js
init_tslib_es6();
var React19 = __toESM(require_react());
var ModalBoxBody = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React19.createElement("div", Object.assign({}, props, { className: css(modal_box_default.modalBoxBody, className) }), children);
};
ModalBoxBody.displayName = "ModalBoxBody";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxCloseButton.js
init_tslib_es6();
var React20 = __toESM(require_react());
var ModalBoxCloseButton = (_a) => {
  var { className, onClose = () => void 0, "aria-label": ariaLabel = "Close", ouiaId } = _a, props = __rest(_a, ["className", "onClose", "aria-label", "ouiaId"]);
  return React20.createElement(
    "div",
    { className: css(modal_box_default.modalBoxClose, className) },
    React20.createElement(
      Button,
      Object.assign({ variant: "plain", onClick: (event) => onClose(event), "aria-label": ariaLabel }, ouiaId && { ouiaId: `${ouiaId}-${ModalBoxCloseButton.displayName}` }, props),
      React20.createElement(times_icon_default, null)
    )
  );
};
ModalBoxCloseButton.displayName = "ModalBoxCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBox.js
init_tslib_es6();
var React21 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_modal_box_m_align_top_spacer.js
var c_modal_box_m_align_top_spacer = {
  "name": "--pf-v5-c-modal-box--m-align-top--spacer",
  "value": "0.5rem",
  "var": "var(--pf-v5-c-modal-box--m-align-top--spacer)"
};
var c_modal_box_m_align_top_spacer_default = c_modal_box_m_align_top_spacer;

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBox.js
var ModalBox = (_a) => {
  var { children, className = "", variant = "default", position, positionOffset, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel = "", "aria-describedby": ariaDescribedby, style } = _a, props = __rest(_a, ["children", "className", "variant", "position", "positionOffset", "aria-labelledby", "aria-label", "aria-describedby", "style"]);
  if (positionOffset) {
    style = style || {};
    style[c_modal_box_m_align_top_spacer_default.name] = positionOffset;
  }
  return React21.createElement("div", Object.assign({}, props, { role: "dialog", "aria-label": ariaLabel || null, "aria-labelledby": ariaLabelledby || null, "aria-describedby": ariaDescribedby, "aria-modal": "true", className: css(modal_box_default.modalBox, className, position === "top" && modal_box_default.modifiers.alignTop, variant === "large" && modal_box_default.modifiers.lg, variant === "small" && modal_box_default.modifiers.sm, variant === "medium" && modal_box_default.modifiers.md), style }), children);
};
ModalBox.displayName = "ModalBox";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxFooter.js
init_tslib_es6();
var React22 = __toESM(require_react());
var ModalBoxFooter = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React22.createElement("footer", Object.assign({}, props, { className: css(modal_box_default.modalBoxFooter, className) }), children);
};
ModalBoxFooter.displayName = "ModalBoxFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxDescription.js
init_tslib_es6();
var React23 = __toESM(require_react());
var ModalBoxDescription = (_a) => {
  var { children = null, className = "", id = "" } = _a, props = __rest(_a, ["children", "className", "id"]);
  return React23.createElement("div", Object.assign({}, props, { id, className: css(modal_box_default.modalBoxDescription, className) }), children);
};
ModalBoxDescription.displayName = "ModalBoxDescription";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxHeader.js
init_tslib_es6();
var React24 = __toESM(require_react());
var ModalBoxHeader = (_a) => {
  var { children = null, className = "", help = null } = _a, props = __rest(_a, ["children", "className", "help"]);
  return React24.createElement(
    "header",
    Object.assign({ className: css(modal_box_default.modalBoxHeader, help && modal_box_default.modifiers.help, className) }, props),
    help && React24.createElement(
      React24.Fragment,
      null,
      React24.createElement("div", { className: css(modal_box_default.modalBoxHeaderMain) }, children),
      React24.createElement("div", { className: `${modal_box_default.modalBoxHeader}-help` }, help)
    ),
    !help && children
  );
};
ModalBoxHeader.displayName = "ModalBoxHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxTitle.js
init_tslib_es6();
var React28 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js
init_tslib_es6();
var React27 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.css";
var tooltip_default = {
  "modifiers": {
    "top": "pf-m-top",
    "topLeft": "pf-m-top-left",
    "topRight": "pf-m-top-right",
    "bottom": "pf-m-bottom",
    "bottomLeft": "pf-m-bottom-left",
    "bottomRight": "pf-m-bottom-right",
    "left": "pf-m-left",
    "leftTop": "pf-m-left-top",
    "leftBottom": "pf-m-left-bottom",
    "right": "pf-m-right",
    "rightTop": "pf-m-right-top",
    "rightBottom": "pf-m-right-bottom",
    "textAlignLeft": "pf-m-text-align-left"
  },
  "themeDark": "pf-v5-theme-dark",
  "tooltip": "pf-v5-c-tooltip",
  "tooltipArrow": "pf-v5-c-tooltip__arrow",
  "tooltipContent": "pf-v5-c-tooltip__content"
};

// node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipContent.js
init_tslib_es6();
var React25 = __toESM(require_react());
var TooltipContent = (_a) => {
  var { className, children, isLeftAligned } = _a, props = __rest(_a, ["className", "children", "isLeftAligned"]);
  return React25.createElement("div", Object.assign({ className: css(tooltip_default.tooltipContent, isLeftAligned && tooltip_default.modifiers.textAlignLeft, className) }, props), children);
};
TooltipContent.displayName = "TooltipContent";

// node_modules/@patternfly/react-core/dist/esm/components/Tooltip/TooltipArrow.js
init_tslib_es6();
var React26 = __toESM(require_react());
var TooltipArrow = (_a) => {
  var { className } = _a, props = __rest(_a, ["className"]);
  return React26.createElement("div", Object.assign({ className: css(tooltip_default.tooltipArrow, className) }, props));
};
TooltipArrow.displayName = "TooltipArrow";

// node_modules/@patternfly/react-tokens/dist/esm/c_tooltip_MaxWidth.js
var c_tooltip_MaxWidth = {
  "name": "--pf-v5-c-tooltip--MaxWidth",
  "value": "18.75rem",
  "var": "var(--pf-v5-c-tooltip--MaxWidth)"
};
var c_tooltip_MaxWidth_default = c_tooltip_MaxWidth;

// node_modules/@patternfly/react-core/dist/esm/components/Tooltip/Tooltip.js
var TooltipPosition;
(function(TooltipPosition2) {
  TooltipPosition2["auto"] = "auto";
  TooltipPosition2["top"] = "top";
  TooltipPosition2["bottom"] = "bottom";
  TooltipPosition2["left"] = "left";
  TooltipPosition2["right"] = "right";
  TooltipPosition2["topStart"] = "top-start";
  TooltipPosition2["topEnd"] = "top-end";
  TooltipPosition2["bottomStart"] = "bottom-start";
  TooltipPosition2["bottomEnd"] = "bottom-end";
  TooltipPosition2["leftStart"] = "left-start";
  TooltipPosition2["leftEnd"] = "left-end";
  TooltipPosition2["rightStart"] = "right-start";
  TooltipPosition2["rightEnd"] = "right-end";
})(TooltipPosition || (TooltipPosition = {}));
var pfTooltipIdCounter = 1;
var Tooltip = (_a) => {
  var {
    content: bodyContent,
    position = "top",
    trigger = "mouseenter focus",
    isVisible = false,
    isContentLeftAligned = false,
    enableFlip = true,
    className = "",
    entryDelay = 300,
    exitDelay = 300,
    appendTo = () => document.body,
    zIndex = 9999,
    minWidth,
    maxWidth = c_tooltip_MaxWidth_default.value,
    distance = 15,
    aria = "describedby",
    // For every initial starting position, there are 3 escape positions
    flipBehavior = ["top", "right", "bottom", "left", "top", "right", "bottom"],
    id = `pf-tooltip-${pfTooltipIdCounter++}`,
    children,
    animationDuration = 300,
    triggerRef,
    "aria-live": ariaLive = triggerRef ? "polite" : "off",
    onTooltipHidden = () => {
    }
  } = _a, rest = __rest(_a, ["content", "position", "trigger", "isVisible", "isContentLeftAligned", "enableFlip", "className", "entryDelay", "exitDelay", "appendTo", "zIndex", "minWidth", "maxWidth", "distance", "aria", "flipBehavior", "id", "children", "animationDuration", "triggerRef", "aria-live", "onTooltipHidden"]);
  const hideOnClick = true;
  const triggerOnMouseenter = trigger.includes("mouseenter");
  const triggerOnFocus = trigger.includes("focus");
  const triggerOnClick = trigger.includes("click");
  const triggerManually = trigger === "manual";
  const [visible, setVisible] = React27.useState(false);
  const popperRef = React27.createRef();
  const onDocumentKeyDown = (event) => {
    if (!triggerManually) {
      if (event.key === KeyTypes.Escape && visible) {
        hide2();
      }
    }
  };
  const onTriggerEnter = (event) => {
    if (event.key === KeyTypes.Enter) {
      if (!visible) {
        show();
      } else {
        hide2();
      }
    }
  };
  React27.useEffect(() => {
    if (isVisible) {
      show();
    } else {
      hide2();
    }
  }, [isVisible]);
  const show = () => {
    setVisible(true);
  };
  const hide2 = () => {
    setVisible(false);
  };
  const positionModifiers = {
    top: tooltip_default.modifiers.top,
    bottom: tooltip_default.modifiers.bottom,
    left: tooltip_default.modifiers.left,
    right: tooltip_default.modifiers.right,
    "top-start": tooltip_default.modifiers.topLeft,
    "top-end": tooltip_default.modifiers.topRight,
    "bottom-start": tooltip_default.modifiers.bottomLeft,
    "bottom-end": tooltip_default.modifiers.bottomRight,
    "left-start": tooltip_default.modifiers.leftTop,
    "left-end": tooltip_default.modifiers.leftBottom,
    "right-start": tooltip_default.modifiers.rightTop,
    "right-end": tooltip_default.modifiers.rightBottom
  };
  const hasCustomMaxWidth = maxWidth !== c_tooltip_MaxWidth_default.value;
  const content = React27.createElement(
    "div",
    Object.assign({ "aria-live": ariaLive, className: css(tooltip_default.tooltip, className), role: "tooltip", id, style: {
      maxWidth: hasCustomMaxWidth ? maxWidth : null
    }, ref: popperRef }, rest),
    React27.createElement(TooltipArrow, null),
    React27.createElement(TooltipContent, { isLeftAligned: isContentLeftAligned }, bodyContent)
  );
  const onDocumentClick = (event, triggerElement) => {
    if (hideOnClick === true) {
      if (visible) {
        hide2();
      } else if (event.target === triggerElement) {
        show();
      }
    } else if (hideOnClick === "toggle" && event.target === triggerElement) {
      if (visible) {
        hide2();
      } else {
        show();
      }
    } else if (hideOnClick === false && !visible && event.target === triggerElement) {
      show();
    }
  };
  const addAriaToTrigger = () => {
    if (aria === "describedby" && children && children.props && !children.props["aria-describedby"]) {
      return React27.cloneElement(children, { "aria-describedby": id });
    } else if (aria === "labelledby" && children.props && !children.props["aria-labelledby"]) {
      return React27.cloneElement(children, { "aria-labelledby": id });
    }
    return children;
  };
  return React27.createElement(Popper, { trigger: aria !== "none" && visible ? addAriaToTrigger() : children, triggerRef, popper: content, popperRef, minWidth: minWidth !== void 0 ? minWidth : "revert", appendTo, isVisible: visible, positionModifiers, distance, placement: position, onMouseEnter: triggerOnMouseenter && show, onMouseLeave: triggerOnMouseenter && hide2, onPopperMouseEnter: triggerOnMouseenter && show, onPopperMouseLeave: triggerOnMouseenter && hide2, onFocus: triggerOnFocus && show, onBlur: triggerOnFocus && hide2, onDocumentClick: triggerOnClick && onDocumentClick, onDocumentKeyDown: triggerManually ? null : onDocumentKeyDown, onTriggerEnter: triggerManually ? null : onTriggerEnter, enableFlip, zIndex, flipBehavior, animationDuration, entryDelay, exitDelay, onHidden: onTooltipHidden });
};
Tooltip.displayName = "Tooltip";

// node_modules/@patternfly/react-icons/dist/esm/icons/check-circle-icon.js
var CheckCircleIconConfig = {
  name: "CheckCircleIcon",
  height: 512,
  width: 512,
  svgPath: "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z",
  yOffset: 0,
  xOffset: 0
};
var CheckCircleIcon = createIcon(CheckCircleIconConfig);
var check_circle_icon_default = CheckCircleIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon.js
var ExclamationCircleIconConfig = {
  name: "ExclamationCircleIcon",
  height: 512,
  width: 512,
  svgPath: "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z",
  yOffset: 0,
  xOffset: 0
};
var ExclamationCircleIcon = createIcon(ExclamationCircleIconConfig);
var exclamation_circle_icon_default = ExclamationCircleIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon.js
var ExclamationTriangleIconConfig = {
  name: "ExclamationTriangleIcon",
  height: 512,
  width: 576,
  svgPath: "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z",
  yOffset: 0,
  xOffset: 0
};
var ExclamationTriangleIcon = createIcon(ExclamationTriangleIconConfig);
var exclamation_triangle_icon_default = ExclamationTriangleIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/info-circle-icon.js
var InfoCircleIconConfig = {
  name: "InfoCircleIcon",
  height: 512,
  width: 512,
  svgPath: "M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z",
  yOffset: 0,
  xOffset: 0
};
var InfoCircleIcon = createIcon(InfoCircleIconConfig);
var info_circle_icon_default = InfoCircleIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/bell-icon.js
var BellIconConfig = {
  name: "BellIcon",
  height: 1024,
  width: 896,
  svgPath: "M448,0 C465.333333,0 480.333333,6.33333333 493,19 C505.666667,31.6666667 512,46.6666667 512,64 L512,106 L514.23,106.45 C587.89,121.39 648.48,157.24 696,214 C744,271.333333 768,338.666667 768,416 C768,500 780,568.666667 804,622 C818.666667,652.666667 841.333333,684 872,716 C873.773676,718.829136 875.780658,721.505113 878,724 C890,737.333333 896,752.333333 896,769 C896,785.666667 890,800.333333 878,813 C866,825.666667 850.666667,832 832,832 L63.3,832 C44.9533333,831.84 29.8533333,825.506667 18,813 C6,800.333333 0,785.666667 0,769 C0,752.333333 6,737.333333 18,724 L24,716 L25.06,714.9 C55.1933333,683.28 77.5066667,652.313333 92,622 C116,568.666667 128,500 128,416 C128,338.666667 152,271.333333 200,214 C248,156.666667 309.333333,120.666667 384,106 L384,63.31 C384.166667,46.27 390.5,31.5 403,19 C415.666667,6.33333333 430.666667,0 448,0 Z M576,896 L576,897.08 C575.74,932.6 563.073333,962.573333 538,987 C512.666667,1011.66667 482.666667,1024 448,1024 C413.333333,1024 383.333333,1011.66667 358,987 C332.666667,962.333333 320,932 320,896 L576,896 Z",
  yOffset: 0,
  xOffset: 0
};
var BellIcon = createIcon(BellIconConfig);
var bell_icon_default = BellIcon;

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxTitle.js
var isVariantIcon = (icon) => ["success", "danger", "warning", "info", "custom"].includes(icon);
var ModalBoxTitle = (_a) => {
  var { className = "", id, title, titleIconVariant, titleLabel = "" } = _a, props = __rest(_a, ["className", "id", "title", "titleIconVariant", "titleLabel"]);
  const [hasTooltip, setHasTooltip] = React28.useState(false);
  const h1 = React28.useRef(null);
  const label = titleLabel || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleLabel);
  const variantIcons4 = {
    success: React28.createElement(check_circle_icon_default, null),
    danger: React28.createElement(exclamation_circle_icon_default, null),
    warning: React28.createElement(exclamation_triangle_icon_default, null),
    info: React28.createElement(info_circle_icon_default, null),
    custom: React28.createElement(bell_icon_default, null)
  };
  const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;
  useIsomorphicLayoutEffect(() => {
    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);
  }, []);
  const content = React28.createElement(
    "h1",
    Object.assign({ id, ref: h1, className: css(modal_box_default.modalBoxTitle, titleIconVariant && modal_box_default.modifiers.icon, className) }, props),
    titleIconVariant && React28.createElement("span", { className: css(modal_box_default.modalBoxTitleIcon) }, isVariantIcon(titleIconVariant) ? variantIcons4[titleIconVariant] : React28.createElement(CustomIcon, null)),
    label && React28.createElement("span", { className: "pf-v5-screen-reader" }, label),
    React28.createElement("span", { className: css(modal_box_default.modalBoxTitleText) }, title)
  );
  return hasTooltip ? React28.createElement(Tooltip, { content: title }, content) : content;
};
ModalBoxTitle.displayName = "ModalBoxTitle";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalContent.js
var ModalContent = (_a) => {
  var { children, className = "", isOpen = false, header = null, help = null, description = null, title = "", titleIconVariant = null, titleLabel = "", "aria-label": ariaLabel = "", "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, bodyAriaLabel, bodyAriaRole, showClose = true, footer = null, actions = [], onClose = () => void 0, variant = "default", position, positionOffset, width, maxWidth, boxId, labelId, descriptorId, disableFocusTrap = false, hasNoBodyWrapper = false, ouiaId, ouiaSafe = true, elementToFocus } = _a, props = __rest(_a, ["children", "className", "isOpen", "header", "help", "description", "title", "titleIconVariant", "titleLabel", "aria-label", "aria-describedby", "aria-labelledby", "bodyAriaLabel", "bodyAriaRole", "showClose", "footer", "actions", "onClose", "variant", "position", "positionOffset", "width", "maxWidth", "boxId", "labelId", "descriptorId", "disableFocusTrap", "hasNoBodyWrapper", "ouiaId", "ouiaSafe", "elementToFocus"]);
  if (!isOpen) {
    return null;
  }
  const modalBoxHeader = header ? React29.createElement(ModalBoxHeader, { help }, header) : title && React29.createElement(
    ModalBoxHeader,
    { help },
    React29.createElement(ModalBoxTitle, { title, titleIconVariant, titleLabel, id: labelId }),
    description && React29.createElement(ModalBoxDescription, { id: descriptorId }, description)
  );
  const modalBoxFooter = footer ? React29.createElement(ModalBoxFooter, null, footer) : actions.length > 0 && React29.createElement(ModalBoxFooter, null, actions);
  const defaultModalBodyAriaRole = bodyAriaLabel ? "region" : void 0;
  const hasNoDescription = !description && !ariaDescribedby;
  const id = hasNoDescription ? descriptorId : void 0;
  const modalBody = hasNoBodyWrapper ? children : React29.createElement(ModalBoxBody, Object.assign({ "aria-label": bodyAriaLabel, role: bodyAriaRole || defaultModalBodyAriaRole }, props, { id }), children);
  const ariaLabelledbyFormatted = () => {
    if (ariaLabelledby === null) {
      return null;
    }
    const idRefList = [];
    if ((ariaLabel && boxId) !== "") {
      idRefList.push(ariaLabel && boxId);
    }
    if (ariaLabelledby) {
      idRefList.push(ariaLabelledby);
    }
    if (title) {
      idRefList.push(labelId);
    }
    return idRefList.join(" ");
  };
  const modalBox = React29.createElement(
    ModalBox,
    Object.assign({ id: boxId, className: css(className, isVariantIcon(titleIconVariant) && modal_box_default.modifiers[titleIconVariant]), variant, position, positionOffset, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledbyFormatted(), "aria-describedby": ariaDescribedby || (hasNoBodyWrapper ? null : descriptorId) }, getOUIAProps(ModalContent.displayName, ouiaId, ouiaSafe), { style: Object.assign(Object.assign({}, width && { "--pf-v5-c-modal-box--Width": typeof width !== "number" ? width : `${width}px` }), maxWidth && {
      "--pf-v5-c-modal-box--MaxWidth": typeof maxWidth !== "number" ? maxWidth : `${maxWidth}px`
    }) }),
    showClose && React29.createElement(ModalBoxCloseButton, { onClose: (event) => onClose(event), ouiaId }),
    modalBoxHeader,
    modalBody,
    modalBoxFooter
  );
  return React29.createElement(
    Backdrop,
    null,
    React29.createElement(FocusTrap, { active: !disableFocusTrap, focusTrapOptions: {
      clickOutsideDeactivates: true,
      tabbableOptions: { displayCheck: "none" },
      // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
      // We want to prevent this in case false is ever passed in.
      initialFocus: elementToFocus || void 0
    }, className: css(bullseye_default.bullseye) }, modalBox)
  );
};
ModalContent.displayName = "ModalContent";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/Modal.js
var ModalVariant;
(function(ModalVariant2) {
  ModalVariant2["small"] = "small";
  ModalVariant2["medium"] = "medium";
  ModalVariant2["large"] = "large";
  ModalVariant2["default"] = "default";
})(ModalVariant || (ModalVariant = {}));
var Modal = class _Modal extends React30.Component {
  constructor(props) {
    super(props);
    this.boxId = "";
    this.labelId = "";
    this.descriptorId = "";
    this.handleEscKeyClick = (event) => {
      var _a, _b;
      const { onEscapePress } = this.props;
      if (event.key === KeyTypes.Escape && this.props.isOpen) {
        onEscapePress ? onEscapePress(event) : (_b = (_a = this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, event);
      }
    };
    this.getElement = (appendTo) => {
      if (typeof appendTo === "function") {
        return appendTo();
      }
      return appendTo || document.body;
    };
    this.toggleSiblingsFromScreenReaders = (hide2) => {
      const { appendTo } = this.props;
      const target = this.getElement(appendTo);
      const bodyChildren = target.children;
      for (const child of Array.from(bodyChildren)) {
        if (child !== this.state.container) {
          hide2 ? child.setAttribute("aria-hidden", "" + hide2) : child.removeAttribute("aria-hidden");
        }
      }
    };
    this.isEmpty = (value) => value === null || value === void 0 || value === "";
    const boxIdNum = _Modal.currentId++;
    const labelIdNum = boxIdNum + 1;
    const descriptorIdNum = boxIdNum + 2;
    this.boxId = props.id || `pf-modal-part-${boxIdNum}`;
    this.labelId = `pf-modal-part-${labelIdNum}`;
    this.descriptorId = `pf-modal-part-${descriptorIdNum}`;
    this.state = {
      container: void 0,
      ouiaStateId: getDefaultOUIAId(_Modal.displayName, props.variant)
    };
  }
  componentDidMount() {
    const { appendTo, title, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, hasNoBodyWrapper, header } = this.props;
    const target = this.getElement(appendTo);
    const container = document.createElement("div");
    this.setState({ container });
    target.appendChild(container);
    target.addEventListener("keydown", this.handleEscKeyClick, false);
    if (this.props.isOpen) {
      target.classList.add(css(backdrop_default.backdropOpen));
    } else {
      target.classList.remove(css(backdrop_default.backdropOpen));
    }
    if (this.isEmpty(title) && this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby)) {
      console.error("Modal: Specify at least one of: title, aria-label, aria-labelledby.");
    }
    if (this.isEmpty(ariaLabel) && this.isEmpty(ariaLabelledby) && (hasNoBodyWrapper || header)) {
      console.error("Modal: When using hasNoBodyWrapper or setting a custom header, ensure you assign an accessible name to the the modal container with aria-label or aria-labelledby.");
    }
  }
  componentDidUpdate() {
    const { appendTo } = this.props;
    const target = this.getElement(appendTo);
    if (this.props.isOpen) {
      target.classList.add(css(backdrop_default.backdropOpen));
      this.toggleSiblingsFromScreenReaders(true);
    } else {
      target.classList.remove(css(backdrop_default.backdropOpen));
      this.toggleSiblingsFromScreenReaders(false);
    }
  }
  componentWillUnmount() {
    const { appendTo } = this.props;
    const target = this.getElement(appendTo);
    if (this.state.container) {
      target.removeChild(this.state.container);
    }
    target.removeEventListener("keydown", this.handleEscKeyClick, false);
    target.classList.remove(css(backdrop_default.backdropOpen));
    this.toggleSiblingsFromScreenReaders(false);
  }
  render() {
    const _a = this.props, {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      appendTo,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onEscapePress,
      "aria-labelledby": ariaLabelledby,
      "aria-label": ariaLabel,
      "aria-describedby": ariaDescribedby,
      bodyAriaLabel,
      bodyAriaRole,
      title,
      titleIconVariant,
      titleLabel,
      ouiaId,
      ouiaSafe,
      position,
      elementToFocus
    } = _a, props = __rest(_a, ["appendTo", "onEscapePress", "aria-labelledby", "aria-label", "aria-describedby", "bodyAriaLabel", "bodyAriaRole", "title", "titleIconVariant", "titleLabel", "ouiaId", "ouiaSafe", "position", "elementToFocus"]);
    const { container } = this.state;
    if (!canUseDOM || !container) {
      return null;
    }
    return ReactDOM3.createPortal(React30.createElement(ModalContent, Object.assign({}, props, { boxId: this.boxId, labelId: this.labelId, descriptorId: this.descriptorId, title, titleIconVariant, titleLabel, "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, bodyAriaLabel, bodyAriaRole, ouiaId: ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe, position, elementToFocus })), container);
  }
};
Modal.displayName = "Modal";
Modal.currentId = 0;
Modal.defaultProps = {
  className: "",
  isOpen: false,
  title: "",
  titleIconVariant: null,
  titleLabel: "",
  "aria-label": "",
  showClose: true,
  "aria-describedby": "",
  "aria-labelledby": "",
  id: void 0,
  actions: [],
  onClose: () => void 0,
  variant: "default",
  hasNoBodyWrapper: false,
  appendTo: () => document.body,
  ouiaSafe: true,
  position: "default"
};

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModal.js
var AboutModal = (_a) => {
  var { children, className, isOpen = false, onClose = (_e) => void 0, productName, trademark, backgroundImageSrc, brandImageSrc, brandImageAlt, hasNoContentContainer = false, appendTo, closeButtonAriaLabel, "aria-label": ariaLabel, disableFocusTrap } = _a, props = __rest(_a, ["children", "className", "isOpen", "onClose", "productName", "trademark", "backgroundImageSrc", "brandImageSrc", "brandImageAlt", "hasNoContentContainer", "appendTo", "closeButtonAriaLabel", "aria-label", "disableFocusTrap"]);
  if (brandImageSrc && !brandImageAlt) {
    console.error("AboutModal:", "brandImageAlt is required when a brandImageSrc is specified, and should not be an empty string.");
  }
  if (!productName && !ariaLabel) {
    console.error("AboutModal:", "Either productName or ariaLabel is required for component to be accessible");
  }
  if (!isOpen) {
    return null;
  }
  return React31.createElement(GenerateId, { prefix: "pf-about-modal-title-" }, (ariaLabelledBy) => React31.createElement(
    Modal,
    Object.assign({ isOpen, variant: ModalVariant.large }, productName && { "aria-labelledby": ariaLabelledBy }, { "aria-label": ariaLabel, onEscapePress: onClose, showClose: false, appendTo, disableFocusTrap, hasNoBodyWrapper: true }),
    React31.createElement(
      AboutModalBox,
      { style: backgroundImageSrc ? { [c_about_modal_box_BackgroundImage_default.name]: `url(${backgroundImageSrc})` } : {}, className: css(className) },
      React31.createElement(AboutModalBoxBrand, { src: brandImageSrc, alt: brandImageAlt }),
      React31.createElement(AboutModalBoxCloseButton, { "aria-label": closeButtonAriaLabel, onClose }),
      productName && React31.createElement(AboutModalBoxHeader, { id: ariaLabelledBy, productName }),
      React31.createElement(AboutModalBoxContent, Object.assign({ trademark, hasNoContentContainer }, props), children)
    )
  ));
};
AboutModal.displayName = "AboutModal";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/Accordion.js
init_tslib_es6();
var React33 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Accordion/accordion.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Accordion/accordion.css";
var accordion_default = {
  "accordion": "pf-v5-c-accordion",
  "accordionExpandableContent": "pf-v5-c-accordion__expandable-content",
  "accordionExpandableContentBody": "pf-v5-c-accordion__expandable-content-body",
  "accordionToggle": "pf-v5-c-accordion__toggle",
  "accordionToggleIcon": "pf-v5-c-accordion__toggle-icon",
  "accordionToggleText": "pf-v5-c-accordion__toggle-text",
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "toggleStart": "pf-m-toggle-start",
    "displayLg": "pf-m-display-lg",
    "bordered": "pf-m-bordered",
    "expanded": "pf-m-expanded",
    "fixed": "pf-m-fixed"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContext.js
var React32 = __toESM(require_react());
var AccordionContext = React32.createContext({});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/Accordion.js
var Accordion = (_a) => {
  var { children = null, className = "", "aria-label": ariaLabel, headingLevel = "h3", asDefinitionList = true, isBordered = false, displaySize = "default", togglePosition = "end" } = _a, props = __rest(_a, ["children", "className", "aria-label", "headingLevel", "asDefinitionList", "isBordered", "displaySize", "togglePosition"]);
  const AccordionList = asDefinitionList ? "dl" : "div";
  return React33.createElement(
    AccordionList,
    Object.assign({ className: css(accordion_default.accordion, isBordered && accordion_default.modifiers.bordered, togglePosition === "start" && accordion_default.modifiers.toggleStart, displaySize === "lg" && accordion_default.modifiers.displayLg, className), "aria-label": ariaLabel }, !asDefinitionList && ariaLabel && { role: "region" }, props),
    React33.createElement(AccordionContext.Provider, { value: {
      ContentContainer: asDefinitionList ? "dd" : "div",
      ToggleContainer: asDefinitionList ? "dt" : headingLevel,
      togglePosition
    } }, children)
  );
};
Accordion.displayName = "Accordion";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContent.js
init_tslib_es6();
var React35 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionExpandableContentBody.js
var React34 = __toESM(require_react());
var AccordionExpandableContentBody = ({ children = null }) => React34.createElement("div", { className: css(accordion_default.accordionExpandableContentBody) }, children);
AccordionExpandableContentBody.displayName = "AccordionExpandableContentBody";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContent.js
var AccordionContent = (_a) => {
  var { className = "", children = null, id = "", isHidden: isHidden3 = false, isFixed = false, isCustomContent = false, "aria-label": ariaLabel = "", "aria-labelledby": ariaLabelledby, component } = _a, props = __rest(_a, ["className", "children", "id", "isHidden", "isFixed", "isCustomContent", "aria-label", "aria-labelledby", "component"]);
  const [hasScrollbar, setHasScrollbar] = React35.useState(false);
  const containerRef = React35.useRef(null);
  React35.useEffect(() => {
    if ((containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) && isFixed && !isHidden3) {
      const { offsetHeight, scrollHeight } = containerRef.current;
      setHasScrollbar(offsetHeight < scrollHeight);
    } else if (!isFixed) {
      setHasScrollbar(false);
    }
  }, [containerRef, isFixed, isHidden3]);
  return React35.createElement(AccordionContext.Consumer, null, ({ ContentContainer }) => {
    const Container = component || ContentContainer;
    return React35.createElement(Container, Object.assign({ ref: containerRef, id, className: css(accordion_default.accordionExpandableContent, isFixed && accordion_default.modifiers.fixed, !isHidden3 && accordion_default.modifiers.expanded, className), hidden: isHidden3 }, ariaLabel && { "aria-label": ariaLabel }, ariaLabelledby && { "aria-labelledby": ariaLabelledby }, hasScrollbar && { tabIndex: 0 }, hasScrollbar && Container === "div" && { role: "region" }, props), isCustomContent ? children : React35.createElement(AccordionExpandableContentBody, null, children));
  });
};
AccordionContent.displayName = "AccordionContent";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionItem.js
var React36 = __toESM(require_react());
var AccordionItem = ({ children = null }) => React36.createElement(React36.Fragment, null, children);
AccordionItem.displayName = "AccordionItem";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionToggle.js
init_tslib_es6();
var React37 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-right-icon.js
var AngleRightIconConfig = {
  name: "AngleRightIcon",
  height: 512,
  width: 256,
  svgPath: "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z",
  yOffset: 0,
  xOffset: 0
};
var AngleRightIcon = createIcon(AngleRightIconConfig);
var angle_right_icon_default = AngleRightIcon;

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionToggle.js
var AccordionToggle = (_a) => {
  var { className = "", id, isExpanded = false, children = null, component } = _a, props = __rest(_a, ["className", "id", "isExpanded", "children", "component"]);
  const renderToggleIcon = () => React37.createElement(
    "span",
    { className: css(accordion_default.accordionToggleIcon) },
    React37.createElement(angle_right_icon_default, null)
  );
  return React37.createElement(AccordionContext.Consumer, null, ({ ToggleContainer, togglePosition }) => {
    const Container = component || ToggleContainer;
    const isToggleStartPositioned = togglePosition === "start";
    return React37.createElement(
      Container,
      null,
      React37.createElement(
        "button",
        Object.assign({ id, className: css(accordion_default.accordionToggle, isExpanded && accordion_default.modifiers.expanded, className), "aria-expanded": isExpanded, type: "button" }, props),
        isToggleStartPositioned && renderToggleIcon(),
        React37.createElement("span", { className: css(accordion_default.accordionToggleText) }, children),
        !isToggleStartPositioned && renderToggleIcon()
      )
    );
  });
};
AccordionToggle.displayName = "AccordionToggle";

// node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionList.js
init_tslib_es6();
var React38 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ActionList/action-list.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/ActionList/action-list.css";
var action_list_default = {
  "actionList": "pf-v5-c-action-list",
  "actionListGroup": "pf-v5-c-action-list__group",
  "modifiers": {
    "icons": "pf-m-icons"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionList.js
var ActionList = (_a) => {
  var { children, isIconList, className = "" } = _a, props = __rest(_a, ["children", "isIconList", "className"]);
  return React38.createElement("div", Object.assign({ className: css(action_list_default.actionList, isIconList && action_list_default.modifiers.icons, className) }, props), children);
};
ActionList.displayName = "ActionList";

// node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionListGroup.js
init_tslib_es6();
var React39 = __toESM(require_react());
var ActionListGroup = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React39.createElement("div", Object.assign({ className: css(action_list_default.actionListGroup, className) }, props), children);
};
ActionListGroup.displayName = "ActionListGroup";

// node_modules/@patternfly/react-core/dist/esm/components/ActionList/ActionListItem.js
init_tslib_es6();
var React40 = __toESM(require_react());
var ActionListItem = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React40.createElement("div", Object.assign({ className: css(`${action_list_default.actionList}__item`, className) }, props), children);
};
ActionListItem.displayName = "ActionListItem";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js
init_tslib_es6();
var React44 = __toESM(require_react());
var import_react4 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Alert/alert.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Alert/alert.css";
var alert_default = {
  "alert": "pf-v5-c-alert",
  "alertAction": "pf-v5-c-alert__action",
  "alertActionGroup": "pf-v5-c-alert__action-group",
  "alertDescription": "pf-v5-c-alert__description",
  "alertIcon": "pf-v5-c-alert__icon",
  "alertTitle": "pf-v5-c-alert__title",
  "alertToggle": "pf-v5-c-alert__toggle",
  "alertToggleIcon": "pf-v5-c-alert__toggle-icon",
  "button": "pf-v5-c-button",
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "custom": "pf-m-custom",
    "success": "pf-m-success",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "info": "pf-m-info",
    "inline": "pf-m-inline",
    "plain": "pf-m-plain",
    "expandable": "pf-m-expandable",
    "expanded": "pf-m-expanded",
    "truncate": "pf-m-truncate"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertIcon.js
init_tslib_es6();
var React41 = __toESM(require_react());
var variantIcons = {
  success: check_circle_icon_default,
  danger: exclamation_circle_icon_default,
  warning: exclamation_triangle_icon_default,
  info: info_circle_icon_default,
  custom: bell_icon_default
};
var AlertIcon = (_a) => {
  var { variant, customIcon, className = "" } = _a, props = __rest(_a, ["variant", "customIcon", "className"]);
  const Icon2 = variantIcons[variant];
  return Icon2 ? React41.createElement("div", Object.assign({}, props, { className: css(alert_default.alertIcon, className) }), customIcon || React41.createElement(Icon2, null)) : null;
};

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertContext.js
var React42 = __toESM(require_react());
var AlertContext = React42.createContext(null);

// node_modules/@patternfly/react-tokens/dist/esm/c_alert__title_max_lines.js
var c_alert__title_max_lines = {
  "name": "--pf-v5-c-alert__title--max-lines",
  "value": "1",
  "var": "var(--pf-v5-c-alert__title--max-lines)"
};
var c_alert_title_max_lines_default = c_alert__title_max_lines;

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertToggleExpandButton.js
init_tslib_es6();
var React43 = __toESM(require_react());
var AlertToggleExpandButton = (_a) => {
  var { "aria-label": ariaLabel = "", variantLabel, onToggleExpand, isExpanded = false } = _a, props = __rest(_a, ["aria-label", "variantLabel", "onToggleExpand", "isExpanded"]);
  const { title, variantLabel: alertVariantLabel } = React43.useContext(AlertContext);
  return React43.createElement(
    Button,
    Object.assign({ variant: ButtonVariant.plain, onClick: onToggleExpand, "aria-expanded": isExpanded, "aria-label": ariaLabel === "" ? `Toggle ${variantLabel || alertVariantLabel} alert: ${title}` : ariaLabel }, props),
    React43.createElement(
      "span",
      { className: css(alert_default.alertToggleIcon) },
      React43.createElement(angle_right_icon_default, { "aria-hidden": "true" })
    )
  );
};
AlertToggleExpandButton.displayName = "AlertToggleExpandButton";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js
var AlertVariant;
(function(AlertVariant2) {
  AlertVariant2["success"] = "success";
  AlertVariant2["danger"] = "danger";
  AlertVariant2["warning"] = "warning";
  AlertVariant2["info"] = "info";
  AlertVariant2["custom"] = "custom";
})(AlertVariant || (AlertVariant = {}));
var Alert = (_a) => {
  var { variant = AlertVariant.custom, isInline = false, isPlain = false, isLiveRegion = false, variantLabel = `${capitalize(variant)} alert:`, actionClose, actionLinks, title, component = "h4", children = "", className = "", ouiaId, ouiaSafe = true, timeout = false, timeoutAnimation = 3e3, onTimeout = () => {
  }, truncateTitle = 0, tooltipPosition, customIcon, isExpandable = false, toggleAriaLabel = `${capitalize(variant)} alert details`, onMouseEnter = () => {
  }, onMouseLeave = () => {
  }, id } = _a, props = __rest(_a, ["variant", "isInline", "isPlain", "isLiveRegion", "variantLabel", "actionClose", "actionLinks", "title", "component", "children", "className", "ouiaId", "ouiaSafe", "timeout", "timeoutAnimation", "onTimeout", "truncateTitle", "tooltipPosition", "customIcon", "isExpandable", "toggleAriaLabel", "onMouseEnter", "onMouseLeave", "id"]);
  const ouiaProps = useOUIAProps(Alert.displayName, ouiaId, ouiaSafe, variant);
  const getHeadingContent = React44.createElement(
    React44.Fragment,
    null,
    React44.createElement("span", { className: "pf-v5-screen-reader" }, variantLabel),
    title
  );
  const titleRef = React44.useRef(null);
  const TitleComponent = component;
  const divRef = React44.useRef();
  const [isTooltipVisible, setIsTooltipVisible] = (0, import_react4.useState)(false);
  React44.useEffect(() => {
    if (!titleRef.current || !truncateTitle) {
      return;
    }
    titleRef.current.style.setProperty(c_alert_title_max_lines_default.name, truncateTitle.toString());
    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
    if (isTooltipVisible !== showTooltip) {
      setIsTooltipVisible(showTooltip);
    }
  }, [titleRef, truncateTitle, isTooltipVisible]);
  const [timedOut, setTimedOut] = (0, import_react4.useState)(false);
  const [timedOutAnimation, setTimedOutAnimation] = (0, import_react4.useState)(true);
  const [isMouseOver, setIsMouseOver] = (0, import_react4.useState)();
  const [containsFocus, setContainsFocus] = (0, import_react4.useState)();
  const dismissed = timedOut && timedOutAnimation && !isMouseOver && !containsFocus;
  React44.useEffect(() => {
    const calculatedTimeout = timeout === true ? 8e3 : Number(timeout);
    if (calculatedTimeout > 0) {
      const timer = setTimeout(() => setTimedOut(true), calculatedTimeout);
      return () => clearTimeout(timer);
    }
  }, [timeout]);
  React44.useEffect(() => {
    const onDocumentFocus = () => {
      if (divRef.current) {
        if (divRef.current.contains(document.activeElement)) {
          setContainsFocus(true);
          setTimedOutAnimation(false);
        } else if (containsFocus) {
          setContainsFocus(false);
        }
      }
    };
    document.addEventListener("focus", onDocumentFocus, true);
    return () => document.removeEventListener("focus", onDocumentFocus, true);
  }, [containsFocus]);
  React44.useEffect(() => {
    if (containsFocus === false || isMouseOver === false) {
      const timer = setTimeout(() => setTimedOutAnimation(true), timeoutAnimation);
      return () => clearTimeout(timer);
    }
  }, [containsFocus, isMouseOver, timeoutAnimation]);
  React44.useEffect(() => {
    dismissed && onTimeout();
  }, [dismissed, onTimeout]);
  const [isExpanded, setIsExpanded] = (0, import_react4.useState)(false);
  const onToggleExpand = () => {
    setIsExpanded(!isExpanded);
  };
  const myOnMouseEnter = (ev) => {
    setIsMouseOver(true);
    setTimedOutAnimation(false);
    onMouseEnter(ev);
  };
  const myOnMouseLeave = (ev) => {
    setIsMouseOver(false);
    onMouseLeave(ev);
  };
  if (dismissed) {
    return null;
  }
  const Title2 = React44.createElement(TitleComponent, Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(alert_default.alertTitle, truncateTitle && alert_default.modifiers.truncate) }), getHeadingContent);
  return React44.createElement(
    "div",
    Object.assign({ ref: divRef, className: css(alert_default.alert, isInline && alert_default.modifiers.inline, isPlain && alert_default.modifiers.plain, isExpandable && alert_default.modifiers.expandable, isExpanded && alert_default.modifiers.expanded, alert_default.modifiers[variant], className) }, ouiaProps, isLiveRegion && {
      "aria-live": "polite",
      "aria-atomic": "false"
    }, { onMouseEnter: myOnMouseEnter, onMouseLeave: myOnMouseLeave, id }, props),
    isExpandable && React44.createElement(
      AlertContext.Provider,
      { value: { title, variantLabel } },
      React44.createElement(
        "div",
        { className: css(alert_default.alertToggle) },
        React44.createElement(AlertToggleExpandButton, { isExpanded, onToggleExpand, "aria-label": toggleAriaLabel })
      )
    ),
    React44.createElement(AlertIcon, { variant, customIcon }),
    isTooltipVisible ? React44.createElement(Tooltip, { content: getHeadingContent, position: tooltipPosition }, Title2) : Title2,
    actionClose && React44.createElement(
      AlertContext.Provider,
      { value: { title, variantLabel } },
      React44.createElement("div", { className: css(alert_default.alertAction) }, actionClose)
    ),
    children && (!isExpandable || isExpandable && isExpanded) && React44.createElement("div", { className: css(alert_default.alertDescription) }, children),
    actionLinks && React44.createElement("div", { className: css(alert_default.alertActionGroup) }, actionLinks)
  );
};
Alert.displayName = "Alert";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertActionCloseButton.js
init_tslib_es6();
var React45 = __toESM(require_react());
var AlertActionCloseButton = (_a) => {
  var { className, onClose = () => void 0, "aria-label": ariaLabel = "", variantLabel } = _a, props = __rest(_a, ["className", "onClose", "aria-label", "variantLabel"]);
  return React45.createElement(AlertContext.Consumer, null, ({ title, variantLabel: alertVariantLabel }) => React45.createElement(
    Button,
    Object.assign({ variant: ButtonVariant.plain, onClick: onClose, "aria-label": ariaLabel === "" ? `Close ${variantLabel || alertVariantLabel} alert: ${title}` : ariaLabel, className }, props),
    React45.createElement(times_icon_default, null)
  ));
};
AlertActionCloseButton.displayName = "AlertActionCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertActionLink.js
init_tslib_es6();
var React46 = __toESM(require_react());
var AlertActionLink = (_a) => {
  var { className = "", children } = _a, props = __rest(_a, ["className", "children"]);
  return React46.createElement(Button, Object.assign({ variant: ButtonVariant.link, isInline: true, className }, props), children);
};
AlertActionLink.displayName = "AlertActionLink";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroup.js
init_tslib_es6();
var React48 = __toESM(require_react());
var ReactDOM4 = __toESM(require_react_dom());

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroupInline.js
init_tslib_es6();
var React47 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Alert/alert-group.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Alert/alert-group.css";
var alert_group_default = {
  "alertGroup": "pf-v5-c-alert-group",
  "alertGroupOverflowButton": "pf-v5-c-alert-group__overflow-button",
  "modifiers": {
    "toast": "pf-m-toast"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroupInline.js
var AlertGroupInline = (_a) => {
  var { className, children, isToast, isLiveRegion, onOverflowClick, overflowMessage } = _a, rest = __rest(_a, ["className", "children", "isToast", "isLiveRegion", "onOverflowClick", "overflowMessage"]);
  return React47.createElement(
    "ul",
    Object.assign({ role: "list", "aria-live": isLiveRegion ? "polite" : null, "aria-atomic": isLiveRegion ? false : null, className: css(alert_group_default.alertGroup, className, isToast ? alert_group_default.modifiers.toast : "") }, rest),
    React47.Children.toArray(children).map((alert, index) => {
      var _a2;
      return React47.createElement("li", { key: ((_a2 = alert.props) === null || _a2 === void 0 ? void 0 : _a2.id) || index }, alert);
    }),
    overflowMessage && React47.createElement(
      "li",
      null,
      React47.createElement("button", { onClick: onOverflowClick, className: css(alert_group_default.alertGroupOverflowButton) }, overflowMessage)
    )
  );
};
AlertGroupInline.displayName = "AlertGroupInline";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroup.js
var AlertGroup = class extends React48.Component {
  constructor() {
    super(...arguments);
    this.state = {
      container: void 0
    };
  }
  componentDidMount() {
    const container = document.createElement("div");
    const target = this.getTargetElement();
    this.setState({ container });
    target.appendChild(container);
  }
  componentWillUnmount() {
    const target = this.getTargetElement();
    if (this.state.container) {
      target.removeChild(this.state.container);
    }
  }
  getTargetElement() {
    const appendTo = this.props.appendTo;
    if (typeof appendTo === "function") {
      return appendTo();
    }
    return appendTo || document.body;
  }
  render() {
    const _a = this.props, {
      className,
      children,
      isToast,
      isLiveRegion,
      onOverflowClick,
      overflowMessage,
      "aria-label": ariaLabel,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      appendTo
    } = _a, props = __rest(_a, ["className", "children", "isToast", "isLiveRegion", "onOverflowClick", "overflowMessage", "aria-label", "appendTo"]);
    const alertGroup = React48.createElement(AlertGroupInline, Object.assign({ onOverflowClick, className, isToast, isLiveRegion, overflowMessage, "aria-label": ariaLabel }, props), children);
    if (!this.props.isToast) {
      return alertGroup;
    }
    const container = this.state.container;
    if (!canUseDOM || !container) {
      return null;
    }
    return ReactDOM4.createPortal(alertGroup, container);
  }
};
AlertGroup.displayName = "AlertGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Avatar/Avatar.js
init_tslib_es6();
var React49 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Avatar/avatar.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Avatar/avatar.css";
var avatar_default = {
  "avatar": "pf-v5-c-avatar",
  "modifiers": {
    "light": "pf-m-light",
    "dark": "pf-m-dark",
    "sm": "pf-m-sm",
    "md": "pf-m-md",
    "lg": "pf-m-lg",
    "xl": "pf-m-xl"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Avatar/Avatar.js
var Avatar = (_a) => {
  var { className = "", src = "", alt, border, size } = _a, props = __rest(_a, ["className", "src", "alt", "border", "size"]);
  return React49.createElement("img", Object.assign({ src, alt, className: css(avatar_default.avatar, avatar_default.modifiers[size], border === "light" && avatar_default.modifiers.light, border === "dark" && avatar_default.modifiers.dark, className) }, props));
};
Avatar.displayName = "Avatar";

// node_modules/@patternfly/react-core/dist/esm/components/BackToTop/BackToTop.js
init_tslib_es6();
var React50 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/BackToTop/back-to-top.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/BackToTop/back-to-top.css";
var back_to_top_default = {
  "backToTop": "pf-v5-c-back-to-top",
  "button": "pf-v5-c-button",
  "modifiers": {
    "hidden": "pf-m-hidden"
  }
};

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-up-icon.js
var AngleUpIconConfig = {
  name: "AngleUpIcon",
  height: 512,
  width: 320,
  svgPath: "M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z",
  yOffset: 0,
  xOffset: 0
};
var AngleUpIcon = createIcon(AngleUpIconConfig);
var angle_up_icon_default = AngleUpIcon;

// node_modules/@patternfly/react-core/dist/esm/components/BackToTop/BackToTop.js
var BackToTopBase = (_a) => {
  var { className, title = "Back to top", innerRef, scrollableSelector, isAlwaysVisible = false } = _a, props = __rest(_a, ["className", "title", "innerRef", "scrollableSelector", "isAlwaysVisible"]);
  const [visible, setVisible] = React50.useState(isAlwaysVisible);
  React50.useEffect(() => {
    setVisible(isAlwaysVisible);
  }, [isAlwaysVisible]);
  const [scrollElement, setScrollElement] = React50.useState(null);
  const toggleVisible = () => {
    if (scrollElement) {
      const scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;
      if (!isAlwaysVisible) {
        if (scrolled > 400) {
          setVisible(true);
        } else {
          setVisible(false);
        }
      }
    }
  };
  React50.useEffect(() => {
    const hasScrollSpy = Boolean(scrollableSelector);
    if (hasScrollSpy) {
      const scrollEl = document.querySelector(scrollableSelector);
      if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {
        return;
      }
      setScrollElement(scrollEl);
      scrollEl.addEventListener("scroll", toggleVisible);
      return () => {
        scrollEl.removeEventListener("scroll", toggleVisible);
      };
    } else {
      if (!canUseDOM) {
        return;
      }
      const scrollEl = window;
      setScrollElement(scrollEl);
      scrollEl.addEventListener("scroll", toggleVisible);
      return () => {
        scrollEl.removeEventListener("scroll", toggleVisible);
      };
    }
  }, [scrollableSelector, toggleVisible]);
  const handleClick = () => {
    scrollElement.scrollTo({ top: 0, behavior: "smooth" });
  };
  return React50.createElement(
    "div",
    Object.assign({ className: css(back_to_top_default.backToTop, !visible && back_to_top_default.modifiers.hidden, className), ref: innerRef, onClick: handleClick }, props),
    React50.createElement(Button, { variant: "primary", icon: React50.createElement(angle_up_icon_default, { "aria-hidden": "true" }), iconPosition: "end" }, title)
  );
};
var BackToTop = React50.forwardRef((props, ref) => React50.createElement(BackToTopBase, Object.assign({ innerRef: ref }, props)));
BackToTop.displayName = "BackToTop";

// node_modules/@patternfly/react-core/dist/esm/components/BackgroundImage/BackgroundImage.js
init_tslib_es6();
var import_react5 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/BackgroundImage/background-image.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/BackgroundImage/background-image.css";
var background_image_default = {
  "backgroundImage": "pf-v5-c-background-image",
  "dirRtl": "pf-v5-m-dir-rtl"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_background_image_BackgroundImage.js
var c_background_image_BackgroundImage = {
  "name": "--pf-v5-c-background-image--BackgroundImage",
  "value": "none",
  "var": "var(--pf-v5-c-background-image--BackgroundImage)"
};
var c_background_image_BackgroundImage_default = c_background_image_BackgroundImage;

// node_modules/@patternfly/react-core/dist/esm/components/BackgroundImage/BackgroundImage.js
var BackgroundImage = (_a) => {
  var { className, src } = _a, props = __rest(_a, ["className", "src"]);
  return import_react5.default.createElement("div", Object.assign({ className: css(background_image_default.backgroundImage, className), style: {
    [c_background_image_BackgroundImage_default.name]: `url(${src})`
  } }, props));
};
BackgroundImage.displayName = "BackgroundImage";

// node_modules/@patternfly/react-core/dist/esm/components/Banner/Banner.js
init_tslib_es6();
var React52 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Banner/banner.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Banner/banner.css";
var banner_default = {
  "banner": "pf-v5-c-banner",
  "button": "pf-v5-c-button",
  "modifiers": {
    "gold": "pf-m-gold",
    "blue": "pf-m-blue",
    "red": "pf-m-red",
    "green": "pf-m-green",
    "sticky": "pf-m-sticky",
    "disabled": "pf-m-disabled",
    "inline": "pf-m-inline"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Banner/Banner.js
var Banner = (_a) => {
  var { children, className, variant = "default", screenReaderText, isSticky = false } = _a, props = __rest(_a, ["children", "className", "variant", "screenReaderText", "isSticky"]);
  return React52.createElement(
    "div",
    Object.assign({ className: css(banner_default.banner, banner_default.modifiers[variant], isSticky && banner_default.modifiers.sticky, className) }, props),
    screenReaderText && React52.createElement("span", { className: "pf-v5-screen-reader" }, screenReaderText),
    children
  );
};
Banner.displayName = "Banner";

// node_modules/@patternfly/react-core/dist/esm/components/Brand/Brand.js
init_tslib_es6();
var React53 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Brand/brand.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Brand/brand.css";
var brand_default = {
  "brand": "pf-v5-c-brand",
  "modifiers": {
    "picture": "pf-m-picture"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/c_brand_Height.js
var c_brand_Height = {
  "name": "--pf-v5-c-brand--Height",
  "value": "auto",
  "var": "var(--pf-v5-c-brand--Height)"
};
var c_brand_Height_default = c_brand_Height;

// node_modules/@patternfly/react-tokens/dist/esm/c_brand_Width.js
var c_brand_Width = {
  "name": "--pf-v5-c-brand--Width",
  "value": "auto",
  "var": "var(--pf-v5-c-brand--Width)"
};
var c_brand_Width_default = c_brand_Width;

// node_modules/@patternfly/react-core/dist/esm/components/Brand/Brand.js
var Brand = (_a) => {
  var { className = "", src = "", alt, children, widths, heights, style } = _a, props = __rest(_a, ["className", "src", "alt", "children", "widths", "heights", "style"]);
  let responsiveStyles;
  if (widths !== void 0) {
    responsiveStyles = Object.assign({}, setBreakpointCssVars(widths, c_brand_Width_default.name));
  }
  if (heights !== void 0) {
    responsiveStyles = Object.assign(Object.assign({}, responsiveStyles), setBreakpointCssVars(heights, c_brand_Height_default.name));
  }
  return (
    /** the brand component currently contains no styling the 'pf-v5-c-brand' string will be used for the className */
    children !== void 0 ? React53.createElement(
      "picture",
      Object.assign({ className: css(brand_default.brand, brand_default.modifiers.picture, className), style: Object.assign(Object.assign({}, style), responsiveStyles) }, props),
      children,
      React53.createElement("img", { src, alt })
    ) : React53.createElement("img", Object.assign({}, props, { className: css(brand_default.brand, className), style: Object.assign(Object.assign({}, style), responsiveStyles), src, alt }))
  );
};
Brand.displayName = "Brand";

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb.js
init_tslib_es6();
var React54 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Breadcrumb/breadcrumb.css";
var breadcrumb_default = {
  "breadcrumb": "pf-v5-c-breadcrumb",
  "breadcrumbDropdown": "pf-v5-c-breadcrumb__dropdown",
  "breadcrumbHeading": "pf-v5-c-breadcrumb__heading",
  "breadcrumbItem": "pf-v5-c-breadcrumb__item",
  "breadcrumbItemDivider": "pf-v5-c-breadcrumb__item-divider",
  "breadcrumbLink": "pf-v5-c-breadcrumb__link",
  "breadcrumbList": "pf-v5-c-breadcrumb__list",
  "dirRtl": "pf-v5-m-dir-rtl",
  "dropdownToggle": "pf-v5-c-dropdown__toggle",
  "modifiers": {
    "current": "pf-m-current"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb.js
var Breadcrumb = (_a) => {
  var { children = null, className = "", "aria-label": ariaLabel = "Breadcrumb", ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["children", "className", "aria-label", "ouiaId", "ouiaSafe"]);
  const ouiaProps = useOUIAProps(Breadcrumb.displayName, ouiaId, ouiaSafe);
  return React54.createElement(
    "nav",
    Object.assign({}, props, { "aria-label": ariaLabel, className: css(breadcrumb_default.breadcrumb, className) }, ouiaProps),
    React54.createElement("ol", { className: breadcrumb_default.breadcrumbList, role: "list" }, React54.Children.map(children, (child, index) => {
      const showDivider = index > 0;
      if (React54.isValidElement(child)) {
        return React54.cloneElement(child, { showDivider });
      }
      return child;
    }))
  );
};
Breadcrumb.displayName = "Breadcrumb";

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem.js
init_tslib_es6();
var React55 = __toESM(require_react());
var BreadcrumbItem = (_a) => {
  var { children = null, className: classNameProp = "", to = void 0, isActive = false, isDropdown = false, showDivider, target = void 0, component = "a", render = void 0 } = _a, props = __rest(_a, ["children", "className", "to", "isActive", "isDropdown", "showDivider", "target", "component", "render"]);
  const Component44 = component;
  const ariaCurrent = isActive ? "page" : void 0;
  const className = css(breadcrumb_default.breadcrumbLink, isActive && breadcrumb_default.modifiers.current);
  return React55.createElement(
    "li",
    Object.assign({}, props, { className: css(breadcrumb_default.breadcrumbItem, classNameProp) }),
    showDivider && React55.createElement(
      "span",
      { className: breadcrumb_default.breadcrumbItemDivider },
      React55.createElement(angle_right_icon_default, null)
    ),
    component === "button" && React55.createElement("button", { className, "aria-current": ariaCurrent, type: "button" }, children),
    isDropdown && React55.createElement("span", { className: css(breadcrumb_default.breadcrumbDropdown) }, children),
    render && render({ className, ariaCurrent }),
    to && !render && React55.createElement(Component44, { href: to, target, className, "aria-current": ariaCurrent }, children),
    !to && component !== "button" && !isDropdown && children
  );
};
BreadcrumbItem.displayName = "BreadcrumbItem";

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbHeading.js
init_tslib_es6();
var React56 = __toESM(require_react());
var BreadcrumbHeading = (_a) => {
  var { children = null, className = "", to = void 0, target = void 0, component = "a", showDivider } = _a, props = __rest(_a, ["children", "className", "to", "target", "component", "showDivider"]);
  const Component44 = component;
  return React56.createElement(
    "li",
    Object.assign({}, props, { className: css(breadcrumb_default.breadcrumbItem, className) }),
    showDivider && React56.createElement(
      "span",
      { className: breadcrumb_default.breadcrumbItemDivider },
      React56.createElement(angle_right_icon_default, null)
    ),
    React56.createElement(
      "h1",
      { className: breadcrumb_default.breadcrumbHeading },
      !to && component === "button" && React56.createElement("button", { className: css(breadcrumb_default.breadcrumbLink, breadcrumb_default.modifiers.current), "aria-current": true, type: "button" }, children),
      to && React56.createElement(Component44, { href: to, target, className: css(breadcrumb_default.breadcrumbLink, breadcrumb_default.modifiers.current), "aria-current": "page" }, children),
      !to && component !== "button" && React56.createElement(React56.Fragment, null, children)
    )
  );
};
BreadcrumbHeading.displayName = "BreadcrumbHeading";

// node_modules/@patternfly/react-core/dist/esm/components/CalendarMonth/CalendarMonth.js
init_tslib_es6();
var import_react13 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/TextInput/TextInput.js
init_tslib_es6();
var React58 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/FormControl/form-control.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/FormControl/form-control.css";
var form_control_default = {
  "formControl": "pf-v5-c-form-control",
  "formControlIcon": "pf-v5-c-form-control__icon",
  "formControlToggleIcon": "pf-v5-c-form-control__toggle-icon",
  "formControlUtilities": "pf-v5-c-form-control__utilities",
  "modifiers": {
    "readonly": "pf-m-readonly",
    "success": "pf-m-success",
    "warning": "pf-m-warning",
    "error": "pf-m-error",
    "plain": "pf-m-plain",
    "expanded": "pf-m-expanded",
    "disabled": "pf-m-disabled",
    "icon": "pf-m-icon",
    "placeholder": "pf-m-placeholder",
    "resizeVertical": "pf-m-resize-vertical",
    "resizeHorizontal": "pf-m-resize-horizontal",
    "resizeBoth": "pf-m-resize-both",
    "status": "pf-m-status"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/FormControl/FormControlIcon.js
init_tslib_es6();
var React57 = __toESM(require_react());
var statusIcons = {
  success: check_circle_icon_default,
  error: exclamation_circle_icon_default,
  warning: exclamation_triangle_icon_default
};
var FormControlIcon = (_a) => {
  var { status, customIcon, className } = _a, props = __rest(_a, ["status", "customIcon", "className"]);
  const StatusIcon = status && statusIcons[status];
  return React57.createElement("span", Object.assign({ className: css(form_control_default.formControlIcon, status && form_control_default.modifiers.status, className) }, props), customIcon || React57.createElement(StatusIcon, null));
};

// node_modules/@patternfly/react-core/dist/esm/components/TextInput/TextInput.js
var TextInputTypes;
(function(TextInputTypes2) {
  TextInputTypes2["text"] = "text";
  TextInputTypes2["date"] = "date";
  TextInputTypes2["datetimeLocal"] = "datetime-local";
  TextInputTypes2["email"] = "email";
  TextInputTypes2["month"] = "month";
  TextInputTypes2["number"] = "number";
  TextInputTypes2["password"] = "password";
  TextInputTypes2["search"] = "search";
  TextInputTypes2["tel"] = "tel";
  TextInputTypes2["time"] = "time";
  TextInputTypes2["url"] = "url";
})(TextInputTypes || (TextInputTypes = {}));
var TextInputReadOnlyVariant;
(function(TextInputReadOnlyVariant2) {
  TextInputReadOnlyVariant2["default"] = "default";
  TextInputReadOnlyVariant2["plain"] = "plain";
})(TextInputReadOnlyVariant || (TextInputReadOnlyVariant = {}));
var TextInputBase = class _TextInputBase extends React58.Component {
  constructor(props) {
    super(props);
    this.inputRef = React58.createRef();
    this.observer = () => {
    };
    this.handleChange = (event) => {
      if (this.props.onChange) {
        this.props.onChange(event, event.currentTarget.value);
      }
    };
    this.handleResize = () => {
      const inputRef = this.props.innerRef || this.inputRef;
      if (inputRef && inputRef.current) {
        trimLeft(inputRef.current, String(this.props.value));
      }
    };
    this.restoreText = () => {
      const inputRef = this.props.innerRef || this.inputRef;
      inputRef.current.value = String(this.props.value);
      inputRef.current.scrollLeft = inputRef.current.scrollWidth;
    };
    this.onFocus = (event) => {
      const { isLeftTruncated, isStartTruncated, onFocus } = this.props;
      if (isLeftTruncated || isStartTruncated) {
        this.restoreText();
      }
      onFocus && onFocus(event);
    };
    this.onBlur = (event) => {
      const { isLeftTruncated, isStartTruncated, onBlur } = this.props;
      if (isLeftTruncated || isStartTruncated) {
        this.handleResize();
      }
      onBlur && onBlur(event);
    };
    this.sanitizeInputValue = (value) => typeof value === "string" ? value.replace(/\n/g, " ") : value;
    if (!props.id && !props["aria-label"] && !props["aria-labelledby"]) {
      console.error("Text input:", "Text input requires either an id or aria-label to be specified");
    }
    this.state = {
      ouiaStateId: getDefaultOUIAId(_TextInputBase.displayName)
    };
  }
  componentDidMount() {
    if (this.props.isLeftTruncated || this.props.isStartTruncated) {
      const inputRef = this.props.innerRef || this.inputRef;
      this.observer = getResizeObserver(inputRef.current, this.handleResize, true);
      this.handleResize();
    }
  }
  componentWillUnmount() {
    if (this.props.isLeftTruncated || this.props.isStartTruncated) {
      this.observer();
    }
  }
  render() {
    const _a = this.props, {
      innerRef,
      className,
      type,
      value,
      placeholder,
      validated,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      onChange,
      onFocus,
      onBlur,
      isLeftTruncated,
      isStartTruncated,
      isExpanded,
      expandedProps,
      readOnly,
      readOnlyVariant,
      isRequired,
      isDisabled,
      customIcon,
      ouiaId,
      ouiaSafe
    } = _a, props = __rest(_a, ["innerRef", "className", "type", "value", "placeholder", "validated", "onChange", "onFocus", "onBlur", "isLeftTruncated", "isStartTruncated", "isExpanded", "expandedProps", "readOnly", "readOnlyVariant", "isRequired", "isDisabled", "customIcon", "ouiaId", "ouiaSafe"]);
    const hasStatusIcon = ["success", "error", "warning"].includes(validated);
    const ariaExpandedProps = expandedProps ? { "aria-expanded": expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.isExpanded, "aria-controls": expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.ariaControls, role: "combobox" } : {};
    return React58.createElement(
      "span",
      { className: css(form_control_default.formControl, readOnlyVariant && form_control_default.modifiers.readonly, readOnlyVariant === "plain" && form_control_default.modifiers.plain, isDisabled && form_control_default.modifiers.disabled, (isExpanded || (expandedProps === null || expandedProps === void 0 ? void 0 : expandedProps.isExpanded)) && form_control_default.modifiers.expanded, customIcon && form_control_default.modifiers.icon, hasStatusIcon && form_control_default.modifiers[validated], className) },
      React58.createElement("input", Object.assign({}, props, { onFocus: this.onFocus, onBlur: this.onBlur, onChange: this.handleChange, type, value: this.sanitizeInputValue(value), "aria-invalid": props["aria-invalid"] ? props["aria-invalid"] : validated === ValidatedOptions.error }, ariaExpandedProps, { required: isRequired, disabled: isDisabled, readOnly: !!readOnlyVariant || readOnly, ref: innerRef || this.inputRef, placeholder }, getOUIAProps(TextInput.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe))),
      (customIcon || hasStatusIcon) && React58.createElement(
        "span",
        { className: css(form_control_default.formControlUtilities) },
        customIcon && React58.createElement(FormControlIcon, { customIcon }),
        hasStatusIcon && React58.createElement(FormControlIcon, { status: validated })
      )
    );
  }
};
TextInputBase.displayName = "TextInputBase";
TextInputBase.defaultProps = {
  "aria-label": null,
  isRequired: false,
  validated: "default",
  isDisabled: false,
  isExpanded: false,
  type: TextInputTypes.text,
  isLeftTruncated: false,
  isStartTruncated: false,
  onChange: () => void 0,
  ouiaSafe: true
};
var TextInput = React58.forwardRef((props, ref) => React58.createElement(TextInputBase, Object.assign({}, props, { innerRef: ref })));
TextInput.displayName = "TextInput";

// node_modules/@patternfly/react-core/dist/esm/components/Select/Select.js
init_tslib_es6();
var import_react9 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Menu/Menu.js
init_tslib_es6();
var React60 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Menu/menu.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Menu/menu.css";
var menu_default = {
  "breadcrumb": "pf-v5-c-breadcrumb",
  "check": "pf-v5-c-check",
  "dirRtl": "pf-v5-m-dir-rtl",
  "divider": "pf-v5-c-divider",
  "menu": "pf-v5-c-menu",
  "menuBreadcrumb": "pf-v5-c-menu__breadcrumb",
  "menuContent": "pf-v5-c-menu__content",
  "menuFooter": "pf-v5-c-menu__footer",
  "menuGroup": "pf-v5-c-menu__group",
  "menuGroupTitle": "pf-v5-c-menu__group-title",
  "menuHeader": "pf-v5-c-menu__header",
  "menuItem": "pf-v5-c-menu__item",
  "menuItemAction": "pf-v5-c-menu__item-action",
  "menuItemActionIcon": "pf-v5-c-menu__item-action-icon",
  "menuItemCheck": "pf-v5-c-menu__item-check",
  "menuItemDescription": "pf-v5-c-menu__item-description",
  "menuItemExternalIcon": "pf-v5-c-menu__item-external-icon",
  "menuItemIcon": "pf-v5-c-menu__item-icon",
  "menuItemMain": "pf-v5-c-menu__item-main",
  "menuItemSelectIcon": "pf-v5-c-menu__item-select-icon",
  "menuItemText": "pf-v5-c-menu__item-text",
  "menuItemToggleIcon": "pf-v5-c-menu__item-toggle-icon",
  "menuList": "pf-v5-c-menu__list",
  "menuListItem": "pf-v5-c-menu__list-item",
  "menuSearch": "pf-v5-c-menu__search",
  "modifiers": {
    "hidden": "pf-m-hidden",
    "hiddenOnSm": "pf-m-hidden-on-sm",
    "visibleOnSm": "pf-m-visible-on-sm",
    "hiddenOnMd": "pf-m-hidden-on-md",
    "visibleOnMd": "pf-m-visible-on-md",
    "hiddenOnLg": "pf-m-hidden-on-lg",
    "visibleOnLg": "pf-m-visible-on-lg",
    "hiddenOnXl": "pf-m-hidden-on-xl",
    "visibleOnXl": "pf-m-visible-on-xl",
    "hiddenOn_2xl": "pf-m-hidden-on-2xl",
    "visibleOn_2xl": "pf-m-visible-on-2xl",
    "flyout": "pf-m-flyout",
    "top": "pf-m-top",
    "left": "pf-m-left",
    "drilldown": "pf-m-drilldown",
    "drilledIn": "pf-m-drilled-in",
    "currentPath": "pf-m-current-path",
    "static": "pf-m-static",
    "plain": "pf-m-plain",
    "scrollable": "pf-m-scrollable",
    "nav": "pf-m-nav",
    "focus": "pf-m-focus",
    "disabled": "pf-m-disabled",
    "ariaDisabled": "pf-m-aria-disabled",
    "load": "pf-m-load",
    "loading": "pf-m-loading",
    "danger": "pf-m-danger",
    "selected": "pf-m-selected",
    "favorite": "pf-m-favorite",
    "favorited": "pf-m-favorited"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-styles/css/components/Dropdown/dropdown.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Dropdown/dropdown.css";
var dropdown_default = {
  "badge": "pf-v5-c-badge",
  "check": "pf-v5-c-check",
  "divider": "pf-v5-c-divider",
  "dropdown": "pf-v5-c-dropdown",
  "dropdownGroup": "pf-v5-c-dropdown__group",
  "dropdownGroupTitle": "pf-v5-c-dropdown__group-title",
  "dropdownMenu": "pf-v5-c-dropdown__menu",
  "dropdownMenuItem": "pf-v5-c-dropdown__menu-item",
  "dropdownMenuItemDescription": "pf-v5-c-dropdown__menu-item-description",
  "dropdownMenuItemIcon": "pf-v5-c-dropdown__menu-item-icon",
  "dropdownMenuItemMain": "pf-v5-c-dropdown__menu-item-main",
  "dropdownToggle": "pf-v5-c-dropdown__toggle",
  "dropdownToggleButton": "pf-v5-c-dropdown__toggle-button",
  "dropdownToggleCheck": "pf-v5-c-dropdown__toggle-check",
  "dropdownToggleIcon": "pf-v5-c-dropdown__toggle-icon",
  "dropdownToggleImage": "pf-v5-c-dropdown__toggle-image",
  "dropdownToggleProgress": "pf-v5-c-dropdown__toggle-progress",
  "dropdownToggleText": "pf-v5-c-dropdown__toggle-text",
  "menu": "pf-v5-c-menu",
  "modifiers": {
    "fullHeight": "pf-m-full-height",
    "expanded": "pf-m-expanded",
    "action": "pf-m-action",
    "disabled": "pf-m-disabled",
    "plain": "pf-m-plain",
    "text": "pf-m-text",
    "splitButton": "pf-m-split-button",
    "primary": "pf-m-primary",
    "inProgress": "pf-m-in-progress",
    "active": "pf-m-active",
    "secondary": "pf-m-secondary",
    "top": "pf-m-top",
    "static": "pf-m-static",
    "alignRight": "pf-m-align-right",
    "alignLeft": "pf-m-align-left",
    "alignRightOnSm": "pf-m-align-right-on-sm",
    "alignLeftOnSm": "pf-m-align-left-on-sm",
    "alignRightOnMd": "pf-m-align-right-on-md",
    "alignLeftOnMd": "pf-m-align-left-on-md",
    "alignRightOnLg": "pf-m-align-right-on-lg",
    "alignLeftOnLg": "pf-m-align-left-on-lg",
    "alignRightOnXl": "pf-m-align-right-on-xl",
    "alignLeftOnXl": "pf-m-align-left-on-xl",
    "alignRightOn_2xl": "pf-m-align-right-on-2xl",
    "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
    "ariaDisabled": "pf-m-aria-disabled",
    "icon": "pf-m-icon",
    "description": "pf-m-description"
  },
  "spinner": "pf-v5-c-spinner",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContext.js
var React59 = __toESM(require_react());
var MenuContext = React59.createContext({
  menuId: null,
  parentMenu: null,
  onActionClick: () => null,
  onSelect: () => null,
  activeItemId: null,
  selected: null,
  drilledInMenus: [],
  drilldownItemPath: [],
  onDrillIn: null,
  onDrillOut: null,
  onGetMenuHeight: () => null,
  flyoutRef: null,
  setFlyoutRef: () => null,
  disableHover: false,
  role: "menu"
});
var MenuItemContext = React59.createContext({
  itemId: null,
  isDisabled: false
});

// node_modules/@patternfly/react-core/dist/esm/components/Menu/Menu.js
var MenuBase = class extends React60.Component {
  constructor(props) {
    super(props);
    this.menuRef = React60.createRef();
    this.activeMenu = null;
    this.state = {
      ouiaStateId: getDefaultOUIAId(Menu.displayName),
      transitionMoveTarget: null,
      flyoutRef: null,
      disableHover: false,
      currentDrilldownMenuId: this.props.id
    };
    this.handleDrilldownTransition = (event) => {
      const current = this.menuRef.current;
      if (!current || current !== event.target.closest(`.${menu_default.menu}`) && !Array.from(current.getElementsByClassName(menu_default.menu)).includes(event.target.closest(`.${menu_default.menu}`))) {
        return;
      }
      if (this.state.transitionMoveTarget) {
        this.state.transitionMoveTarget.focus();
        this.setState({ transitionMoveTarget: null });
      } else {
        const nextMenu = current.querySelector("#" + this.props.activeMenu) || current || null;
        const nextMenuLists = nextMenu.getElementsByTagName("UL");
        if (nextMenuLists.length === 0) {
          return;
        }
        const nextMenuChildren = Array.from(nextMenuLists[0].children);
        if (!this.state.currentDrilldownMenuId || nextMenu.id !== this.state.currentDrilldownMenuId) {
          this.setState({ currentDrilldownMenuId: nextMenu.id });
        } else {
          return;
        }
        const nextTarget = nextMenuChildren.filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)))[0].firstChild;
        nextTarget.focus();
        nextTarget.tabIndex = 0;
      }
    };
    this.handleExtraKeys = (event) => {
      const isDrilldown = this.props.containsDrilldown;
      const activeElement = document.activeElement;
      if (event.target.closest(`.${menu_default.menu}`) !== this.activeMenu && !event.target.classList.contains(breadcrumb_default.breadcrumbLink)) {
        this.activeMenu = event.target.closest(`.${menu_default.menu}`);
        this.setState({ disableHover: true });
      }
      if (event.target.tagName === "INPUT") {
        return;
      }
      const parentMenu = this.activeMenu;
      const key = event.key;
      const isFromBreadcrumb = activeElement.classList.contains(breadcrumb_default.breadcrumbLink) || activeElement.classList.contains(dropdown_default.dropdownToggle);
      if (key === " " || key === "Enter") {
        event.preventDefault();
        if (isDrilldown && !isFromBreadcrumb) {
          const isDrillingOut = activeElement.closest("li").classList.contains("pf-m-current-path");
          if (isDrillingOut && parentMenu.parentElement.tagName === "LI") {
            activeElement.tabIndex = -1;
            parentMenu.parentElement.firstChild.tabIndex = 0;
            this.setState({ transitionMoveTarget: parentMenu.parentElement.firstChild });
          } else {
            if (activeElement.nextElementSibling && activeElement.nextElementSibling.classList.contains(menu_default.menu)) {
              const childItems = Array.from(activeElement.nextElementSibling.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)));
              activeElement.tabIndex = -1;
              childItems[0].firstChild.tabIndex = 0;
              this.setState({ transitionMoveTarget: childItems[0].firstChild });
            }
          }
        }
        document.activeElement.click();
      }
    };
    this.createNavigableElements = () => {
      const isDrilldown = this.props.containsDrilldown;
      if (isDrilldown) {
        return this.activeMenu ? Array.from(this.activeMenu.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider))) : [];
      } else {
        return this.menuRef.current ? Array.from(this.menuRef.current.getElementsByTagName("LI")).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider))) : [];
      }
    };
    if (props.innerRef) {
      this.menuRef = props.innerRef;
    }
  }
  allowTabFirstItem() {
    const current = this.menuRef.current;
    if (current) {
      const first = current.querySelector("ul button:not(:disabled), ul a:not(:disabled)");
      if (first) {
        first.tabIndex = 0;
      }
    }
  }
  componentDidMount() {
    if (this.context) {
      this.setState({ disableHover: this.context.disableHover });
    }
    if (canUseDOM) {
      window.addEventListener("transitionend", this.props.isRootMenu ? this.handleDrilldownTransition : null);
    }
    this.allowTabFirstItem();
  }
  componentWillUnmount() {
    if (canUseDOM) {
      window.removeEventListener("transitionend", this.handleDrilldownTransition);
    }
  }
  componentDidUpdate(prevProps) {
    if (prevProps.children !== this.props.children) {
      this.allowTabFirstItem();
    }
  }
  render() {
    const _a = this.props, {
      id,
      children,
      className,
      onSelect,
      selected = null,
      onActionClick,
      ouiaId,
      ouiaSafe,
      containsFlyout,
      isNavFlyout,
      containsDrilldown,
      isMenuDrilledIn,
      isPlain,
      isScrollable,
      drilldownItemPath,
      drilledInMenus,
      onDrillIn,
      onDrillOut,
      onGetMenuHeight,
      parentMenu = null,
      activeItemId = null,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      innerRef,
      isRootMenu,
      activeMenu,
      role
    } = _a, props = __rest(_a, ["id", "children", "className", "onSelect", "selected", "onActionClick", "ouiaId", "ouiaSafe", "containsFlyout", "isNavFlyout", "containsDrilldown", "isMenuDrilledIn", "isPlain", "isScrollable", "drilldownItemPath", "drilledInMenus", "onDrillIn", "onDrillOut", "onGetMenuHeight", "parentMenu", "activeItemId", "innerRef", "isRootMenu", "activeMenu", "role"]);
    const _isMenuDrilledIn = isMenuDrilledIn || drilledInMenus && drilledInMenus.includes(id) || false;
    return React60.createElement(
      MenuContext.Provider,
      { value: {
        menuId: id,
        parentMenu: parentMenu || id,
        onSelect,
        onActionClick,
        activeItemId,
        selected,
        drilledInMenus,
        drilldownItemPath,
        onDrillIn,
        onDrillOut,
        onGetMenuHeight,
        flyoutRef: this.state.flyoutRef,
        setFlyoutRef: (flyoutRef) => this.setState({ flyoutRef }),
        disableHover: this.state.disableHover,
        role
      } },
      isRootMenu && React60.createElement(KeyboardHandler, { containerRef: this.menuRef || null, additionalKeyHandler: this.handleExtraKeys, createNavigableElements: this.createNavigableElements, isActiveElement: (element) => document.activeElement.closest("li") === element || // if element is a basic MenuItem
      document.activeElement.parentElement === element || document.activeElement.closest(`.${menu_default.menuSearch}`) === element || // if element is a MenuSearch
      document.activeElement.closest("ol") && document.activeElement.closest("ol").firstChild === element, getFocusableElement: (navigableElement) => {
        var _a2, _b;
        return (navigableElement === null || navigableElement === void 0 ? void 0 : navigableElement.tagName) === "DIV" && navigableElement.querySelector("input") || // for MenuSearchInput
        ((_a2 = navigableElement.firstChild) === null || _a2 === void 0 ? void 0 : _a2.tagName) === "LABEL" && navigableElement.querySelector("input") || // for MenuItem checkboxes
        ((_b = navigableElement.firstChild) === null || _b === void 0 ? void 0 : _b.tagName) === "DIV" && navigableElement.querySelector("a, button, input") || // For aria-disabled element that is rendered inside a div with "display: contents" styling
        navigableElement.firstChild;
      }, noHorizontalArrowHandling: document.activeElement && (document.activeElement.classList.contains(breadcrumb_default.breadcrumbLink) || document.activeElement.classList.contains(dropdown_default.dropdownToggle) || document.activeElement.tagName === "INPUT"), noEnterHandling: true, noSpaceHandling: true }),
      React60.createElement("div", Object.assign({ id, className: css(menu_default.menu, isPlain && menu_default.modifiers.plain, isScrollable && menu_default.modifiers.scrollable, containsFlyout && menu_default.modifiers.flyout, isNavFlyout && menu_default.modifiers.nav, containsDrilldown && menu_default.modifiers.drilldown, _isMenuDrilledIn && menu_default.modifiers.drilledIn, className), ref: this.menuRef }, getOUIAProps(Menu.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), children)
    );
  }
};
MenuBase.displayName = "Menu";
MenuBase.contextType = MenuContext;
MenuBase.defaultProps = {
  ouiaSafe: true,
  isRootMenu: true,
  isPlain: false,
  isScrollable: false,
  role: "menu"
};
var Menu = React60.forwardRef((props, ref) => React60.createElement(MenuBase, Object.assign({}, props, { innerRef: ref })));
Menu.displayName = "Menu";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContent.js
init_tslib_es6();
var React61 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_Height.js
var c_menu__content_Height = {
  "name": "--pf-v5-c-menu__content--Height",
  "value": "auto",
  "var": "var(--pf-v5-c-menu__content--Height)"
};
var c_menu_content_Height_default = c_menu__content_Height;

// node_modules/@patternfly/react-tokens/dist/esm/c_menu__content_MaxHeight.js
var c_menu__content_MaxHeight = {
  "name": "--pf-v5-c-menu__content--MaxHeight",
  "value": "18.75rem",
  "var": "var(--pf-v5-c-menu__content--MaxHeight)"
};
var c_menu_content_MaxHeight_default = c_menu__content_MaxHeight;

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContent.js
var MenuContent = React61.forwardRef((props, ref) => {
  const { getHeight, children, menuHeight, maxMenuHeight } = props, rest = __rest(props, ["getHeight", "children", "menuHeight", "maxMenuHeight"]);
  const menuContentRef = React61.createRef();
  const refCallback = (el, menuId, onGetMenuHeight) => {
    if (el) {
      let clientHeight = el.clientHeight;
      let rootMenuList = null;
      let parentEl = el.closest(`.${menu_default.menuList}`);
      while (parentEl !== null && parentEl.nodeType === 1) {
        if (parentEl.classList.contains(menu_default.menuList)) {
          rootMenuList = parentEl;
        }
        parentEl = parentEl.parentElement;
      }
      if (rootMenuList) {
        const rootMenuListStyles = getComputedStyle(rootMenuList);
        const rootMenuListPaddingOffset = parseFloat(rootMenuListStyles.getPropertyValue("padding-top").replace(/px/g, "")) + parseFloat(rootMenuListStyles.getPropertyValue("padding-bottom").replace(/px/g, "")) + parseFloat(getComputedStyle(rootMenuList.parentElement).getPropertyValue("border-bottom-width").replace(/px/g, ""));
        clientHeight = clientHeight + rootMenuListPaddingOffset;
      }
      onGetMenuHeight && onGetMenuHeight(menuId, clientHeight);
      getHeight && getHeight(clientHeight.toString());
    }
    return ref || menuContentRef;
  };
  return React61.createElement(MenuContext.Consumer, null, ({ menuId, onGetMenuHeight }) => React61.createElement("div", Object.assign({}, rest, { className: css(menu_default.menuContent, props.className), ref: (el) => refCallback(el, menuId, onGetMenuHeight), style: Object.assign(Object.assign({}, menuHeight && { [c_menu_content_Height_default.name]: menuHeight }), maxMenuHeight && { [c_menu_content_MaxHeight_default.name]: maxMenuHeight }) }), children));
});
MenuContent.displayName = "MenuContent";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuFooter.js
init_tslib_es6();
var React62 = __toESM(require_react());
var MenuFooter = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React62.createElement("div", Object.assign({}, props, { className: css(menu_default.menuFooter, className) }), children);
};
MenuFooter.displayName = "MenuFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuSearch.js
var React63 = __toESM(require_react());
var MenuSearch = React63.forwardRef((props, ref) => React63.createElement("div", Object.assign({}, props, { className: css(menu_default.menuSearch, props.className), ref })));
MenuSearch.displayName = "MenuSearch";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuSearchInput.js
var React64 = __toESM(require_react());
var MenuSearchInput = React64.forwardRef((props, ref) => (
  // Update to use the styles object when core adds the class
  React64.createElement("div", Object.assign({}, props, { className: css(`${menu_default.menuSearch}-input`, props.className), ref }))
));
MenuSearchInput.displayName = "MenuSearchInput";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuGroup.js
init_tslib_es6();
var React65 = __toESM(require_react());
var MenuGroupBase = (_a) => {
  var { children, className = "", label = "", titleId, innerRef, labelHeadingLevel: HeadingLevel = "h1" } = _a, props = __rest(_a, ["children", "className", "label", "titleId", "innerRef", "labelHeadingLevel"]);
  const Wrapper = typeof label === "function" ? label : HeadingLevel;
  return React65.createElement(
    "section",
    Object.assign({}, props, { className: css(menu_default.menuGroup, className), ref: innerRef }),
    React65.createElement(
      React65.Fragment,
      null,
      ["function", "string"].includes(typeof label) ? React65.createElement(Wrapper, { className: css(menu_default.menuGroupTitle), id: titleId }, label) : label,
      children
    )
  );
};
var MenuGroup = React65.forwardRef((props, ref) => React65.createElement(MenuGroupBase, Object.assign({}, props, { innerRef: ref })));
MenuGroup.displayName = "MenuGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItem.js
init_tslib_es6();
var React68 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_top_offset.js
var c_menu_m_flyout__menu_top_offset = {
  "name": "--pf-v5-c-menu--m-flyout__menu--top-offset",
  "value": "0px",
  "var": "var(--pf-v5-c-menu--m-flyout__menu--top-offset)"
};
var c_menu_m_flyout_menu_top_offset_default = c_menu_m_flyout__menu_top_offset;

// node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_m_left_right_offset.js
var c_menu_m_flyout__menu_m_left_right_offset = {
  "name": "--pf-v5-c-menu--m-flyout__menu--m-left--right-offset",
  "value": "0px",
  "var": "var(--pf-v5-c-menu--m-flyout__menu--m-left--right-offset)"
};
var c_menu_m_flyout_menu_m_left_right_offset_default = c_menu_m_flyout__menu_m_left_right_offset;

// node_modules/@patternfly/react-tokens/dist/esm/c_menu_m_flyout__menu_left_offset.js
var c_menu_m_flyout__menu_left_offset = {
  "name": "--pf-v5-c-menu--m-flyout__menu--left-offset",
  "value": "0px",
  "var": "var(--pf-v5-c-menu--m-flyout__menu--left-offset)"
};
var c_menu_m_flyout_menu_left_offset_default = c_menu_m_flyout__menu_left_offset;

// node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js
var ExternalLinkAltIconConfig = {
  name: "ExternalLinkAltIcon",
  height: 512,
  width: 512,
  svgPath: "M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z",
  yOffset: 0,
  xOffset: 0
};
var ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);
var external_link_alt_icon_default = ExternalLinkAltIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-left-icon.js
var AngleLeftIconConfig = {
  name: "AngleLeftIcon",
  height: 512,
  width: 256,
  svgPath: "M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z",
  yOffset: 0,
  xOffset: 0
};
var AngleLeftIcon = createIcon(AngleLeftIconConfig);
var angle_left_icon_default = AngleLeftIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/check-icon.js
var CheckIconConfig = {
  name: "CheckIcon",
  height: 512,
  width: 512,
  svgPath: "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z",
  yOffset: 0,
  xOffset: 0
};
var CheckIcon = createIcon(CheckIconConfig);
var check_icon_default = CheckIcon;

// node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js
init_tslib_es6();
var React66 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Check/check.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Check/check.css";
var check_default = {
  "check": "pf-v5-c-check",
  "checkBody": "pf-v5-c-check__body",
  "checkDescription": "pf-v5-c-check__description",
  "checkInput": "pf-v5-c-check__input",
  "checkLabel": "pf-v5-c-check__label",
  "checkLabelRequired": "pf-v5-c-check__label-required",
  "modifiers": {
    "standalone": "pf-m-standalone",
    "disabled": "pf-m-disabled"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Checkbox/Checkbox.js
var defaultOnChange = () => {
};
var Checkbox = class _Checkbox extends React66.Component {
  constructor(props) {
    super(props);
    this.handleChange = (event) => {
      this.props.onChange(event, event.currentTarget.checked);
    };
    this.state = {
      ouiaStateId: getDefaultOUIAId(_Checkbox.displayName)
    };
  }
  render() {
    const _a = this.props, { "aria-label": ariaLabel, className, inputClassName, onChange, isLabelWrapped, isLabelBeforeButton, isValid, isDisabled, isRequired, isChecked, label, checked, defaultChecked, description, body, ouiaId, ouiaSafe, component } = _a, props = __rest(_a, ["aria-label", "className", "inputClassName", "onChange", "isLabelWrapped", "isLabelBeforeButton", "isValid", "isDisabled", "isRequired", "isChecked", "label", "checked", "defaultChecked", "description", "body", "ouiaId", "ouiaSafe", "component"]);
    if (!props.id) {
      console.error("Checkbox:", "id is required to make input accessible");
    }
    const checkedProps = {};
    if ([true, false].includes(checked) || isChecked === true) {
      checkedProps.checked = checked || isChecked;
    }
    if (onChange !== defaultOnChange) {
      checkedProps.checked = isChecked;
    }
    if ([false, true].includes(defaultChecked)) {
      checkedProps.defaultChecked = defaultChecked;
    }
    const inputRendered = React66.createElement("input", Object.assign({}, props, { className: css(check_default.checkInput, inputClassName), type: "checkbox", onChange: this.handleChange, "aria-invalid": !isValid, "aria-label": ariaLabel, disabled: isDisabled, required: isRequired, ref: (elem) => elem && (elem.indeterminate = isChecked === null) }, checkedProps, getOUIAProps(_Checkbox.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)));
    const wrapWithLabel = isLabelWrapped && !component || component === "label";
    const Label2 = wrapWithLabel ? "span" : "label";
    const labelRendered = label ? React66.createElement(
      Label2,
      { className: css(check_default.checkLabel, isDisabled && check_default.modifiers.disabled), htmlFor: !wrapWithLabel ? props.id : void 0 },
      label,
      isRequired && React66.createElement("span", { className: css(check_default.checkLabelRequired), "aria-hidden": "true" }, ASTERISK)
    ) : null;
    const Component44 = component !== null && component !== void 0 ? component : wrapWithLabel ? "label" : "div";
    checkedProps.checked = checkedProps.checked === null ? false : checkedProps.checked;
    return React66.createElement(
      Component44,
      { className: css(check_default.check, !label && check_default.modifiers.standalone, className), htmlFor: wrapWithLabel ? props.id : void 0 },
      isLabelBeforeButton ? React66.createElement(
        React66.Fragment,
        null,
        labelRendered,
        inputRendered
      ) : React66.createElement(
        React66.Fragment,
        null,
        inputRendered,
        labelRendered
      ),
      description && React66.createElement("span", { className: css(check_default.checkDescription) }, description),
      body && React66.createElement("span", { className: css(check_default.checkBody) }, body)
    );
  }
};
Checkbox.displayName = "Checkbox";
Checkbox.defaultProps = {
  className: "",
  isLabelWrapped: false,
  isValid: true,
  isDisabled: false,
  isRequired: false,
  isChecked: false,
  onChange: defaultOnChange,
  ouiaSafe: true
};

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItemAction.js
init_tslib_es6();
var React67 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/star-icon.js
var StarIconConfig = {
  name: "StarIcon",
  height: 512,
  width: 576,
  svgPath: "M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z",
  yOffset: 0,
  xOffset: 0
};
var StarIcon = createIcon(StarIconConfig);
var star_icon_default = StarIcon;

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItemAction.js
var MenuItemActionBase = (_a) => {
  var { className = "", icon, onClick, "aria-label": ariaLabel, isFavorited = null, isDisabled, actionId, innerRef } = _a, props = __rest(_a, ["className", "icon", "onClick", "aria-label", "isFavorited", "isDisabled", "actionId", "innerRef"]);
  return React67.createElement(MenuContext.Consumer, null, ({ onActionClick }) => React67.createElement(MenuItemContext.Consumer, null, ({ itemId, isDisabled: isDisabledContext }) => {
    const onClickButton = (event) => {
      onClick && onClick(event);
      onActionClick && onActionClick(event, itemId, actionId);
    };
    return React67.createElement(
      "button",
      Object.assign({ className: css(menu_default.menuItemAction, isFavorited !== null && menu_default.modifiers.favorite, isFavorited && menu_default.modifiers.favorited, className), "aria-label": ariaLabel, onClick: onClickButton }, (isDisabled === true || isDisabledContext === true) && { disabled: true }, { ref: innerRef, tabIndex: -1 }, props),
      React67.createElement("span", { className: css(menu_default.menuItemActionIcon) }, icon === "favorites" || isFavorited !== null ? React67.createElement(star_icon_default, { "aria-hidden": true }) : icon)
    );
  }));
};
var MenuItemAction = React67.forwardRef((props, ref) => React67.createElement(MenuItemActionBase, Object.assign({}, props, { innerRef: ref })));
MenuItemAction.displayName = "MenuItemAction";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuItem.js
var FlyoutContext = React68.createContext({
  direction: "right"
});
var MenuItemBase = (_a) => {
  var { children, className, itemId = null, to, hasCheckbox = false, isActive = null, isFavorited = null, isLoadButton = false, isLoading = false, flyoutMenu, direction, description = null, onClick = () => {
  }, component = "button", isDisabled = false, isAriaDisabled = false, isExternalLink = false, isSelected = null, isFocused, isDanger = false, icon, actions, onShowFlyout, drilldownMenu, isOnPath, innerRef, id, "aria-label": ariaLabel, tooltipProps, rel, target, download } = _a, props = __rest(_a, ["children", "className", "itemId", "to", "hasCheckbox", "isActive", "isFavorited", "isLoadButton", "isLoading", "flyoutMenu", "direction", "description", "onClick", "component", "isDisabled", "isAriaDisabled", "isExternalLink", "isSelected", "isFocused", "isDanger", "icon", "actions", "onShowFlyout", "drilldownMenu", "isOnPath", "innerRef", "id", "aria-label", "tooltipProps", "rel", "target", "download"]);
  const { menuId, parentMenu, onSelect, onActionClick, activeItemId, selected, drilldownItemPath, onDrillIn, onDrillOut, flyoutRef, setFlyoutRef, disableHover, role: menuRole } = React68.useContext(MenuContext);
  let Component44 = to ? "a" : component;
  if (hasCheckbox && !to) {
    Component44 = "label";
  }
  const [flyoutTarget, setFlyoutTarget] = React68.useState(null);
  const flyoutContext = React68.useContext(FlyoutContext);
  const [flyoutXDirection, setFlyoutXDirection] = React68.useState(flyoutContext.direction);
  const ref = React68.useRef();
  const flyoutVisible = ref === flyoutRef;
  const hasFlyout = flyoutMenu !== void 0;
  const showFlyout = (show) => {
    if (!flyoutVisible && show) {
      setFlyoutRef(ref);
    } else if (flyoutVisible && !show) {
      setFlyoutRef(null);
    }
    onShowFlyout && show && onShowFlyout();
  };
  useIsomorphicLayoutEffect(() => {
    if (hasFlyout && ref.current && canUseDOM) {
      const flyoutMenu2 = ref.current.lastElementChild;
      if (flyoutMenu2 && flyoutMenu2.classList.contains(menu_default.menu)) {
        const origin = ref.current.getClientRects()[0];
        const rect = flyoutMenu2.getClientRects()[0];
        if (origin && rect) {
          const spaceLeftLeft = origin.x - rect.width;
          const spaceLeftRight = window.innerWidth - origin.x - origin.width - rect.width;
          let xDir = flyoutXDirection;
          if (spaceLeftRight < 0 && xDir !== "left") {
            setFlyoutXDirection("left");
            xDir = "left";
          } else if (spaceLeftLeft < 0 && xDir !== "right") {
            setFlyoutXDirection("right");
            xDir = "right";
          }
          let xOffset = 0;
          if (spaceLeftLeft < 0 && spaceLeftRight < 0) {
            xOffset = xDir === "right" ? -spaceLeftRight : -spaceLeftLeft;
          }
          if (xDir === "left") {
            flyoutMenu2.classList.add(menu_default.modifiers.left);
            flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_m_left_right_offset_default.name, `-${xOffset}px`);
          } else {
            flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_left_offset_default.name, `-${xOffset}px`);
          }
          const spaceLeftBot = window.innerHeight - origin.y - rect.height;
          const spaceLeftTop = window.innerHeight - rect.height;
          if (spaceLeftTop < 0 && spaceLeftBot < 0) {
          } else if (spaceLeftBot < 0) {
            flyoutMenu2.style.setProperty(c_menu_m_flyout_menu_top_offset_default.name, `${spaceLeftBot}px`);
          }
        }
      }
    }
  }, [flyoutVisible, flyoutMenu]);
  React68.useEffect(() => {
    setFlyoutXDirection(flyoutContext.direction);
  }, [flyoutContext]);
  React68.useEffect(() => {
    if (flyoutTarget) {
      if (flyoutVisible) {
        const flyoutMenu2 = flyoutTarget.nextElementSibling;
        const flyoutItems = Array.from(flyoutMenu2.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(menu_default.divider)));
        flyoutItems[0].firstChild.focus();
      } else {
        flyoutTarget.focus();
      }
    }
  }, [flyoutVisible, flyoutTarget]);
  const handleFlyout = (event) => {
    const key = event.key;
    const target2 = event.target;
    const type = event.type;
    if (key === " " || key === "Enter" || key === "ArrowRight" || type === "click") {
      event.stopPropagation();
      event.preventDefault();
      if (!flyoutVisible) {
        showFlyout(true);
        setFlyoutTarget(target2);
      }
    }
    if (key === "Escape" || key === "ArrowLeft") {
      if (flyoutVisible) {
        event.stopPropagation();
        showFlyout(false);
      }
    }
  };
  const onItemSelect = (event, onSelect2) => {
    if (!isAriaDisabled) {
      onSelect2 && onSelect2(event, itemId);
      onClick && onClick(event);
    }
  };
  const _isOnPath = isOnPath && isOnPath || drilldownItemPath && drilldownItemPath.includes(itemId) || false;
  let drill;
  if (direction) {
    if (direction === "down") {
      drill = (event) => onDrillIn && onDrillIn(event, menuId, typeof drilldownMenu === "function" ? drilldownMenu().props.id : drilldownMenu.props.id, itemId);
    } else {
      drill = (event) => onDrillOut && onDrillOut(event, parentMenu, itemId);
    }
  }
  let additionalProps = {};
  if (Component44 === "a") {
    additionalProps = {
      href: to,
      "aria-disabled": isDisabled || isAriaDisabled ? true : null,
      // prevent invalid 'disabled' attribute on <a> tags
      disabled: null,
      target: isExternalLink ? "_blank" : target,
      rel,
      download
    };
  } else if (Component44 === "button") {
    additionalProps = {
      type: "button",
      "aria-disabled": isAriaDisabled ? true : null
    };
  }
  if (isOnPath) {
    additionalProps["aria-expanded"] = true;
  } else if (hasFlyout) {
    additionalProps["aria-haspopup"] = "menu";
    additionalProps["aria-expanded"] = flyoutVisible;
  }
  const getAriaCurrent = () => {
    if (isActive !== null) {
      if (isActive) {
        return "page";
      } else {
        return null;
      }
    } else if (itemId !== null && activeItemId !== null) {
      return itemId === activeItemId;
    }
    return null;
  };
  const getIsSelected = () => {
    if (isSelected !== null) {
      return isSelected;
    } else if (selected !== null && itemId !== null) {
      return Array.isArray(selected) && selected.includes(itemId) || itemId === selected;
    }
    return false;
  };
  const onMouseOver = () => {
    if (disableHover) {
      return;
    }
    if (hasFlyout) {
      showFlyout(true);
    } else {
      setFlyoutRef(null);
    }
  };
  React68.useEffect(() => {
    if (isFocused && ref.current) {
      const itemEl = ref.current;
      const parentListEl = itemEl.parentElement;
      if (parentListEl) {
        const isAboveTop = itemEl.offsetTop - parentListEl.offsetTop < parentListEl.scrollTop;
        const isBelowBottom = itemEl.offsetTop - parentListEl.offsetTop + itemEl.clientHeight;
        if (isAboveTop || isBelowBottom) {
          itemEl.scrollIntoView({ behavior: "auto", block: "nearest" });
        }
      }
    }
  }, [isFocused]);
  const isSelectMenu = menuRole === "listbox";
  const renderItem = React68.createElement(
    React68.Fragment,
    null,
    React68.createElement(GenerateId, null, (randomId) => React68.createElement(
      Component44,
      Object.assign({ id, tabIndex: -1, className: css(menu_default.menuItem, getIsSelected() && !hasCheckbox && menu_default.modifiers.selected, className), "aria-current": getAriaCurrent() }, !hasCheckbox && { disabled: isDisabled, "aria-label": ariaLabel }, !hasCheckbox && !flyoutMenu && { role: isSelectMenu ? "option" : "menuitem" }, !hasCheckbox && !flyoutMenu && isSelectMenu && { "aria-selected": getIsSelected() }, { ref: innerRef }, !hasCheckbox && {
        onClick: (event) => {
          if (!isAriaDisabled) {
            onItemSelect(event, onSelect);
            drill && drill(event);
            flyoutMenu && handleFlyout(event);
          } else {
            event.preventDefault();
          }
        }
      }, hasCheckbox && { htmlFor: randomId }, additionalProps),
      React68.createElement(
        "span",
        { className: css(menu_default.menuItemMain) },
        direction === "up" && React68.createElement(
          "span",
          { className: css(menu_default.menuItemToggleIcon) },
          React68.createElement(angle_left_icon_default, { "aria-hidden": true })
        ),
        icon && React68.createElement("span", { className: css(menu_default.menuItemIcon) }, icon),
        hasCheckbox && React68.createElement(
          "span",
          { className: css(menu_default.menuItemCheck) },
          React68.createElement(Checkbox, { id: randomId, component: "span", isChecked: isSelected || false, onChange: (event) => onItemSelect(event, onSelect), isDisabled, "aria-disabled": isAriaDisabled })
        ),
        React68.createElement("span", { className: css(menu_default.menuItemText) }, children),
        isExternalLink && React68.createElement(
          "span",
          { className: css(menu_default.menuItemExternalIcon) },
          React68.createElement(external_link_alt_icon_default, { "aria-hidden": true })
        ),
        (flyoutMenu || direction === "down") && React68.createElement(
          "span",
          { className: css(menu_default.menuItemToggleIcon) },
          React68.createElement(angle_right_icon_default, { "aria-hidden": true })
        ),
        getIsSelected() && React68.createElement(
          "span",
          { className: css(menu_default.menuItemSelectIcon) },
          React68.createElement(check_icon_default, { "aria-hidden": true })
        )
      ),
      description && direction !== "up" && React68.createElement(
        "span",
        { className: css(menu_default.menuItemDescription) },
        React68.createElement("span", null, description)
      )
    )),
    flyoutVisible && React68.createElement(
      MenuContext.Provider,
      { value: { disableHover } },
      React68.createElement(FlyoutContext.Provider, { value: { direction: flyoutXDirection } }, flyoutMenu)
    ),
    typeof drilldownMenu === "function" ? drilldownMenu() : drilldownMenu,
    React68.createElement(
      MenuItemContext.Provider,
      { value: { itemId, isDisabled } },
      actions,
      isFavorited !== null && React68.createElement(MenuItemAction, { icon: "favorites", isFavorited, "aria-label": isFavorited ? "starred" : "not starred", onClick: (event) => onActionClick(event, itemId), tabIndex: -1, actionId: "fav" })
    )
  );
  return React68.createElement("li", Object.assign({ className: css(menu_default.menuListItem, isDisabled && menu_default.modifiers.disabled, isAriaDisabled && menu_default.modifiers.ariaDisabled, _isOnPath && menu_default.modifiers.currentPath, isLoadButton && menu_default.modifiers.load, isLoading && menu_default.modifiers.loading, isFocused && menu_default.modifiers.focus, isDanger && menu_default.modifiers.danger, className), onMouseOver: () => {
    if (!isAriaDisabled) {
      onMouseOver();
    }
  } }, flyoutMenu && !isAriaDisabled && { onKeyDown: handleFlyout }, { ref, role: !hasCheckbox ? "none" : "menuitem" }, hasCheckbox && { "aria-label": ariaLabel }, props), tooltipProps ? React68.createElement(Tooltip, Object.assign({}, tooltipProps), renderItem) : renderItem);
};
var MenuItem = React68.forwardRef((props, ref) => React68.createElement(MenuItemBase, Object.assign({}, props, { innerRef: ref })));
MenuItem.displayName = "MenuItem";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuList.js
init_tslib_es6();
var React69 = __toESM(require_react());
var MenuList = (_a) => {
  var { children = null, className, isAriaMultiselectable = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isAriaMultiselectable", "aria-label"]);
  const { role } = React69.useContext(MenuContext);
  return React69.createElement("ul", Object.assign({ role }, role === "listbox" && { "aria-multiselectable": isAriaMultiselectable }, { className: css(menu_default.menuList, className), "aria-label": ariaLabel }, props), children);
};
MenuList.displayName = "MenuList";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/DrilldownMenu.js
init_tslib_es6();
var import_react6 = __toESM(require_react());
var DrilldownMenu = (_a) => {
  var { children, id, isMenuDrilledIn = false, getHeight } = _a, props = __rest(_a, ["children", "id", "isMenuDrilledIn", "getHeight"]);
  return (
    /* eslint-disable @typescript-eslint/no-unused-vars */
    import_react6.default.createElement(MenuContext.Consumer, null, (_a2) => {
      var { menuId, parentMenu, flyoutRef, setFlyoutRef, disableHover } = _a2, context = __rest(_a2, ["menuId", "parentMenu", "flyoutRef", "setFlyoutRef", "disableHover"]);
      return import_react6.default.createElement(
        Menu,
        Object.assign({ id, parentMenu: menuId, isMenuDrilledIn, isRootMenu: false, ref: import_react6.default.createRef() }, context, props),
        import_react6.default.createElement(
          MenuContent,
          { getHeight },
          import_react6.default.createElement(MenuList, null, children)
        )
      );
    })
  );
};
DrilldownMenu.displayName = "DrilldownMenu";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuBreadcrumb.js
init_tslib_es6();
var import_react7 = __toESM(require_react());
var MenuBreadcrumb = (_a) => {
  var { children } = _a, props = __rest(_a, ["children"]);
  return import_react7.default.createElement("div", Object.assign({ className: css(menu_default.menuBreadcrumb) }, props), children);
};
MenuBreadcrumb.displayName = "MenuBreadcrumb";

// node_modules/@patternfly/react-core/dist/esm/components/Menu/MenuContainer.js
var import_react8 = __toESM(require_react());
var MenuContainer = ({ menu, menuRef, isOpen, toggle, toggleRef, onOpenChange, zIndex = 9999, popperProps, onOpenChangeKeys = ["Escape", "Tab"] }) => {
  import_react8.default.useEffect(() => {
    const handleMenuKeys = (event) => {
      var _a, _b, _c;
      if (isOpen && onOpenChange && ((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
        if (onOpenChangeKeys.includes(event.key)) {
          onOpenChange(false);
          (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
        }
      }
    };
    const handleClick = (event) => {
      var _a, _b, _c;
      if (isOpen && ((_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) && event.detail === 0) {
        setTimeout(() => {
          var _a2;
          const firstElement = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector('li button:not(:disabled),li input:not(:disabled),li a:not([aria-disabled="true"])');
          firstElement && firstElement.focus();
        }, 0);
      }
      if (isOpen && onOpenChange && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
        if (isOpen && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
          onOpenChange(false);
        }
      }
    };
    window.addEventListener("keydown", handleMenuKeys);
    window.addEventListener("click", handleClick);
    return () => {
      window.removeEventListener("keydown", handleMenuKeys);
      window.removeEventListener("click", handleClick);
    };
  }, [isOpen, menuRef, onOpenChange, onOpenChangeKeys, toggleRef]);
  return import_react8.default.createElement(Popper, Object.assign({ trigger: toggle, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex }, popperProps));
};
MenuContainer.displayName = "MenuContainer";

// node_modules/@patternfly/react-core/dist/esm/components/Select/Select.js
var SelectBase = (_a) => {
  var { children, className, onSelect, isOpen, selected, toggle, shouldFocusToggleOnSelect = false, onOpenChange, onOpenChangeKeys = ["Escape", "Tab"], isPlain, innerRef, zIndex = 9999, role = "listbox", popperProps } = _a, props = __rest(_a, ["children", "className", "onSelect", "isOpen", "selected", "toggle", "shouldFocusToggleOnSelect", "onOpenChange", "onOpenChangeKeys", "isPlain", "innerRef", "zIndex", "role", "popperProps"]);
  const localMenuRef = import_react9.default.useRef();
  const localToggleRef = import_react9.default.useRef();
  const menuRef = innerRef || localMenuRef;
  const toggleRef = typeof toggle === "function" || typeof toggle !== "function" && !toggle.toggleRef ? localToggleRef : toggle === null || toggle === void 0 ? void 0 : toggle.toggleRef;
  import_react9.default.useEffect(() => {
    const handleMenuKeys = (event) => {
      var _a2, _b, _c;
      if (isOpen && onOpenChange && (((_a2 = menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)))) {
        if (onOpenChangeKeys.includes(event.key)) {
          event.preventDefault();
          onOpenChange(false);
          (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
        }
      }
    };
    const handleClick = (event) => {
      var _a2, _b, _c;
      if (isOpen && ((_a2 = toggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) && event.detail === 0) {
        setTimeout(() => {
          var _a3;
          const firstElement = (_a3 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a3 === void 0 ? void 0 : _a3.querySelector("li button:not(:disabled),li input:not(:disabled)");
          firstElement && firstElement.focus();
        }, 0);
      }
      if (isOpen && onOpenChange && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
        if (isOpen && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
          onOpenChange(false);
        }
      }
    };
    window.addEventListener("keydown", handleMenuKeys);
    window.addEventListener("click", handleClick);
    return () => {
      window.removeEventListener("keydown", handleMenuKeys);
      window.removeEventListener("click", handleClick);
    };
  }, [isOpen, menuRef, toggleRef, onOpenChange, onOpenChangeKeys]);
  const menu = import_react9.default.createElement(
    Menu,
    Object.assign({ role, className: css(className), ref: menuRef, onSelect: (event, value) => {
      onSelect && onSelect(event, value);
      shouldFocusToggleOnSelect && toggleRef.current.focus();
    }, isPlain, selected }, getOUIAProps(Select.displayName, props.ouiaId !== void 0 ? props.ouiaId : getDefaultOUIAId(Select.displayName), props.ouiaSafe !== void 0 ? props.ouiaSafe : true), props),
    import_react9.default.createElement(MenuContent, null, children)
  );
  return import_react9.default.createElement(Popper, Object.assign({ trigger: typeof toggle === "function" ? toggle(toggleRef) : toggle.toggleNode, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex }, popperProps));
};
var Select = import_react9.default.forwardRef((props, ref) => import_react9.default.createElement(SelectBase, Object.assign({ innerRef: ref }, props)));
Select.displayName = "Select";

// node_modules/@patternfly/react-core/dist/esm/components/Select/SelectGroup.js
init_tslib_es6();
var import_react10 = __toESM(require_react());
var SelectGroup = (_a) => {
  var { children, className, label } = _a, props = __rest(_a, ["children", "className", "label"]);
  return import_react10.default.createElement(MenuGroup, Object.assign({ className: css(className), label }, props), children);
};
SelectGroup.displayName = "SelectGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Select/SelectList.js
init_tslib_es6();
var import_react11 = __toESM(require_react());
var SelectList = (_a) => {
  var { children, className, isAriaMultiselectable = false } = _a, props = __rest(_a, ["children", "className", "isAriaMultiselectable"]);
  return import_react11.default.createElement(MenuList, Object.assign({ isAriaMultiselectable, className: css(className) }, props), children);
};
SelectList.displayName = "SelectList";

// node_modules/@patternfly/react-core/dist/esm/components/Select/SelectOption.js
init_tslib_es6();
var import_react12 = __toESM(require_react());
var SelectOptionBase = (_a) => {
  var { children, className, innerRef, value } = _a, props = __rest(_a, ["children", "className", "innerRef", "value"]);
  return import_react12.default.createElement(MenuItem, Object.assign({ itemId: value, ref: innerRef, className: css(className) }, props), children);
};
var SelectOption = import_react12.default.forwardRef((props, ref) => import_react12.default.createElement(SelectOptionBase, Object.assign({}, props, { innerRef: ref })));
SelectOption.displayName = "SelectOption";

// node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggle.js
init_tslib_es6();
var React77 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/MenuToggle/menu-toggle.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/MenuToggle/menu-toggle.css";
var menu_toggle_default = {
  "check": "pf-v5-c-check",
  "checkInput": "pf-v5-c-check__input",
  "menuToggle": "pf-v5-c-menu-toggle",
  "menuToggleButton": "pf-v5-c-menu-toggle__button",
  "menuToggleControls": "pf-v5-c-menu-toggle__controls",
  "menuToggleCount": "pf-v5-c-menu-toggle__count",
  "menuToggleIcon": "pf-v5-c-menu-toggle__icon",
  "menuToggleText": "pf-v5-c-menu-toggle__text",
  "menuToggleToggleIcon": "pf-v5-c-menu-toggle__toggle-icon",
  "modifiers": {
    "primary": "pf-m-primary",
    "secondary": "pf-m-secondary",
    "expanded": "pf-m-expanded",
    "plain": "pf-m-plain",
    "text": "pf-m-text",
    "fullHeight": "pf-m-full-height",
    "disabled": "pf-m-disabled",
    "typeahead": "pf-m-typeahead",
    "splitButton": "pf-m-split-button",
    "action": "pf-m-action",
    "active": "pf-m-active",
    "fullWidth": "pf-m-full-width"
  },
  "textInputGroup": "pf-v5-c-text-input-group",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-icons/dist/esm/icons/caret-down-icon.js
var CaretDownIconConfig = {
  name: "CaretDownIcon",
  height: 512,
  width: 320,
  svgPath: "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z",
  yOffset: 0,
  xOffset: 0
};
var CaretDownIcon = createIcon(CaretDownIconConfig);
var caret_down_icon_default = CaretDownIcon;

// node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggle.js
var MenuToggleBase = class extends React77.Component {
  constructor() {
    super(...arguments);
    this.displayName = "MenuToggleBase";
  }
  render() {
    const _a = this.props, { children, className, icon, badge, isExpanded, isDisabled, isFullHeight, isFullWidth, splitButtonOptions, variant, innerRef, onClick, "aria-label": ariaLabel } = _a, otherProps = __rest(_a, ["children", "className", "icon", "badge", "isExpanded", "isDisabled", "isFullHeight", "isFullWidth", "splitButtonOptions", "variant", "innerRef", "onClick", "aria-label"]);
    const isPlain = variant === "plain";
    const isPlainText = variant === "plainText";
    const isTypeahead = variant === "typeahead";
    const toggleControls = React77.createElement(
      "span",
      { className: css(menu_toggle_default.menuToggleControls) },
      React77.createElement(
        "span",
        { className: css(menu_toggle_default.menuToggleToggleIcon) },
        React77.createElement(caret_down_icon_default, { "aria-hidden": true })
      )
    );
    const content = React77.createElement(
      React77.Fragment,
      null,
      icon && React77.createElement("span", { className: css(menu_toggle_default.menuToggleIcon) }, icon),
      isTypeahead ? children : React77.createElement("span", { className: css(menu_toggle_default.menuToggleText) }, children),
      React77.isValidElement(badge) && React77.createElement("span", { className: css(menu_toggle_default.menuToggleCount) }, badge),
      isTypeahead ? React77.createElement("button", { type: "button", className: css(menu_toggle_default.menuToggleButton), "aria-expanded": isExpanded, onClick, "aria-label": "Menu toggle" }, toggleControls) : toggleControls
    );
    const commonStyles = css(menu_toggle_default.menuToggle, isExpanded && menu_toggle_default.modifiers.expanded, variant === "primary" && menu_toggle_default.modifiers.primary, variant === "secondary" && menu_toggle_default.modifiers.secondary, (isPlain || isPlainText) && menu_toggle_default.modifiers.plain, isPlainText && menu_toggle_default.modifiers.text, isFullHeight && menu_toggle_default.modifiers.fullHeight, isFullWidth && menu_toggle_default.modifiers.fullWidth, isDisabled && menu_toggle_default.modifiers.disabled, className);
    const componentProps = Object.assign(Object.assign({ children: isPlain ? children : content }, isDisabled && { disabled: true }), otherProps);
    if (isTypeahead) {
      return React77.createElement("div", Object.assign({ ref: innerRef, className: css(commonStyles, menu_toggle_default.modifiers.typeahead) }, componentProps));
    }
    if (splitButtonOptions) {
      return React77.createElement(
        "div",
        { ref: innerRef, className: css(commonStyles, menu_toggle_default.modifiers.splitButton, (splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.variant) === "action" && menu_toggle_default.modifiers.action) },
        splitButtonOptions === null || splitButtonOptions === void 0 ? void 0 : splitButtonOptions.items,
        React77.createElement("button", Object.assign({ className: css(menu_toggle_default.menuToggleButton), type: "button", "aria-expanded": isExpanded, "aria-label": ariaLabel, disabled: isDisabled, onClick }, otherProps), toggleControls)
      );
    }
    return React77.createElement("button", Object.assign({ className: css(commonStyles), type: "button", "aria-label": ariaLabel, "aria-expanded": isExpanded, ref: innerRef, disabled: isDisabled, onClick }, componentProps));
  }
};
MenuToggleBase.defaultProps = {
  className: "",
  isExpanded: false,
  isDisabled: false,
  isFullWidth: false,
  isFullHeight: false
};
var MenuToggle = React77.forwardRef((props, ref) => React77.createElement(MenuToggleBase, Object.assign({ innerRef: ref }, props)));
MenuToggle.displayName = "MenuToggle";

// node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggleAction.js
init_tslib_es6();
var React78 = __toESM(require_react());
var MenuToggleAction = class extends React78.Component {
  render() {
    const _a = this.props, { id, className, onClick, isDisabled, children } = _a, props = __rest(_a, ["id", "className", "onClick", "isDisabled", "children"]);
    return React78.createElement("button", Object.assign({ id, className: css(menu_toggle_default.menuToggleButton, className), onClick, type: "button", disabled: isDisabled }, props), children);
  }
};
MenuToggleAction.displayName = "MenuToggleAction";
MenuToggleAction.defaultProps = {
  className: "",
  isDisabled: false,
  onClick: () => {
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/MenuToggle/MenuToggleCheckbox.js
init_tslib_es6();
var React79 = __toESM(require_react());
var MenuToggleCheckbox = class _MenuToggleCheckbox extends React79.Component {
  constructor(props) {
    super(props);
    this.handleChange = (event) => {
      this.props.onChange(event.target.checked, event);
    };
    this.calculateChecked = () => {
      const { isChecked, defaultChecked } = this.props;
      if (isChecked === null) {
        return false;
      } else if (isChecked !== void 0) {
        return isChecked;
      }
      return defaultChecked;
    };
    this.state = {
      ouiaStateId: getDefaultOUIAId(_MenuToggleCheckbox.displayName)
    };
  }
  render() {
    const _a = this.props, {
      className,
      isValid,
      isDisabled,
      isChecked,
      children,
      ouiaId,
      ouiaSafe,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      onChange,
      defaultChecked,
      id
    } = _a, props = __rest(_a, ["className", "isValid", "isDisabled", "isChecked", "children", "ouiaId", "ouiaSafe", "onChange", "defaultChecked", "id"]);
    const text = children && React79.createElement("span", { className: css(check_default.checkLabel, className), "aria-hidden": "true", id }, children);
    return React79.createElement(
      "label",
      { className: css(check_default.check, !children && check_default.modifiers.standalone, className), htmlFor: id },
      React79.createElement("input", Object.assign({ className: css(check_default.checkInput) }, this.calculateChecked() !== void 0 && { onChange: this.handleChange }, { name: id, type: "checkbox", ref: (elem) => elem && (elem.indeterminate = isChecked === null), "aria-invalid": !isValid, disabled: isDisabled }, defaultChecked !== void 0 ? { defaultChecked } : { checked: isChecked }, getOUIAProps(_MenuToggleCheckbox.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props)),
      text
    );
  }
};
MenuToggleCheckbox.displayName = "MenuToggleCheckbox";
MenuToggleCheckbox.defaultProps = {
  isValid: true,
  isDisabled: false,
  onChange: () => void 0
};

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js
init_tslib_es6();
var React80 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.css";
var input_group_default = {
  "inputGroup": "pf-v5-c-input-group",
  "inputGroupItem": "pf-v5-c-input-group__item",
  "inputGroupText": "pf-v5-c-input-group__text",
  "modifiers": {
    "box": "pf-m-box",
    "plain": "pf-m-plain",
    "disabled": "pf-m-disabled",
    "fill": "pf-m-fill"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js
var InputGroupBase = (_a) => {
  var { className, children, innerRef } = _a, props = __rest(_a, ["className", "children", "innerRef"]);
  const ref = React80.useRef(null);
  const inputGroupRef = innerRef || ref;
  return React80.createElement("div", Object.assign({ ref: inputGroupRef, className: css(input_group_default.inputGroup, className) }, props), children);
};
InputGroupBase.displayName = "InputGroupBase";
var InputGroup = React80.forwardRef((props, ref) => React80.createElement(InputGroupBase, Object.assign({ innerRef: ref }, props)));
InputGroup.displayName = "InputGroup";

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupItem.js
init_tslib_es6();
var React81 = __toESM(require_react());
var InputGroupItem = (_a) => {
  var { className, children, isFill = false, isBox = false, isPlain, isDisabled } = _a, props = __rest(_a, ["className", "children", "isFill", "isBox", "isPlain", "isDisabled"]);
  return React81.createElement("div", Object.assign({ className: css(input_group_default.inputGroupItem, isFill && input_group_default.modifiers.fill, isBox && input_group_default.modifiers.box, isPlain && input_group_default.modifiers.plain, isDisabled && input_group_default.modifiers.disabled, className) }, props), children);
};
InputGroupItem.displayName = "InputGroupItem";

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupText.js
init_tslib_es6();
var React82 = __toESM(require_react());
var InputGroupText = (_a) => {
  var { className, component = "span", children, isPlain, isDisabled } = _a, props = __rest(_a, ["className", "component", "children", "isPlain", "isDisabled"]);
  const Component44 = component;
  return React82.createElement(
    InputGroupItem,
    { isPlain, isBox: true, isDisabled },
    React82.createElement(Component44, Object.assign({ className: css(input_group_default.inputGroupText, className) }, props), children)
  );
};
InputGroupText.displayName = "InputGroupText";

// node_modules/@patternfly/react-styles/css/components/CalendarMonth/calendar-month.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/CalendarMonth/calendar-month.css";
var calendar_month_default = {
  "calendarMonth": "pf-v5-c-calendar-month",
  "calendarMonthCalendar": "pf-v5-c-calendar-month__calendar",
  "calendarMonthDate": "pf-v5-c-calendar-month__date",
  "calendarMonthDatesCell": "pf-v5-c-calendar-month__dates-cell",
  "calendarMonthDatesRow": "pf-v5-c-calendar-month__dates-row",
  "calendarMonthDay": "pf-v5-c-calendar-month__day",
  "calendarMonthDays": "pf-v5-c-calendar-month__days",
  "calendarMonthHeader": "pf-v5-c-calendar-month__header",
  "calendarMonthHeaderMonth": "pf-v5-c-calendar-month__header-month",
  "calendarMonthHeaderNavControl": "pf-v5-c-calendar-month__header-nav-control",
  "calendarMonthHeaderYear": "pf-v5-c-calendar-month__header-year",
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "prevMonth": "pf-m-prev-month",
    "nextMonth": "pf-m-next-month",
    "current": "pf-m-current",
    "inRange": "pf-m-in-range",
    "startRange": "pf-m-start-range",
    "endRange": "pf-m-end-range",
    "adjacentMonth": "pf-m-adjacent-month",
    "selected": "pf-m-selected",
    "disabled": "pf-m-disabled",
    "hover": "pf-m-hover",
    "focus": "pf-m-focus"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/CalendarMonth/CalendarMonth.js
var Weekday;
(function(Weekday2) {
  Weekday2[Weekday2["Sunday"] = 0] = "Sunday";
  Weekday2[Weekday2["Monday"] = 1] = "Monday";
  Weekday2[Weekday2["Tuesday"] = 2] = "Tuesday";
  Weekday2[Weekday2["Wednesday"] = 3] = "Wednesday";
  Weekday2[Weekday2["Thursday"] = 4] = "Thursday";
  Weekday2[Weekday2["Friday"] = 5] = "Friday";
  Weekday2[Weekday2["Saturday"] = 6] = "Saturday";
})(Weekday || (Weekday = {}));
var buildCalendar = (year, month, weekStart, validators) => {
  const defaultDate = new Date(year, month);
  const firstDayOfWeek = new Date(defaultDate);
  firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart);
  const calendarWeeks = [];
  if (firstDayOfWeek.getMonth() === defaultDate.getMonth() && firstDayOfWeek.getDate() !== 1) {
    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 7);
  }
  for (let i = 0; i < 6; i++) {
    const week = [];
    for (let j = 0; j < 7; j++) {
      const date = new Date(firstDayOfWeek);
      week.push({
        date,
        isValid: validators.every((validator) => validator(date))
      });
      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);
    }
    calendarWeeks.push(week);
    if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {
      break;
    }
  }
  return calendarWeeks;
};
var isSameDate = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
var today = /* @__PURE__ */ new Date();
var CalendarMonth = (_a) => {
  var {
    date: dateProp,
    locale = void 0,
    monthFormat = (date) => date.toLocaleDateString(locale, { month: "long" }),
    weekdayFormat = (date) => date.toLocaleDateString(locale, { weekday: "narrow" }),
    longWeekdayFormat = (date) => date.toLocaleDateString(locale, { weekday: "long" }),
    dayFormat = (date) => date.getDate(),
    weekStart = 0,
    // Use the American Sunday as a default
    onChange = () => {
    },
    validators = [() => true],
    className,
    onSelectToggle = () => {
    },
    onMonthChange = () => {
    },
    rangeStart,
    prevMonthAriaLabel = "Previous month",
    nextMonthAriaLabel = "Next month",
    yearInputAriaLabel = "Select year",
    cellAriaLabel,
    isDateFocused = false,
    inlineProps
  } = _a, props = __rest(_a, ["date", "locale", "monthFormat", "weekdayFormat", "longWeekdayFormat", "dayFormat", "weekStart", "onChange", "validators", "className", "onSelectToggle", "onMonthChange", "rangeStart", "prevMonthAriaLabel", "nextMonthAriaLabel", "yearInputAriaLabel", "cellAriaLabel", "isDateFocused", "inlineProps"]);
  const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((monthNum) => new Date(1990, monthNum)).map(monthFormat);
  const [isSelectOpen, setIsSelectOpen] = import_react13.default.useState(false);
  const getInitialDate = () => {
    if (isValidDate(dateProp)) {
      return dateProp;
    }
    if (isValidDate(rangeStart)) {
      return rangeStart;
    }
    return today;
  };
  const initialDate = getInitialDate();
  const [focusedDate, setFocusedDate] = import_react13.default.useState(initialDate);
  const yearFormat = (date) => date.getFullYear();
  const yearFormatted = yearFormat(focusedDate);
  const [yearInput, setYearInput] = import_react13.default.useState(yearFormatted.toString());
  const [hoveredDate, setHoveredDate] = import_react13.default.useState(new Date(focusedDate));
  const focusRef = import_react13.default.useRef();
  const [hiddenMonthId] = import_react13.default.useState(getUniqueId("hidden-month-span"));
  const [shouldFocus, setShouldFocus] = import_react13.default.useState(false);
  const isValidated = (date) => validators.every((validator) => validator(date));
  const focusedDateValidated = isValidated(focusedDate);
  (0, import_react13.useEffect)(() => {
    if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {
      setFocusedDate(dateProp);
    } else if (!dateProp) {
      setFocusedDate(today);
    }
  }, [dateProp]);
  (0, import_react13.useEffect)(() => {
    if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {
      focusRef.current.focus();
    }
  }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);
  const onMonthClick = (ev, newDate) => {
    setFocusedDate(newDate);
    setHoveredDate(newDate);
    setShouldFocus(false);
    onMonthChange(ev, newDate);
    setYearInput(yearFormat(newDate).toString());
  };
  const onKeyDown = (ev) => {
    const newDate = new Date(focusedDate);
    if (ev.key === "ArrowUp") {
      newDate.setDate(newDate.getDate() - 7);
    } else if (ev.key === "ArrowRight") {
      newDate.setDate(newDate.getDate() + 1);
    } else if (ev.key === "ArrowDown") {
      newDate.setDate(newDate.getDate() + 7);
    } else if (ev.key === "ArrowLeft") {
      newDate.setDate(newDate.getDate() - 1);
    }
    if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {
      ev.preventDefault();
      setFocusedDate(newDate);
      setHoveredDate(newDate);
      setShouldFocus(true);
    }
  };
  const changeYear = (newYear) => changeMonth(focusedDate.getMonth(), newYear);
  const changeMonth = (newMonth, newYear) => new Date(newYear !== null && newYear !== void 0 ? newYear : focusedDate.getFullYear(), newMonth, 1);
  const MIN_YEAR = 1900;
  const MAX_YEAR = 2100;
  const handleYearInputChange = (event, yearStr) => {
    if (!/^\d{0,4}$/.test(yearStr)) {
      return;
    }
    setYearInput(yearStr);
    if (yearStr.length === 4) {
      const yearNum = Number(yearStr);
      if (yearNum >= MIN_YEAR && yearNum <= MAX_YEAR) {
        const newDate = changeYear(yearNum);
        setFocusedDate(newDate);
        setHoveredDate(newDate);
        setShouldFocus(false);
        event.target.focus();
        onMonthChange(event, newDate);
      } else {
        setYearInput(yearFormatted.toString());
      }
    }
  };
  const addMonth = (toAdd) => {
    let newMonth = focusedDate.getMonth() + toAdd;
    let newYear = focusedDate.getFullYear();
    if (newMonth === -1) {
      newMonth = 11;
      newYear--;
    } else if (newMonth === 12) {
      newMonth = 0;
      newYear++;
    }
    return changeMonth(newMonth, newYear);
  };
  const prevMonth = addMonth(-1);
  const nextMonth = addMonth(1);
  const focusedYear = focusedDate.getFullYear();
  const focusedMonth = focusedDate.getMonth();
  const calendar = import_react13.default.useMemo(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [focusedYear, focusedMonth, weekStart, validators]);
  if (!focusedDateValidated) {
    const toFocus = calendar.reduce((acc, cur) => [...acc, ...cur], []).filter(({ date, isValid }) => isValid && date.getMonth() === focusedMonth).map(({ date }) => ({ date, days: Math.abs(focusedDate.getTime() - date.getTime()) })).sort((o1, o2) => o1.days - o2.days).map(({ date }) => date)[0];
    if (toFocus) {
      setFocusedDate(toFocus);
      setHoveredDate(toFocus);
    }
  }
  const isHoveredDateValid = isValidated(hoveredDate);
  const monthFormatted = monthFormat(focusedDate);
  const calendarToRender = import_react13.default.createElement(
    "div",
    Object.assign({ className: css(calendar_month_default.calendarMonth, className) }, props),
    import_react13.default.createElement(
      "div",
      { className: calendar_month_default.calendarMonthHeader },
      import_react13.default.createElement(
        "div",
        { className: css(calendar_month_default.calendarMonthHeaderNavControl, calendar_month_default.modifiers.prevMonth) },
        import_react13.default.createElement(
          Button,
          { variant: "plain", "aria-label": prevMonthAriaLabel, onClick: (ev) => onMonthClick(ev, prevMonth) },
          import_react13.default.createElement(angle_left_icon_default, { "aria-hidden": true })
        )
      ),
      import_react13.default.createElement(
        InputGroup,
        null,
        import_react13.default.createElement(
          InputGroupItem,
          { isFill: true },
          import_react13.default.createElement(
            "div",
            { className: calendar_month_default.calendarMonthHeaderMonth },
            import_react13.default.createElement("span", { id: hiddenMonthId, hidden: true }, "Month"),
            import_react13.default.createElement(
              Select,
              { toggle: (toggleRef) => import_react13.default.createElement(MenuToggle, { ref: toggleRef, onClick: () => setIsSelectOpen(!isSelectOpen), isExpanded: isSelectOpen, style: { width: "140px" } }, monthFormatted), "aria-labelledby": hiddenMonthId, isOpen: isSelectOpen, onOpenChange: (isOpen) => {
                setIsSelectOpen(isOpen);
                onSelectToggle(isOpen);
              }, onSelect: (ev, monthNum) => {
                setTimeout(() => {
                  setIsSelectOpen(false);
                  onSelectToggle(false);
                  const newDate = changeMonth(Number(monthNum));
                  setFocusedDate(newDate);
                  setHoveredDate(newDate);
                  setShouldFocus(false);
                  onMonthChange(ev, newDate);
                }, 0);
              }, selected: monthFormatted },
              import_react13.default.createElement(SelectList, null, longMonths.map((longMonth, index) => import_react13.default.createElement(SelectOption, { key: index, value: index, isSelected: longMonth === monthFormatted }, longMonth)))
            )
          )
        ),
        import_react13.default.createElement(
          InputGroupItem,
          null,
          import_react13.default.createElement(
            "div",
            { className: calendar_month_default.calendarMonthHeaderYear },
            import_react13.default.createElement(TextInput, { "aria-label": yearInputAriaLabel, type: "number", value: yearInput, onChange: handleYearInputChange })
          )
        )
      ),
      import_react13.default.createElement(
        "div",
        { className: css(calendar_month_default.calendarMonthHeaderNavControl, calendar_month_default.modifiers.nextMonth) },
        import_react13.default.createElement(
          Button,
          { variant: "plain", "aria-label": nextMonthAriaLabel, onClick: (ev) => onMonthClick(ev, nextMonth) },
          import_react13.default.createElement(angle_right_icon_default, { "aria-hidden": true })
        )
      )
    ),
    import_react13.default.createElement(
      "table",
      { className: calendar_month_default.calendarMonthCalendar },
      import_react13.default.createElement(
        "thead",
        { className: calendar_month_default.calendarMonthDays },
        import_react13.default.createElement("tr", null, calendar[0].map(({ date }, index) => import_react13.default.createElement(
          "th",
          { key: index, className: calendar_month_default.calendarMonthDay, scope: "col" },
          import_react13.default.createElement("span", { className: "pf-v5-screen-reader" }, longWeekdayFormat(date)),
          import_react13.default.createElement("span", { "aria-hidden": true }, weekdayFormat(date))
        )))
      ),
      import_react13.default.createElement("tbody", { onKeyDown }, calendar.map((week, index) => import_react13.default.createElement("tr", { key: index, className: calendar_month_default.calendarMonthDatesRow }, week.map(({ date, isValid }, index2) => {
        const dayFormatted = dayFormat(date);
        const isToday = isSameDate(date, today);
        const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);
        const isFocused = isSameDate(date, focusedDate);
        const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();
        const isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);
        let isInRange = false;
        let isRangeEnd = false;
        if (isValidDate(rangeStart) && isValidDate(dateProp)) {
          isInRange = date > rangeStart && date < dateProp;
          isRangeEnd = isSameDate(date, dateProp);
        } else if (isValidDate(rangeStart) && isHoveredDateValid) {
          if (hoveredDate > rangeStart || isSameDate(hoveredDate, rangeStart)) {
            isInRange = date > rangeStart && date < hoveredDate;
            isRangeEnd = isSameDate(date, hoveredDate);
          }
        }
        return import_react13.default.createElement(
          "td",
          { key: index2, className: css(calendar_month_default.calendarMonthDatesCell, isAdjacentMonth && calendar_month_default.modifiers.adjacentMonth, isToday && calendar_month_default.modifiers.current, (isSelected || isRangeStart) && calendar_month_default.modifiers.selected, !isValid && calendar_month_default.modifiers.disabled, (isInRange || isRangeStart || isRangeEnd) && calendar_month_default.modifiers.inRange, isRangeStart && calendar_month_default.modifiers.startRange, isRangeEnd && calendar_month_default.modifiers.endRange) },
          import_react13.default.createElement("button", Object.assign({ className: css(calendar_month_default.calendarMonthDate, isRangeEnd && calendar_month_default.modifiers.hover, !isValid && calendar_month_default.modifiers.disabled), type: "button", onClick: (event) => onChange(event, date), onMouseOver: () => setHoveredDate(date), tabIndex: isFocused ? 0 : -1, disabled: !isValid, "aria-label": cellAriaLabel ? cellAriaLabel(date) : `${dayFormat(date)} ${monthFormat(date)} ${yearFormat(date)}` }, isFocused && { ref: focusRef }), dayFormatted)
        );
      }))))
    )
  );
  if (inlineProps !== void 0) {
    const Component44 = inlineProps.component ? inlineProps.component : "article";
    return import_react13.default.createElement(
      Component44,
      Object.assign({}, inlineProps.ariaLabelledby && { "aria-labelledby": inlineProps.ariaLabelledby }),
      inlineProps.title,
      calendarToRender
    );
  }
  return calendarToRender;
};
CalendarMonth.displayName = "CalendarMonth";

// node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js
init_tslib_es6();
var React84 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Card/card.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Card/card.css";
var card_default = {
  "card": "pf-v5-c-card",
  "cardActions": "pf-v5-c-card__actions",
  "cardBody": "pf-v5-c-card__body",
  "cardExpandableContent": "pf-v5-c-card__expandable-content",
  "cardFooter": "pf-v5-c-card__footer",
  "cardHeader": "pf-v5-c-card__header",
  "cardHeaderMain": "pf-v5-c-card__header-main",
  "cardHeaderToggle": "pf-v5-c-card__header-toggle",
  "cardHeaderToggleIcon": "pf-v5-c-card__header-toggle-icon",
  "cardSelectableActions": "pf-v5-c-card__selectable-actions",
  "cardSrInput": "pf-v5-c-card__sr-input",
  "cardTitle": "pf-v5-c-card__title",
  "cardTitleText": "pf-v5-c-card__title-text",
  "check": "pf-v5-c-check",
  "checkInput": "pf-v5-c-check__input",
  "checkLabel": "pf-v5-c-check__label",
  "dirRtl": "pf-v5-m-dir-rtl",
  "divider": "pf-v5-c-divider",
  "modifiers": {
    "selectable": "pf-m-selectable",
    "clickable": "pf-m-clickable",
    "selected": "pf-m-selected",
    "current": "pf-m-current",
    "disabled": "pf-m-disabled",
    "hoverableRaised": "pf-m-hoverable-raised",
    "selectableRaised": "pf-m-selectable-raised",
    "nonSelectableRaised": "pf-m-non-selectable-raised",
    "selectedRaised": "pf-m-selected-raised",
    "compact": "pf-m-compact",
    "displayLg": "pf-m-display-lg",
    "flat": "pf-m-flat",
    "plain": "pf-m-plain",
    "rounded": "pf-m-rounded",
    "expanded": "pf-m-expanded",
    "fullHeight": "pf-m-full-height",
    "toggleRight": "pf-m-toggle-right",
    "noOffset": "pf-m-no-offset",
    "noFill": "pf-m-no-fill"
  },
  "radio": "pf-v5-c-radio",
  "radioInput": "pf-v5-c-radio__input",
  "radioLabel": "pf-v5-c-radio__label",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js
var CardContext = React84.createContext({
  cardId: "",
  registerTitleId: () => {
  },
  isExpanded: false,
  isClickable: false,
  isSelectable: false,
  isDisabled: false
});
var Card = (_a) => {
  var { children, id = "", className, component = "div", isCompact = false, isSelectable = false, isClickable = false, isDisabled = false, isSelectableRaised = false, isSelected = false, isDisabledRaised = false, isFlat = false, isExpanded = false, isRounded = false, isLarge = false, isFullHeight = false, isPlain = false, ouiaId, ouiaSafe = true, hasSelectableInput = false, selectableInputAriaLabel, onSelectableInputChange = () => {
  } } = _a, props = __rest(_a, ["children", "id", "className", "component", "isCompact", "isSelectable", "isClickable", "isDisabled", "isSelectableRaised", "isSelected", "isDisabledRaised", "isFlat", "isExpanded", "isRounded", "isLarge", "isFullHeight", "isPlain", "ouiaId", "ouiaSafe", "hasSelectableInput", "selectableInputAriaLabel", "onSelectableInputChange"]);
  const Component44 = component;
  const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);
  const [titleId, setTitleId] = React84.useState("");
  const [ariaProps, setAriaProps] = React84.useState();
  if (isCompact && isLarge) {
    console.warn("Card: Cannot use isCompact with isLarge. Defaulting to isCompact");
    isLarge = false;
  }
  const getSelectableModifiers = () => {
    if (isDisabledRaised) {
      return css(card_default.modifiers.nonSelectableRaised);
    }
    if (isSelectableRaised) {
      return css(card_default.modifiers.selectableRaised, isSelected && card_default.modifiers.selectedRaised);
    }
    if (isSelectable && isClickable) {
      return css(card_default.modifiers.selectable, card_default.modifiers.clickable, isSelected && card_default.modifiers.current);
    }
    if (isSelectable) {
      return css(card_default.modifiers.selectable, isSelected && card_default.modifiers.selected);
    }
    if (isClickable) {
      return css(card_default.modifiers.clickable, isSelected && card_default.modifiers.selected);
    }
    return "";
  };
  const containsCardTitleChildRef = React84.useRef(false);
  const registerTitleId = (id2) => {
    setTitleId(id2);
    containsCardTitleChildRef.current = !!id2;
  };
  React84.useEffect(() => {
    if (selectableInputAriaLabel) {
      setAriaProps({ "aria-label": selectableInputAriaLabel });
    } else if (titleId) {
      setAriaProps({ "aria-labelledby": titleId });
    } else if (hasSelectableInput && !containsCardTitleChildRef.current) {
      setAriaProps({});
      console.warn("If no CardTitle component is passed as a child of Card the selectableInputAriaLabel prop must be passed");
    }
  }, [hasSelectableInput, selectableInputAriaLabel, titleId]);
  return React84.createElement(
    CardContext.Provider,
    { value: {
      cardId: id,
      registerTitleId,
      isExpanded,
      isClickable,
      isSelectable,
      isDisabled,
      // TODO: Remove hasSelectableInput when deprecated prop is removed
      hasSelectableInput
    } },
    hasSelectableInput && React84.createElement("input", Object.assign({ className: "pf-v5-screen-reader", id: `${id}-input` }, ariaProps, { type: "checkbox", checked: isSelected, onChange: (event) => onSelectableInputChange(event, id), disabled: isDisabledRaised, tabIndex: -1 })),
    React84.createElement(Component44, Object.assign({ id, className: css(card_default.card, isCompact && card_default.modifiers.compact, isExpanded && card_default.modifiers.expanded, isFlat && card_default.modifiers.flat, isRounded && card_default.modifiers.rounded, isLarge && card_default.modifiers.displayLg, isFullHeight && card_default.modifiers.fullHeight, isPlain && card_default.modifiers.plain, getSelectableModifiers(), isDisabled && card_default.modifiers.disabled, className), tabIndex: isSelectableRaised ? "0" : void 0 }, props, ouiaProps), children)
  );
};
Card.displayName = "Card";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js
init_tslib_es6();
var React85 = __toESM(require_react());
var CardBody = (_a) => {
  var { children, className, component = "div", isFilled = true } = _a, props = __rest(_a, ["children", "className", "component", "isFilled"]);
  const Component44 = component;
  return React85.createElement(Component44, Object.assign({ className: css(card_default.cardBody, !isFilled && card_default.modifiers.noFill, className) }, props), children);
};
CardBody.displayName = "CardBody";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardExpandableContent.js
init_tslib_es6();
var React86 = __toESM(require_react());
var CardExpandableContent = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React86.createElement(CardContext.Consumer, null, ({ isExpanded }) => isExpanded ? React86.createElement("div", Object.assign({ className: css(card_default.cardExpandableContent, className) }, props), children) : null);
};
CardExpandableContent.displayName = "CardExpandableContent";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardFooter.js
init_tslib_es6();
var React87 = __toESM(require_react());
var CardFooter = (_a) => {
  var { children, className, component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
  const Component44 = component;
  return React87.createElement(Component44, Object.assign({ className: css(card_default.cardFooter, className) }, props), children);
};
CardFooter.displayName = "CardFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js
init_tslib_es6();
var React88 = __toESM(require_react());
var CardTitle = (_a) => {
  var { children, className, component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
  const { cardId, registerTitleId } = React88.useContext(CardContext);
  const Component44 = component;
  const titleId = cardId ? `${cardId}-title` : "";
  React88.useEffect(() => {
    registerTitleId(titleId);
    return () => registerTitleId("");
  }, [registerTitleId, titleId]);
  return React88.createElement(
    "div",
    { className: css(card_default.cardTitle) },
    React88.createElement(Component44, Object.assign({ className: css(card_default.cardTitleText, className), id: titleId || void 0 }, props), children)
  );
};
CardTitle.displayName = "CardTitle";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js
init_tslib_es6();
var React93 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeaderMain.js
init_tslib_es6();
var React89 = __toESM(require_react());
var CardHeaderMain = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React89.createElement("div", Object.assign({ className: css(card_default.cardHeaderMain, className) }, props), children);
};
CardHeaderMain.displayName = "CardHeaderMain";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardActions.js
init_tslib_es6();
var React90 = __toESM(require_react());
var CardActions = (_a) => {
  var { children, className, hasNoOffset = false } = _a, props = __rest(_a, ["children", "className", "hasNoOffset"]);
  return React90.createElement("div", Object.assign({ className: css(card_default.cardActions, hasNoOffset && card_default.modifiers.noOffset, className) }, props), children);
};
CardActions.displayName = "CardActions";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardSelectableActions.js
init_tslib_es6();
var React91 = __toESM(require_react());
var CardSelectableActions = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React91.createElement("div", Object.assign({ className: css(card_default.cardSelectableActions, className) }, props), children);
};
CardSelectableActions.displayName = "CardSelectableActions";

// node_modules/@patternfly/react-core/dist/esm/components/Radio/Radio.js
init_tslib_es6();
var React92 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Radio/radio.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Radio/radio.css";
var radio_default = {
  "modifiers": {
    "standalone": "pf-m-standalone",
    "disabled": "pf-m-disabled"
  },
  "radio": "pf-v5-c-radio",
  "radioBody": "pf-v5-c-radio__body",
  "radioDescription": "pf-v5-c-radio__description",
  "radioInput": "pf-v5-c-radio__input",
  "radioLabel": "pf-v5-c-radio__label"
};

// node_modules/@patternfly/react-core/dist/esm/components/Radio/Radio.js
var Radio = class _Radio extends React92.Component {
  constructor(props) {
    super(props);
    this.handleChange = (event) => {
      this.props.onChange(event, event.currentTarget.checked);
    };
    if (!props.label && !props["aria-label"]) {
      console.error("Radio:", "Radio requires an aria-label to be specified");
    }
    this.state = {
      ouiaStateId: getDefaultOUIAId(_Radio.displayName)
    };
  }
  render() {
    const _a = this.props, {
      "aria-label": ariaLabel,
      checked,
      className,
      inputClassName,
      defaultChecked,
      isLabelWrapped,
      isLabelBeforeButton,
      isChecked,
      isDisabled,
      isValid,
      label,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onChange,
      description,
      body,
      ouiaId,
      ouiaSafe = true,
      component
    } = _a, props = __rest(_a, ["aria-label", "checked", "className", "inputClassName", "defaultChecked", "isLabelWrapped", "isLabelBeforeButton", "isChecked", "isDisabled", "isValid", "label", "onChange", "description", "body", "ouiaId", "ouiaSafe", "component"]);
    if (!props.id) {
      console.error("Radio:", "id is required to make input accessible");
    }
    const inputRendered = React92.createElement("input", Object.assign({}, props, { className: css(radio_default.radioInput, inputClassName), type: "radio", onChange: this.handleChange, "aria-invalid": !isValid, disabled: isDisabled, checked: checked || isChecked }, checked === void 0 && { defaultChecked }, !label && { "aria-label": ariaLabel }, getOUIAProps(_Radio.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)));
    const wrapWithLabel = isLabelWrapped && !component || component === "label";
    const Label2 = wrapWithLabel ? "span" : "label";
    const labelRendered = label ? React92.createElement(Label2, { className: css(radio_default.radioLabel, isDisabled && radio_default.modifiers.disabled), htmlFor: !wrapWithLabel ? props.id : void 0 }, label) : null;
    const Component44 = component !== null && component !== void 0 ? component : wrapWithLabel ? "label" : "div";
    return React92.createElement(
      Component44,
      { className: css(radio_default.radio, !label && radio_default.modifiers.standalone, className), htmlFor: wrapWithLabel ? props.id : void 0 },
      isLabelBeforeButton ? React92.createElement(
        React92.Fragment,
        null,
        labelRendered,
        inputRendered
      ) : React92.createElement(
        React92.Fragment,
        null,
        inputRendered,
        labelRendered
      ),
      description && React92.createElement("span", { className: css(radio_default.radioDescription) }, description),
      body && React92.createElement("span", { className: css(radio_default.radioBody) }, body)
    );
  }
};
Radio.displayName = "Radio";
Radio.defaultProps = {
  className: "",
  isDisabled: false,
  isValid: true,
  onChange: () => {
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js
var CardHeader = (_a) => {
  var { children, className, actions, selectableActions, id, onExpand, toggleButtonProps, isToggleRightAligned } = _a, props = __rest(_a, ["children", "className", "actions", "selectableActions", "id", "onExpand", "toggleButtonProps", "isToggleRightAligned"]);
  return React93.createElement(CardContext.Consumer, null, ({ cardId, isClickable, isSelectable, isDisabled: isCardDisabled, hasSelectableInput }) => {
    const cardHeaderToggle = React93.createElement(
      "div",
      { className: css(card_default.cardHeaderToggle) },
      React93.createElement(
        Button,
        Object.assign({ variant: "plain", type: "button", onClick: (evt) => {
          onExpand(evt, cardId);
        } }, toggleButtonProps),
        React93.createElement(
          "span",
          { className: css(card_default.cardHeaderToggleIcon) },
          React93.createElement(angle_right_icon_default, { "aria-hidden": "true" })
        )
      )
    );
    const isClickableOrSelectableOnly = isClickable && !isSelectable || isSelectable && !isClickable;
    const isDeprecatedSelectableCard = hasSelectableInput;
    if ((actions === null || actions === void 0 ? void 0 : actions.actions) && isClickableOrSelectableOnly && !isDeprecatedSelectableCard) {
      console.warn(`${isClickable ? "Clickable" : "Selectable"} only cards should not contain any other actions. If you wish to include additional actions, use a clickable and selectable card.`);
    }
    const handleActionClick = (event) => {
      if (isClickable) {
        if (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.onClickAction) {
          selectableActions.onClickAction(event);
        } else if (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.to) {
          window.open(selectableActions.to, selectableActions.isExternalLink ? "_blank" : "_self");
        }
      }
    };
    const getClickableSelectableProps = () => {
      const baseProps = {
        className: "pf-m-standalone",
        inputClassName: isClickable && !isSelectable && "pf-v5-screen-reader",
        label: React93.createElement(React93.Fragment, null),
        "aria-label": selectableActions.selectableActionAriaLabel,
        "aria-labelledby": selectableActions.selectableActionAriaLabelledby,
        id: selectableActions.selectableActionId,
        name: selectableActions.name,
        isDisabled: isCardDisabled
      };
      if (isClickable && !isSelectable) {
        return Object.assign(Object.assign({}, baseProps), { onClick: handleActionClick });
      }
      if (isSelectable) {
        return Object.assign(Object.assign({}, baseProps), { onChange: selectableActions.onChange, isChecked: selectableActions.isChecked });
      }
      return baseProps;
    };
    return React93.createElement(
      "div",
      Object.assign({ className: css(card_default.cardHeader, isToggleRightAligned && card_default.modifiers.toggleRight, className), id }, props),
      onExpand && !isToggleRightAligned && cardHeaderToggle,
      (actions || selectableActions && (isClickable || isSelectable)) && React93.createElement(
        CardActions,
        { className: actions === null || actions === void 0 ? void 0 : actions.className, hasNoOffset: (actions === null || actions === void 0 ? void 0 : actions.hasNoOffset) || (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.hasNoOffset) },
        actions === null || actions === void 0 ? void 0 : actions.actions,
        selectableActions && (isClickable || isSelectable) && React93.createElement(CardSelectableActions, { className: selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.className }, (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.variant) === "single" || isClickable && !isSelectable ? React93.createElement(Radio, Object.assign({}, getClickableSelectableProps())) : React93.createElement(Checkbox, Object.assign({}, getClickableSelectableProps())))
      ),
      children && React93.createElement(CardHeaderMain, null, children),
      onExpand && isToggleRightAligned && cardHeaderToggle
    );
  });
};
CardHeader.displayName = "CardHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Chip/Chip.js
init_tslib_es6();
var React94 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Chip/chip.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Chip/chip.css";
var chip_default = {
  "badge": "pf-v5-c-badge",
  "button": "pf-v5-c-button",
  "chip": "pf-v5-c-chip",
  "chipActions": "pf-v5-c-chip__actions",
  "chipContent": "pf-v5-c-chip__content",
  "chipIcon": "pf-v5-c-chip__icon",
  "chipText": "pf-v5-c-chip__text",
  "modifiers": {
    "overflow": "pf-m-overflow",
    "draggable": "pf-m-draggable"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_chip__text_MaxWidth.js
var c_chip__text_MaxWidth = {
  "name": "--pf-v5-c-chip__text--MaxWidth",
  "value": "16ch",
  "var": "var(--pf-v5-c-chip__text--MaxWidth)"
};
var c_chip_text_MaxWidth_default = c_chip__text_MaxWidth;

// node_modules/@patternfly/react-core/dist/esm/components/Chip/Chip.js
var Chip = class _Chip extends React94.Component {
  constructor(props) {
    super(props);
    this.span = React94.createRef();
    this.setChipStyle = () => ({
      [c_chip_text_MaxWidth_default.name]: this.props.textMaxWidth
    });
    this.renderOverflowChip = () => {
      const _a = this.props, {
        badge,
        children,
        className,
        onClick,
        ouiaId,
        textMaxWidth,
        style,
        component,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        tooltipPosition,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        isOverflowChip,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        closeBtnAriaLabel,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        isReadOnly
      } = _a, props2 = __rest(_a, ["badge", "children", "className", "onClick", "ouiaId", "textMaxWidth", "style", "component", "tooltipPosition", "isOverflowChip", "closeBtnAriaLabel", "isReadOnly"]);
      const Component44 = component;
      return React94.createElement(
        Component44,
        Object.assign({ onClick }, textMaxWidth && Object.assign({ style: this.setChipStyle() }, style), { className: css(chip_default.chip, chip_default.modifiers.overflow, className) }, component === "button" ? { type: "button" } : {}, getOUIAProps("OverflowChip", ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId), props2),
        React94.createElement(
          "span",
          { className: css(chip_default.chipContent) },
          React94.createElement("span", { className: css(chip_default.chipText) }, children),
          badge && badge
        )
      );
    };
    this.renderChip = (randomId) => {
      const { children, tooltipPosition } = this.props;
      if (this.state.isTooltipVisible) {
        return React94.createElement(Tooltip, { position: tooltipPosition, content: children }, this.renderInnerChip(randomId));
      }
      return this.renderInnerChip(randomId);
    };
    this.state = {
      isTooltipVisible: false,
      ouiaStateId: getDefaultOUIAId(_Chip.displayName)
    };
  }
  componentDidMount() {
    this.setState({
      isTooltipVisible: Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth)
    });
  }
  componentDidUpdate(_prevProps, prevState) {
    const nextIsTooltipVisible = Boolean(this.span.current && this.span.current.offsetWidth < this.span.current.scrollWidth);
    if (prevState.isTooltipVisible !== nextIsTooltipVisible) {
      this.setState({
        isTooltipVisible: nextIsTooltipVisible
      });
    }
  }
  renderInnerChip(id) {
    const _a = this.props, {
      badge,
      children,
      className,
      onClick,
      closeBtnAriaLabel,
      isReadOnly,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      isOverflowChip,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      tooltipPosition,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      id: idProp,
      component,
      ouiaId,
      textMaxWidth
    } = _a, props = __rest(_a, ["badge", "children", "className", "onClick", "closeBtnAriaLabel", "isReadOnly", "isOverflowChip", "tooltipPosition", "id", "component", "ouiaId", "textMaxWidth"]);
    const Component44 = component;
    return React94.createElement(
      Component44,
      Object.assign({}, textMaxWidth && {
        style: this.setChipStyle()
      }, { className: css(chip_default.chip, className) }, this.state.isTooltipVisible && { tabIndex: 0 }, getOUIAProps(_Chip.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId), props),
      React94.createElement(
        "span",
        { className: css(chip_default.chipContent) },
        React94.createElement("span", { ref: this.span, className: css(chip_default.chipText), id }, children),
        badge && badge
      ),
      !isReadOnly && React94.createElement(
        "span",
        { className: css(chip_default.chipActions) },
        React94.createElement(
          Button,
          { onClick, variant: "plain", "aria-label": closeBtnAriaLabel, id: `remove_${id}`, "aria-labelledby": `remove_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },
          React94.createElement(times_icon_default, { "aria-hidden": "true" })
        )
      )
    );
  }
  render() {
    const { isOverflowChip } = this.props;
    return React94.createElement(GenerateId, null, (randomId) => isOverflowChip ? this.renderOverflowChip() : this.renderChip(this.props.id || randomId));
  }
};
Chip.displayName = "Chip";
Chip.defaultProps = {
  closeBtnAriaLabel: "close",
  className: "",
  isOverflowChip: false,
  isReadOnly: false,
  tooltipPosition: "top",
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onClick: (_e) => void 0,
  component: "div"
};

// node_modules/@patternfly/react-core/dist/esm/components/Chip/ChipGroup.js
init_tslib_es6();
var React95 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Chip/chip-group.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Chip/chip-group.css";
var chip_group_default = {
  "chipGroup": "pf-v5-c-chip-group",
  "chipGroupClose": "pf-v5-c-chip-group__close",
  "chipGroupLabel": "pf-v5-c-chip-group__label",
  "chipGroupList": "pf-v5-c-chip-group__list",
  "chipGroupListItem": "pf-v5-c-chip-group__list-item",
  "chipGroupMain": "pf-v5-c-chip-group__main",
  "modifiers": {
    "category": "pf-m-category"
  }
};

// node_modules/@patternfly/react-icons/dist/esm/icons/times-circle-icon.js
var TimesCircleIconConfig = {
  name: "TimesCircleIcon",
  height: 512,
  width: 512,
  svgPath: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z",
  yOffset: 0,
  xOffset: 0
};
var TimesCircleIcon = createIcon(TimesCircleIconConfig);
var times_circle_icon_default = TimesCircleIcon;

// node_modules/@patternfly/react-core/dist/esm/components/Chip/ChipGroup.js
var ChipGroup = class _ChipGroup extends React95.Component {
  constructor(props) {
    super(props);
    this.headingRef = React95.createRef();
    this.toggleCollapse = () => {
      this.setState((prevState) => ({
        isOpen: !prevState.isOpen,
        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
      }));
    };
    this.state = {
      isOpen: this.props.defaultIsOpen,
      isTooltipVisible: false
    };
  }
  componentDidMount() {
    this.setState({
      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
    });
  }
  renderLabel(id) {
    const { categoryName, tooltipPosition } = this.props;
    const { isTooltipVisible } = this.state;
    return isTooltipVisible ? React95.createElement(
      Tooltip,
      { position: tooltipPosition, content: categoryName },
      React95.createElement(
        "span",
        { tabIndex: 0, ref: this.headingRef, className: css(chip_group_default.chipGroupLabel) },
        React95.createElement("span", { id }, categoryName)
      )
    ) : React95.createElement("span", { ref: this.headingRef, className: css(chip_group_default.chipGroupLabel), id }, categoryName);
  }
  render() {
    const _a = this.props, {
      categoryName,
      children,
      className,
      isClosable,
      closeBtnAriaLabel,
      "aria-label": ariaLabel,
      onClick,
      onOverflowChipClick,
      numChips,
      expandedText,
      collapsedText,
      ouiaId,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      defaultIsOpen,
      tooltipPosition
    } = _a, rest = __rest(_a, ["categoryName", "children", "className", "isClosable", "closeBtnAriaLabel", "aria-label", "onClick", "onOverflowChipClick", "numChips", "expandedText", "collapsedText", "ouiaId", "defaultIsOpen", "tooltipPosition"]);
    const { isOpen } = this.state;
    const numChildren = React95.Children.count(children);
    const collapsedTextResult = fillTemplate(collapsedText, {
      remaining: React95.Children.count(children) - numChips
    });
    const renderChipGroup = (id) => {
      const chipArray = !isOpen ? React95.Children.toArray(children).slice(0, numChips) : React95.Children.toArray(children);
      return React95.createElement(
        "div",
        Object.assign({ className: css(chip_group_default.chipGroup, className, categoryName && chip_group_default.modifiers.category), role: "group" }, categoryName && { "aria-labelledby": id }, !categoryName && { "aria-label": ariaLabel }, getOUIAProps(_ChipGroup.displayName, ouiaId)),
        React95.createElement(
          "div",
          { className: css(chip_group_default.chipGroupMain) },
          categoryName && this.renderLabel(id),
          React95.createElement(
            "ul",
            Object.assign({ className: css(chip_group_default.chipGroupList) }, categoryName && { "aria-labelledby": id }, !categoryName && { "aria-label": ariaLabel }, { role: "list" }, rest),
            chipArray.map((child, i) => React95.createElement("li", { className: css(chip_group_default.chipGroupListItem), key: i }, child)),
            numChildren > numChips && React95.createElement(
              "li",
              { className: css(chip_group_default.chipGroupListItem) },
              React95.createElement(Chip, { isOverflowChip: true, onClick: (event) => {
                this.toggleCollapse();
                onOverflowChipClick(event);
              }, component: "button" }, isOpen ? expandedText : collapsedTextResult)
            )
          )
        ),
        isClosable && React95.createElement(
          "div",
          { className: css(chip_group_default.chipGroupClose) },
          React95.createElement(
            Button,
            { variant: "plain", "aria-label": closeBtnAriaLabel, onClick, id: `remove_group_${id}`, "aria-labelledby": `remove_group_${id} ${id}`, ouiaId: ouiaId || closeBtnAriaLabel },
            React95.createElement(times_circle_icon_default, { "aria-hidden": "true" })
          )
        )
      );
    };
    return numChildren === 0 ? null : React95.createElement(GenerateId, null, (randomId) => renderChipGroup(this.props.id || randomId));
  }
};
ChipGroup.displayName = "ChipGroup";
ChipGroup.defaultProps = {
  expandedText: "Show Less",
  collapsedText: "${remaining} more",
  categoryName: "",
  defaultIsOpen: false,
  numChips: 3,
  isClosable: false,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onClick: (_e) => void 0,
  onOverflowChipClick: (_e) => void 0,
  closeBtnAriaLabel: "Close chip group",
  tooltipPosition: "top",
  "aria-label": "Chip group category"
};

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopy.js
init_tslib_es6();
var React99 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.css";
var clipboard_copy_default = {
  "button": "pf-v5-c-button",
  "clipboardCopy": "pf-v5-c-clipboard-copy",
  "clipboardCopyActions": "pf-v5-c-clipboard-copy__actions",
  "clipboardCopyActionsItem": "pf-v5-c-clipboard-copy__actions-item",
  "clipboardCopyExpandableContent": "pf-v5-c-clipboard-copy__expandable-content",
  "clipboardCopyGroup": "pf-v5-c-clipboard-copy__group",
  "clipboardCopyText": "pf-v5-c-clipboard-copy__text",
  "clipboardCopyToggleIcon": "pf-v5-c-clipboard-copy__toggle-icon",
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "expanded": "pf-m-expanded",
    "inline": "pf-m-inline",
    "block": "pf-m-block",
    "code": "pf-m-code"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyButton.js
init_tslib_es6();
var React96 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/copy-icon.js
var CopyIconConfig = {
  name: "CopyIcon",
  height: 512,
  width: 448,
  svgPath: "M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z",
  yOffset: 0,
  xOffset: 0
};
var CopyIcon = createIcon(CopyIconConfig);
var copy_icon_default = CopyIcon;

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyButton.js
var ClipboardCopyButton = (_a) => {
  var { onClick, exitDelay = 0, entryDelay = 300, maxWidth = "100px", position = "top", "aria-label": ariaLabel = "Copyable input", id, textId, children, variant = "control", onTooltipHidden = () => {
  }, className } = _a, props = __rest(_a, ["onClick", "exitDelay", "entryDelay", "maxWidth", "position", "aria-label", "id", "textId", "children", "variant", "onTooltipHidden", "className"]);
  const triggerRef = React96.createRef();
  return React96.createElement(
    Tooltip,
    { trigger: "mouseenter focus click", triggerRef, exitDelay, entryDelay, maxWidth, position, "aria-live": "polite", aria: "none", content: React96.createElement("div", null, children), onTooltipHidden },
    React96.createElement(
      Button,
      Object.assign({ type: "button", variant, onClick, "aria-label": ariaLabel, className, id, "aria-labelledby": `${id} ${textId}` }, props, { ref: triggerRef }),
      React96.createElement(copy_icon_default, null)
    )
  );
};
ClipboardCopyButton.displayName = "ClipboardCopyButton";

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyToggle.js
init_tslib_es6();
var React97 = __toESM(require_react());
var ClipboardCopyToggle = (_a) => {
  var { onClick, id, textId, contentId, isExpanded = false } = _a, props = __rest(_a, ["onClick", "id", "textId", "contentId", "isExpanded"]);
  return React97.createElement(
    Button,
    Object.assign({ type: "button", variant: "control", onClick, id, "aria-labelledby": `${id} ${textId}`, "aria-controls": contentId, "aria-expanded": isExpanded }, props),
    React97.createElement(
      "div",
      { className: css(clipboard_copy_default.clipboardCopyToggleIcon) },
      React97.createElement(angle_right_icon_default, { "aria-hidden": "true" })
    )
  );
};
ClipboardCopyToggle.displayName = "ClipboardCopyToggle";

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyExpanded.js
init_tslib_es6();
var React98 = __toESM(require_react());
var ClipboardCopyExpanded = class extends React98.Component {
  constructor(props) {
    super(props);
  }
  render() {
    const _a = this.props, { className, children, onChange, isReadOnly, isCode } = _a, props = __rest(_a, ["className", "children", "onChange", "isReadOnly", "isCode"]);
    return React98.createElement("div", Object.assign({ suppressContentEditableWarning: true, className: css(clipboard_copy_default.clipboardCopyExpandableContent, className), onInput: (e) => onChange(e, e.target.innerText), contentEditable: !isReadOnly }, props), isCode ? React98.createElement("pre", { dir: "ltr" }, children) : children);
  }
};
ClipboardCopyExpanded.displayName = "ClipboardCopyExpanded";
ClipboardCopyExpanded.defaultProps = {
  onChange: () => void 0,
  className: "",
  isReadOnly: false,
  isCode: false
};

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopy.js
var clipboardCopyFunc = (event, text) => {
  navigator.clipboard.writeText(text.toString());
};
var ClipboardCopyVariant;
(function(ClipboardCopyVariant2) {
  ClipboardCopyVariant2["inline"] = "inline";
  ClipboardCopyVariant2["expansion"] = "expansion";
  ClipboardCopyVariant2["inlineCompact"] = "inline-compact";
})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));
var ClipboardCopy = class _ClipboardCopy extends React99.Component {
  constructor(props) {
    super(props);
    this.timer = null;
    this.componentDidUpdate = (prevProps, prevState) => {
      if (prevProps.children !== this.props.children) {
        const newText = this.props.children;
        this.setState({ text: newText, textWhenExpanded: newText });
      }
    };
    this.componentWillUnmount = () => {
      if (this.timer) {
        window.clearTimeout(this.timer);
      }
    };
    this.expandContent = (_event) => {
      this.setState((prevState) => ({
        expanded: !prevState.expanded
      }));
    };
    this.updateText = (event, text2) => {
      this.setState({ text: text2 });
      this.props.onChange(event, text2);
    };
    this.updateTextWhenExpanded = (event, text2) => {
      this.setState({ textWhenExpanded: text2 });
      this.props.onChange(event, text2);
    };
    this.render = () => {
      const _a = this.props, {
        /* eslint-disable @typescript-eslint/no-unused-vars */
        isExpanded,
        onChange,
        // Don't pass to <div>
        /* eslint-enable @typescript-eslint/no-unused-vars */
        isReadOnly,
        isCode,
        isBlock,
        exitDelay,
        maxWidth,
        entryDelay,
        onCopy,
        hoverTip,
        clickTip,
        textAriaLabel,
        toggleAriaLabel,
        variant,
        position,
        className,
        additionalActions,
        ouiaId,
        ouiaSafe
      } = _a, divProps = __rest(_a, ["isExpanded", "onChange", "isReadOnly", "isCode", "isBlock", "exitDelay", "maxWidth", "entryDelay", "onCopy", "hoverTip", "clickTip", "textAriaLabel", "toggleAriaLabel", "variant", "position", "className", "additionalActions", "ouiaId", "ouiaSafe"]);
      const textIdPrefix = "text-input-";
      const toggleIdPrefix = "toggle-";
      const contentIdPrefix = "content-";
      return React99.createElement(
        "div",
        Object.assign({ className: css(clipboard_copy_default.clipboardCopy, variant === "inline-compact" && clipboard_copy_default.modifiers.inline, isBlock && clipboard_copy_default.modifiers.block, this.state.expanded && clipboard_copy_default.modifiers.expanded, className) }, divProps, getOUIAProps(_ClipboardCopy.displayName, ouiaId, ouiaSafe)),
        variant === "inline-compact" && React99.createElement(GenerateId, { prefix: "" }, (id) => React99.createElement(
          React99.Fragment,
          null,
          !isCode && React99.createElement("span", { className: css(clipboard_copy_default.clipboardCopyText), id: `${textIdPrefix}${id}` }, this.state.text),
          isCode && React99.createElement("code", { className: css(clipboard_copy_default.clipboardCopyText, clipboard_copy_default.modifiers.code), id: `${textIdPrefix}${id}` }, this.state.text),
          React99.createElement(
            "span",
            { className: css(clipboard_copy_default.clipboardCopyActions) },
            React99.createElement(
              "span",
              { className: css(clipboard_copy_default.clipboardCopyActionsItem) },
              React99.createElement(ClipboardCopyButton, { variant: "plain", exitDelay, entryDelay, maxWidth, position, id: `copy-button-${id}`, textId: `text-input-${id}`, "aria-label": hoverTip, onClick: (event) => {
                onCopy(event, this.state.text);
                this.setState({ copied: true });
              }, onTooltipHidden: () => this.setState({ copied: false }) }, this.state.copied ? clickTip : hoverTip)
            ),
            additionalActions && additionalActions
          )
        )),
        variant !== "inline-compact" && React99.createElement(GenerateId, { prefix: "" }, (id) => React99.createElement(
          React99.Fragment,
          null,
          React99.createElement(
            "div",
            { className: css(clipboard_copy_default.clipboardCopyGroup) },
            variant === "expansion" && React99.createElement(ClipboardCopyToggle, { isExpanded: this.state.expanded, onClick: (_event) => {
              this.expandContent(_event);
              if (this.state.expanded) {
                this.setState({ text: this.state.textWhenExpanded });
              } else {
                this.setState({ textWhenExpanded: this.state.text });
              }
            }, id: `${toggleIdPrefix}${id}`, textId: `${textIdPrefix}${id}`, contentId: `${contentIdPrefix}${id}`, "aria-label": toggleAriaLabel }),
            React99.createElement(TextInput, Object.assign({ readOnlyVariant: isReadOnly || this.state.expanded ? "default" : void 0, onChange: this.updateText, value: this.state.expanded ? this.state.textWhenExpanded : this.state.text, id: `text-input-${id}`, "aria-label": textAriaLabel }, isCode && { dir: "ltr" })),
            React99.createElement(ClipboardCopyButton, { exitDelay, entryDelay, maxWidth, position, id: `copy-button-${id}`, textId: `text-input-${id}`, "aria-label": hoverTip, onClick: (event) => {
              onCopy(event, this.state.expanded ? this.state.textWhenExpanded : this.state.text);
              this.setState({ copied: true });
            }, onTooltipHidden: () => this.setState({ copied: false }) }, this.state.copied ? clickTip : hoverTip)
          ),
          this.state.expanded && React99.createElement(ClipboardCopyExpanded, { isReadOnly, isCode, id: `content-${id}`, onChange: this.updateTextWhenExpanded }, this.state.text)
        ))
      );
    };
    const text = Array.isArray(this.props.children) ? this.props.children.join("") : this.props.children;
    this.state = {
      text,
      expanded: this.props.isExpanded,
      copied: false,
      textWhenExpanded: text
    };
  }
};
ClipboardCopy.displayName = "ClipboardCopy";
ClipboardCopy.defaultProps = {
  hoverTip: "Copy to clipboard",
  clickTip: "Successfully copied to clipboard!",
  isReadOnly: false,
  isExpanded: false,
  isCode: false,
  variant: "inline",
  position: TooltipPosition.top,
  maxWidth: "150px",
  exitDelay: 1500,
  entryDelay: 300,
  onCopy: clipboardCopyFunc,
  onChange: () => void 0,
  textAriaLabel: "Copyable input",
  toggleAriaLabel: "Show content",
  additionalActions: null,
  ouiaSafe: true
};

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyAction.js
init_tslib_es6();
var React100 = __toESM(require_react());
var ClipboardCopyAction = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React100.createElement("span", Object.assign({ className: css(clipboard_copy_default.clipboardCopyActionsItem, className) }, props), children);
};
ClipboardCopyAction.displayName = "ClipboardCopyAction";

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js
init_tslib_es6();
var React101 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.css";
var code_block_default = {
  "codeBlock": "pf-v5-c-code-block",
  "codeBlockActions": "pf-v5-c-code-block__actions",
  "codeBlockCode": "pf-v5-c-code-block__code",
  "codeBlockContent": "pf-v5-c-code-block__content",
  "codeBlockHeader": "pf-v5-c-code-block__header",
  "codeBlockPre": "pf-v5-c-code-block__pre"
};

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js
var CodeBlock = (_a) => {
  var { children = null, className, actions = null } = _a, props = __rest(_a, ["children", "className", "actions"]);
  return React101.createElement(
    "div",
    Object.assign({ className: css(code_block_default.codeBlock, className) }, props),
    actions && React101.createElement(
      "div",
      { className: css(code_block_default.codeBlockHeader) },
      React101.createElement("div", { className: css(code_block_default.codeBlockActions) }, actions)
    ),
    React101.createElement("div", { className: css(code_block_default.codeBlockContent) }, children)
  );
};
CodeBlock.displayName = "CodeBlock";

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockCode.js
init_tslib_es6();
var React102 = __toESM(require_react());
var CodeBlockCode = (_a) => {
  var { children = null, className, codeClassName } = _a, props = __rest(_a, ["children", "className", "codeClassName"]);
  return React102.createElement(
    "pre",
    Object.assign({ className: css(code_block_default.codeBlockPre, className) }, props),
    React102.createElement("code", { className: css(code_block_default.codeBlockCode, codeClassName) }, children)
  );
};
CodeBlockCode.displayName = "CodeBlockCode";

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js
init_tslib_es6();
var React103 = __toESM(require_react());
var CodeBlockAction = (_a) => {
  var { children = null, className } = _a, props = __rest(_a, ["children", "className"]);
  return React103.createElement("div", Object.assign({ className: css(`${code_block_default.codeBlockActions}-item`, className) }, props), children);
};
CodeBlockAction.displayName = "CodeBlockAction";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataList.js
init_tslib_es6();
var React104 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/DataList/data-list.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/DataList/data-list.css";
var data_list_default = {
  "dataList": "pf-v5-c-data-list",
  "dataListAction": "pf-v5-c-data-list__action",
  "dataListCell": "pf-v5-c-data-list__cell",
  "dataListCheck": "pf-v5-c-data-list__check",
  "dataListExpandableContent": "pf-v5-c-data-list__expandable-content",
  "dataListExpandableContentBody": "pf-v5-c-data-list__expandable-content-body",
  "dataListItem": "pf-v5-c-data-list__item",
  "dataListItemAction": "pf-v5-c-data-list__item-action",
  "dataListItemContent": "pf-v5-c-data-list__item-content",
  "dataListItemControl": "pf-v5-c-data-list__item-control",
  "dataListItemDraggableButton": "pf-v5-c-data-list__item-draggable-button",
  "dataListItemDraggableIcon": "pf-v5-c-data-list__item-draggable-icon",
  "dataListItemRow": "pf-v5-c-data-list__item-row",
  "dataListText": "pf-v5-c-data-list__text",
  "dataListToggle": "pf-v5-c-data-list__toggle",
  "dataListToggleIcon": "pf-v5-c-data-list__toggle-icon",
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "hidden": "pf-m-hidden",
    "hiddenOnSm": "pf-m-hidden-on-sm",
    "visibleOnSm": "pf-m-visible-on-sm",
    "hiddenOnMd": "pf-m-hidden-on-md",
    "visibleOnMd": "pf-m-visible-on-md",
    "hiddenOnLg": "pf-m-hidden-on-lg",
    "visibleOnLg": "pf-m-visible-on-lg",
    "hiddenOnXl": "pf-m-hidden-on-xl",
    "visibleOnXl": "pf-m-visible-on-xl",
    "hiddenOn_2xl": "pf-m-hidden-on-2xl",
    "visibleOn_2xl": "pf-m-visible-on-2xl",
    "icon": "pf-m-icon",
    "alignRight": "pf-m-align-right",
    "noFill": "pf-m-no-fill",
    "flex_2": "pf-m-flex-2",
    "flex_3": "pf-m-flex-3",
    "flex_4": "pf-m-flex-4",
    "flex_5": "pf-m-flex-5",
    "gridNone": "pf-m-grid-none",
    "gridSm": "pf-m-grid-sm",
    "gridMd": "pf-m-grid-md",
    "gridLg": "pf-m-grid-lg",
    "gridXl": "pf-m-grid-xl",
    "grid_2xl": "pf-m-grid-2xl",
    "compact": "pf-m-compact",
    "dragOver": "pf-m-drag-over",
    "truncate": "pf-m-truncate",
    "breakWord": "pf-m-break-word",
    "nowrap": "pf-m-nowrap",
    "clickable": "pf-m-clickable",
    "selected": "pf-m-selected",
    "ghostRow": "pf-m-ghost-row",
    "expanded": "pf-m-expanded",
    "disabled": "pf-m-disabled",
    "noPadding": "pf-m-no-padding"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataList.js
var gridBreakpointClasses = {
  none: data_list_default.modifiers.gridNone,
  always: "pf-m-grid",
  sm: data_list_default.modifiers.gridSm,
  md: data_list_default.modifiers.gridMd,
  lg: data_list_default.modifiers.gridLg,
  xl: data_list_default.modifiers.gridXl,
  "2xl": data_list_default.modifiers.grid_2xl
};
var DataListWrapModifier;
(function(DataListWrapModifier2) {
  DataListWrapModifier2["nowrap"] = "nowrap";
  DataListWrapModifier2["truncate"] = "truncate";
  DataListWrapModifier2["breakWord"] = "breakWord";
})(DataListWrapModifier || (DataListWrapModifier = {}));
var DataListContext = React104.createContext({
  isSelectable: false
});
var DataList = class extends React104.Component {
  constructor(props) {
    super(props);
    this.ref = React104.createRef();
    this.getIndex = (id) => Array.from(this.ref.current.children).findIndex((item) => item.id === id);
  }
  render() {
    const _a = this.props, { className, children, "aria-label": ariaLabel, onSelectDataListItem, selectedDataListItemId, isCompact, wrapModifier, gridBreakpoint, onSelectableRowChange } = _a, props = __rest(_a, ["className", "children", "aria-label", "onSelectDataListItem", "selectedDataListItemId", "isCompact", "wrapModifier", "gridBreakpoint", "onSelectableRowChange"]);
    const isSelectable = onSelectDataListItem !== void 0;
    const updateSelectedDataListItem = (event, id) => {
      onSelectDataListItem(event, id);
    };
    return React104.createElement(
      DataListContext.Provider,
      { value: {
        isSelectable,
        selectedDataListItemId,
        updateSelectedDataListItem,
        onSelectableRowChange
      } },
      React104.createElement("ul", Object.assign({ className: css(data_list_default.dataList, isCompact && data_list_default.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && data_list_default.modifiers[wrapModifier], className), style: props.style, role: "list", "aria-label": ariaLabel }, props, { ref: this.ref }), children)
    );
  }
};
DataList.displayName = "DataList";
DataList.defaultProps = {
  children: null,
  className: "",
  selectedDataListItemId: "",
  isCompact: false,
  gridBreakpoint: "md",
  wrapModifier: null
};

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListAction.js
init_tslib_es6();
var React105 = __toESM(require_react());
var DataListAction = (_a) => {
  var {
    children,
    className,
    visibility,
    /* eslint-disable @typescript-eslint/no-unused-vars */
    id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    /* eslint-disable @typescript-eslint/no-unused-vars */
    isPlainButtonAction
  } = _a, props = __rest(_a, ["children", "className", "visibility", "id", "aria-label", "aria-labelledby", "isPlainButtonAction"]);
  return React105.createElement("div", Object.assign({ className: css(data_list_default.dataListItemAction, formatBreakpointMods(visibility, data_list_default), className) }, props), isPlainButtonAction ? React105.createElement("div", { className: css(data_list_default.dataListAction) }, children) : children);
};
DataListAction.displayName = "DataListAction";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCell.js
init_tslib_es6();
var React106 = __toESM(require_react());
var DataListCell = (_a) => {
  var { children = null, className = "", width = 1, isFilled = true, alignRight = false, isIcon = false, wrapModifier = null } = _a, props = __rest(_a, ["children", "className", "width", "isFilled", "alignRight", "isIcon", "wrapModifier"]);
  return React106.createElement("div", Object.assign({ className: css(data_list_default.dataListCell, width > 1 && data_list_default.modifiers[`flex_${width}`], !isFilled && data_list_default.modifiers.noFill, alignRight && data_list_default.modifiers.alignRight, isIcon && data_list_default.modifiers.icon, className, wrapModifier && data_list_default.modifiers[wrapModifier]) }, props), children);
};
DataListCell.displayName = "DataListCell";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCheck.js
init_tslib_es6();
var React107 = __toESM(require_react());
var DataListCheck = (_a) => {
  var {
    className = "",
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onChange = (event, checked2) => {
    },
    isValid = true,
    isDisabled = false,
    isChecked = false,
    checked = false,
    defaultChecked,
    otherControls = false
  } = _a, props = __rest(_a, ["className", "onChange", "isValid", "isDisabled", "isChecked", "checked", "defaultChecked", "otherControls"]);
  const check = React107.createElement(
    "div",
    { className: css(data_list_default.dataListCheck) },
    React107.createElement("input", Object.assign({}, props, { type: "checkbox", onChange: (event) => onChange(event, event.currentTarget.checked), "aria-invalid": !isValid, disabled: isDisabled }, [true, false].includes(defaultChecked) && { defaultChecked }, ![true, false].includes(defaultChecked) && { checked: isChecked || checked }))
  );
  return React107.createElement(
    React107.Fragment,
    null,
    !otherControls && React107.createElement("div", { className: css(data_list_default.dataListItemControl, className) }, check),
    otherControls && check
  );
};
DataListCheck.displayName = "DataListCheck";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListControl.js
init_tslib_es6();
var React108 = __toESM(require_react());
var DataListControl = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React108.createElement("div", Object.assign({ className: css(data_list_default.dataListItemControl, className) }, props), children);
};
DataListControl.displayName = "DataListControl";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListDragButton.js
init_tslib_es6();
var React109 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/grip-vertical-icon.js
var GripVerticalIconConfig = {
  name: "GripVerticalIcon",
  height: 512,
  width: 320,
  svgPath: "M96 32H32C14.33 32 0 46.33 0 64v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zM288 32h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z",
  yOffset: 0,
  xOffset: 0
};
var GripVerticalIcon = createIcon(GripVerticalIconConfig);
var grip_vertical_icon_default = GripVerticalIcon;

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListDragButton.js
var DataListDragButton = (_a) => {
  var { className = "", isDisabled = false } = _a, props = __rest(_a, ["className", "isDisabled"]);
  return React109.createElement(
    "button",
    Object.assign({ className: css(data_list_default.dataListItemDraggableButton, isDisabled && data_list_default.modifiers.disabled, className), type: "button", disabled: isDisabled }, props),
    React109.createElement(
      "span",
      { className: css(data_list_default.dataListItemDraggableIcon) },
      React109.createElement(grip_vertical_icon_default, null)
    )
  );
};
DataListDragButton.displayName = "DataListDragButton";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItem.js
init_tslib_es6();
var React110 = __toESM(require_react());
var DataListItem = class extends React110.Component {
  render() {
    const _a = this.props, { children, isExpanded, className, id, "aria-labelledby": ariaLabelledBy, selectableInputAriaLabel } = _a, props = __rest(_a, ["children", "isExpanded", "className", "id", "aria-labelledby", "selectableInputAriaLabel"]);
    return React110.createElement(DataListContext.Consumer, null, ({ isSelectable, selectedDataListItemId, updateSelectedDataListItem, onSelectableRowChange }) => {
      const selectDataListItem = (event) => {
        let target = event.target;
        while (event.currentTarget !== target) {
          if ("onclick" in target && target.onclick || target.parentNode.classList.contains(data_list_default.dataListItemAction) || target.parentNode.classList.contains(data_list_default.dataListItemControl)) {
            return;
          } else {
            target = target.parentNode;
          }
        }
        updateSelectedDataListItem(event, id);
      };
      const onKeyDown = (event) => {
        if ([KeyTypes.Enter, KeyTypes.Space].includes(event.key)) {
          event.preventDefault();
          updateSelectedDataListItem(event, id);
        }
      };
      const isSelected = selectedDataListItemId === id;
      const selectableInputAriaProps = selectableInputAriaLabel ? { "aria-label": selectableInputAriaLabel } : { "aria-labelledby": ariaLabelledBy };
      return React110.createElement(
        "li",
        Object.assign({ id, className: css(data_list_default.dataListItem, isExpanded && data_list_default.modifiers.expanded, isSelectable && data_list_default.modifiers.clickable, selectedDataListItemId && isSelected && data_list_default.modifiers.selected, className), "aria-labelledby": ariaLabelledBy }, isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown }, isSelectable && isSelected && { "aria-selected": true }, props),
        onSelectableRowChange && React110.createElement("input", Object.assign({ className: "pf-v5-screen-reader", type: "radio", checked: isSelected, onChange: (event) => onSelectableRowChange(event, id), tabIndex: -1 }, selectableInputAriaProps)),
        React110.Children.map(children, (child) => React110.isValidElement(child) && React110.cloneElement(child, {
          rowid: ariaLabelledBy
        }))
      );
    });
  }
};
DataListItem.displayName = "DataListItem";
DataListItem.defaultProps = {
  isExpanded: false,
  className: "",
  id: "",
  children: null,
  "aria-labelledby": ""
};

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItemCells.js
init_tslib_es6();
var React111 = __toESM(require_react());
var DataListItemCells = (_a) => {
  var {
    className = "",
    dataListCells,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    rowid = ""
  } = _a, props = __rest(_a, ["className", "dataListCells", "rowid"]);
  return React111.createElement("div", Object.assign({ className: css(data_list_default.dataListItemContent, className) }, props), dataListCells);
};
DataListItemCells.displayName = "DataListItemCells";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItemRow.js
init_tslib_es6();
var React112 = __toESM(require_react());
var DataListItemRow = (_a) => {
  var { children, className = "", rowid = "", wrapModifier = null } = _a, props = __rest(_a, ["children", "className", "rowid", "wrapModifier"]);
  return React112.createElement("div", Object.assign({ className: css(data_list_default.dataListItemRow, className, wrapModifier && data_list_default.modifiers[wrapModifier]) }, props), React112.Children.map(children, (child) => React112.isValidElement(child) && React112.cloneElement(child, {
    rowid
  })));
};
DataListItemRow.displayName = "DataListItemRow";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListToggle.js
init_tslib_es6();
var React113 = __toESM(require_react());
var DataListToggle = (_a) => {
  var { className = "", isExpanded = false, "aria-controls": ariaControls = "", "aria-label": ariaLabel = "Details", rowid = "", id, buttonProps } = _a, props = __rest(_a, ["className", "isExpanded", "aria-controls", "aria-label", "rowid", "id", "buttonProps"]);
  return React113.createElement(
    "div",
    Object.assign({ className: css(data_list_default.dataListItemControl, className) }, props),
    React113.createElement(
      "div",
      { className: css(data_list_default.dataListToggle) },
      React113.createElement(
        Button,
        Object.assign({ id, variant: ButtonVariant.plain, "aria-controls": ariaControls !== "" && ariaControls, "aria-label": ariaLabel, "aria-labelledby": ariaLabel !== "Details" ? null : `${rowid} ${id}`, "aria-expanded": isExpanded }, buttonProps),
        React113.createElement(
          "div",
          { className: css(data_list_default.dataListToggleIcon) },
          React113.createElement(angle_right_icon_default, null)
        )
      )
    )
  );
};
DataListToggle.displayName = "DataListToggle";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListContent.js
init_tslib_es6();
var React114 = __toESM(require_react());
var DataListContent = (_a) => {
  var {
    className = "",
    children = null,
    id = "",
    isHidden: isHidden3 = false,
    "aria-label": ariaLabel,
    hasNoPadding = false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    rowid = ""
  } = _a, props = __rest(_a, ["className", "children", "id", "isHidden", "aria-label", "hasNoPadding", "rowid"]);
  return React114.createElement(
    "section",
    Object.assign({ id, className: css(data_list_default.dataListExpandableContent, className), hidden: isHidden3, "aria-label": ariaLabel }, props),
    React114.createElement("div", { className: css(data_list_default.dataListExpandableContentBody, hasNoPadding && data_list_default.modifiers.noPadding) }, children)
  );
};
DataListContent.displayName = "DataListContent";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListText.js
init_tslib_es6();
var React115 = __toESM(require_react());
var DataListText = (_a) => {
  var { children = null, className = "", component = "span", wrapModifier = null, tooltip: tooltipProp = "", onMouseEnter: onMouseEnterProp = () => {
  } } = _a, props = __rest(_a, ["children", "className", "component", "wrapModifier", "tooltip", "onMouseEnter"]);
  const Component44 = component;
  const [tooltip, setTooltip] = React115.useState("");
  const onMouseEnter = (event) => {
    if (event.target.offsetWidth < event.target.scrollWidth) {
      setTooltip(tooltipProp || event.target.innerHTML);
    } else {
      setTooltip("");
    }
    onMouseEnterProp(event);
  };
  const text = React115.createElement(Component44, Object.assign({ onMouseEnter, className: css(className, wrapModifier && data_list_default.modifiers[wrapModifier], data_list_default.dataListText) }, props), children);
  return tooltip !== "" ? React115.createElement(Tooltip, { content: tooltip, isVisible: true }, text) : text;
};
DataListText.displayName = "DataListText";

// node_modules/@patternfly/react-core/dist/esm/components/DatePicker/DatePicker.js
init_tslib_es6();
var React128 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/DatePicker/date-picker.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/DatePicker/date-picker.css";
var date_picker_default = {
  "datePicker": "pf-v5-c-date-picker",
  "datePickerCalendar": "pf-v5-c-date-picker__calendar",
  "datePickerHelperText": "pf-v5-c-date-picker__helper-text",
  "datePickerInput": "pf-v5-c-date-picker__input",
  "formControl": "pf-v5-c-form-control",
  "modifiers": {
    "alignRight": "pf-m-align-right",
    "top": "pf-m-top",
    "static": "pf-m-static"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Popover/Popover.js
init_tslib_es6();
var React125 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Popover/popover.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Popover/popover.css";
var popover_default = {
  "modifiers": {
    "noPadding": "pf-m-no-padding",
    "widthAuto": "pf-m-width-auto",
    "top": "pf-m-top",
    "topLeft": "pf-m-top-left",
    "topRight": "pf-m-top-right",
    "bottom": "pf-m-bottom",
    "bottomLeft": "pf-m-bottom-left",
    "bottomRight": "pf-m-bottom-right",
    "left": "pf-m-left",
    "leftTop": "pf-m-left-top",
    "leftBottom": "pf-m-left-bottom",
    "right": "pf-m-right",
    "rightTop": "pf-m-right-top",
    "rightBottom": "pf-m-right-bottom",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "success": "pf-m-success",
    "custom": "pf-m-custom",
    "info": "pf-m-info"
  },
  "popover": "pf-v5-c-popover",
  "popoverArrow": "pf-v5-c-popover__arrow",
  "popoverBody": "pf-v5-c-popover__body",
  "popoverClose": "pf-v5-c-popover__close",
  "popoverContent": "pf-v5-c-popover__content",
  "popoverFooter": "pf-v5-c-popover__footer",
  "popoverHeader": "pf-v5-c-popover__header",
  "popoverTitle": "pf-v5-c-popover__title",
  "popoverTitleIcon": "pf-v5-c-popover__title-icon",
  "popoverTitleText": "pf-v5-c-popover__title-text",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverContext.js
var React116 = __toESM(require_react());
var PopoverContext = React116.createContext({});

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverContent.js
init_tslib_es6();
var React117 = __toESM(require_react());
var PopoverContent = (_a) => {
  var { className = null, children } = _a, props = __rest(_a, ["className", "children"]);
  return React117.createElement("div", Object.assign({ className: css(popover_default.popoverContent, className) }, props), children);
};
PopoverContent.displayName = "PopoverContent";

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverBody.js
init_tslib_es6();
var React118 = __toESM(require_react());
var PopoverBody = (_a) => {
  var { children, id, className } = _a, props = __rest(_a, ["children", "id", "className"]);
  return React118.createElement("div", Object.assign({ className: css(popover_default.popoverBody, className), id }, props), children);
};
PopoverBody.displayName = "PopoverBody";

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeader.js
init_tslib_es6();
var React121 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeaderIcon.js
init_tslib_es6();
var React119 = __toESM(require_react());
var PopoverHeaderIcon = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React119.createElement("span", Object.assign({ className: css(popover_default.popoverTitleIcon, className) }, props), children);
};
PopoverHeaderIcon.displayName = "PopoverHeaderIcon";

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeaderText.js
init_tslib_es6();
var React120 = __toESM(require_react());
var PopoverHeaderText = (_a) => {
  var { children, className, headingLevel } = _a, props = __rest(_a, ["children", "className", "headingLevel"]);
  const HeadingLevel = headingLevel;
  return React120.createElement(HeadingLevel, Object.assign({ className: css(popover_default.popoverTitleText, className) }, props), children);
};
PopoverHeaderText.displayName = "PopoverHeaderText";

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverHeader.js
var PopoverHeader = (_a) => {
  var { children, icon, className, titleHeadingLevel = "h6", alertSeverityVariant, id, alertSeverityScreenReaderText } = _a, props = __rest(_a, ["children", "icon", "className", "titleHeadingLevel", "alertSeverityVariant", "id", "alertSeverityScreenReaderText"]);
  return React121.createElement(
    "header",
    Object.assign({ className: css(popover_default.popoverHeader, className) }, props),
    React121.createElement(
      "div",
      { className: css(popover_default.popoverTitle), id },
      icon && React121.createElement(PopoverHeaderIcon, null, icon),
      React121.createElement(
        PopoverHeaderText,
        { headingLevel: titleHeadingLevel },
        alertSeverityVariant && alertSeverityScreenReaderText && React121.createElement("span", { className: "pf-v5-screen-reader" }, alertSeverityScreenReaderText),
        children
      )
    )
  );
};
PopoverHeader.displayName = "PopoverHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverFooter.js
init_tslib_es6();
var React122 = __toESM(require_react());
var PopoverFooter = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React122.createElement("footer", Object.assign({ className: css(popover_default.popoverFooter, className) }, props), children);
};
PopoverFooter.displayName = "PopoverFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverCloseButton.js
init_tslib_es6();
var React123 = __toESM(require_react());
var PopoverCloseButton = (_a) => {
  var { onClose = () => void 0 } = _a, props = __rest(_a, ["onClose"]);
  return React123.createElement(
    "div",
    { className: css(popover_default.popoverClose) },
    React123.createElement(
      Button,
      Object.assign({ onClick: onClose, variant: "plain", "aria-label": true }, props, { style: { pointerEvents: "auto" } }),
      React123.createElement(times_icon_default, null)
    )
  );
};
PopoverCloseButton.displayName = "PopoverCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/Popover/PopoverArrow.js
init_tslib_es6();
var React124 = __toESM(require_react());
var PopoverArrow = (_a) => {
  var { className = "" } = _a, props = __rest(_a, ["className"]);
  return React124.createElement("div", Object.assign({ className: css(popover_default.popoverArrow, className) }, props));
};
PopoverArrow.displayName = "PopoverArrow";

// node_modules/@patternfly/react-tokens/dist/esm/c_popover_MaxWidth.js
var c_popover_MaxWidth = {
  "name": "--pf-v5-c-popover--MaxWidth",
  "value": "none",
  "var": "var(--pf-v5-c-popover--MaxWidth)"
};
var c_popover_MaxWidth_default = c_popover_MaxWidth;

// node_modules/@patternfly/react-tokens/dist/esm/c_popover_MinWidth.js
var c_popover_MinWidth = {
  "name": "--pf-v5-c-popover--MinWidth",
  "value": "auto",
  "var": "var(--pf-v5-c-popover--MinWidth)"
};
var c_popover_MinWidth_default = c_popover_MinWidth;

// node_modules/@patternfly/react-core/dist/esm/components/Popover/Popover.js
var PopoverPosition;
(function(PopoverPosition2) {
  PopoverPosition2["auto"] = "auto";
  PopoverPosition2["top"] = "top";
  PopoverPosition2["bottom"] = "bottom";
  PopoverPosition2["left"] = "left";
  PopoverPosition2["right"] = "right";
  PopoverPosition2["topStart"] = "top-start";
  PopoverPosition2["topEnd"] = "top-end";
  PopoverPosition2["bottomStart"] = "bottom-start";
  PopoverPosition2["bottomEnd"] = "bottom-end";
  PopoverPosition2["leftStart"] = "left-start";
  PopoverPosition2["leftEnd"] = "left-end";
  PopoverPosition2["rightStart"] = "right-start";
  PopoverPosition2["rightEnd"] = "right-end";
})(PopoverPosition || (PopoverPosition = {}));
var alertStyle = {
  custom: popover_default.modifiers.custom,
  info: popover_default.modifiers.info,
  success: popover_default.modifiers.success,
  warning: popover_default.modifiers.warning,
  danger: popover_default.modifiers.danger
};
var Popover = (_a) => {
  var { children, position = "top", enableFlip = true, className = "", isVisible = null, shouldClose = () => null, shouldOpen = () => null, "aria-label": ariaLabel = "", bodyContent, headerContent = null, headerComponent = "h6", headerIcon = null, alertSeverityVariant, alertSeverityScreenReaderText, footerContent = null, appendTo = () => document.body, hideOnOutsideClick = true, onHide = () => null, onHidden = () => null, onShow = () => null, onShown = () => null, onMount = () => null, zIndex = 9999, triggerAction = "click", minWidth = c_popover_MinWidth_default && c_popover_MinWidth_default.value, maxWidth = c_popover_MaxWidth_default && c_popover_MaxWidth_default.value, closeBtnAriaLabel = "Close", showClose = true, distance = 25, flipBehavior = [
    "top",
    "bottom",
    "left",
    "right",
    "top-start",
    "top-end",
    "bottom-start",
    "bottom-end",
    "left-start",
    "left-end",
    "right-start",
    "right-end"
  ], animationDuration = 300, id, withFocusTrap: propWithFocusTrap, triggerRef, hasNoPadding = false, hasAutoWidth = false, elementToFocus } = _a, rest = __rest(_a, ["children", "position", "enableFlip", "className", "isVisible", "shouldClose", "shouldOpen", "aria-label", "bodyContent", "headerContent", "headerComponent", "headerIcon", "alertSeverityVariant", "alertSeverityScreenReaderText", "footerContent", "appendTo", "hideOnOutsideClick", "onHide", "onHidden", "onShow", "onShown", "onMount", "zIndex", "triggerAction", "minWidth", "maxWidth", "closeBtnAriaLabel", "showClose", "distance", "flipBehavior", "animationDuration", "id", "withFocusTrap", "triggerRef", "hasNoPadding", "hasAutoWidth", "elementToFocus"]);
  const uniqueId = id || getUniqueId();
  const triggerManually = isVisible !== null;
  const [visible, setVisible] = React125.useState(false);
  const [focusTrapActive, setFocusTrapActive] = React125.useState(Boolean(propWithFocusTrap));
  const popoverRef = React125.useRef(null);
  React125.useEffect(() => {
    onMount();
  }, []);
  React125.useEffect(() => {
    if (triggerManually) {
      if (isVisible) {
        show(void 0, true);
      } else {
        hide2();
      }
    }
  }, [isVisible, triggerManually]);
  const show = (event, withFocusTrap) => {
    event && onShow(event);
    setVisible(true);
    propWithFocusTrap !== false && withFocusTrap && setFocusTrapActive(true);
  };
  const hide2 = (event) => {
    event && onHide(event);
    setVisible(false);
  };
  const positionModifiers = {
    top: popover_default.modifiers.top,
    bottom: popover_default.modifiers.bottom,
    left: popover_default.modifiers.left,
    right: popover_default.modifiers.right,
    "top-start": popover_default.modifiers.topLeft,
    "top-end": popover_default.modifiers.topRight,
    "bottom-start": popover_default.modifiers.bottomLeft,
    "bottom-end": popover_default.modifiers.bottomRight,
    "left-start": popover_default.modifiers.leftTop,
    "left-end": popover_default.modifiers.leftBottom,
    "right-start": popover_default.modifiers.rightTop,
    "right-end": popover_default.modifiers.rightBottom
  };
  const hasCustomMinWidth = minWidth !== c_popover_MinWidth_default.value;
  const hasCustomMaxWidth = maxWidth !== c_popover_MaxWidth_default.value;
  const onDocumentKeyDown = (event) => {
    if (event.key === KeyTypes.Escape && visible) {
      if (triggerManually) {
        shouldClose(event, hide2);
      } else {
        hide2(event);
      }
    }
  };
  const onDocumentClick = (event, triggerElement, popperElement) => {
    if (hideOnOutsideClick && visible) {
      const isFromChild = popperElement && popperElement.contains(event.target);
      const isFromTrigger = triggerElement && triggerElement.contains(event.target);
      if (isFromChild || isFromTrigger) {
        return;
      }
      if (triggerManually) {
        shouldClose(event, hide2);
      } else {
        hide2(event);
      }
    }
  };
  const onTriggerClick = (event) => {
    if (triggerManually) {
      if (visible) {
        shouldClose(event, hide2);
      } else {
        shouldOpen(event, show);
      }
    } else {
      if (visible) {
        hide2(event);
      } else {
        show(event, true);
      }
    }
  };
  const onContentMouseDown = () => {
    if (focusTrapActive) {
      setFocusTrapActive(false);
    }
  };
  const onMouseEnter = (event) => {
    if (triggerManually) {
      shouldOpen(event, show);
    } else {
      show(event, false);
    }
  };
  const onMouseLeave = (event) => {
    if (triggerManually) {
      shouldClose(event, hide2);
    } else {
      hide2(event);
    }
  };
  const onFocus = (event) => {
    if (triggerManually) {
      shouldOpen(event, show);
    } else {
      show(event, false);
    }
  };
  const onBlur = (event) => {
    if (triggerManually) {
      shouldClose(event, hide2);
    } else {
      hide2(event);
    }
  };
  const closePopover = (event) => {
    event.stopPropagation();
    if (triggerManually) {
      shouldClose(event, hide2);
    } else {
      hide2(event);
    }
  };
  const content = React125.createElement(
    FocusTrap,
    Object.assign({ ref: popoverRef, active: focusTrapActive, focusTrapOptions: {
      returnFocusOnDeactivate: propWithFocusTrap !== false,
      clickOutsideDeactivates: true,
      // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
      // We want to prevent this in case false is ever passed in.
      initialFocus: elementToFocus || void 0,
      checkCanFocusTrap: (containers) => new Promise((resolve) => {
        const interval = setInterval(() => {
          if (containers.every((container) => getComputedStyle(container).visibility !== "hidden")) {
            resolve();
            clearInterval(interval);
          }
        }, 10);
      }),
      tabbableOptions: { displayCheck: "none" },
      fallbackFocus: () => {
        let node = null;
        if (document && document.activeElement) {
          node = document.activeElement;
        }
        return node;
      }
    }, preventScrollOnDeactivate: true, className: css(popover_default.popover, alertSeverityVariant && alertStyle[alertSeverityVariant], hasNoPadding && popover_default.modifiers.noPadding, hasAutoWidth && popover_default.modifiers.widthAuto, className), role: "dialog", "aria-modal": "true", "aria-label": headerContent ? void 0 : ariaLabel, "aria-labelledby": headerContent ? `popover-${uniqueId}-header` : void 0, "aria-describedby": `popover-${uniqueId}-body`, onMouseDown: onContentMouseDown, style: {
      minWidth: hasCustomMinWidth ? minWidth : null,
      maxWidth: hasCustomMaxWidth ? maxWidth : null
    } }, rest),
    React125.createElement(PopoverArrow, null),
    React125.createElement(
      PopoverContent,
      null,
      showClose && triggerAction === "click" && React125.createElement(PopoverCloseButton, { onClose: closePopover, "aria-label": closeBtnAriaLabel }),
      headerContent && React125.createElement(PopoverHeader, { id: `popover-${uniqueId}-header`, icon: headerIcon, alertSeverityVariant, alertSeverityScreenReaderText: alertSeverityScreenReaderText || `${alertSeverityVariant} alert:`, titleHeadingLevel: headerComponent }, typeof headerContent === "function" ? headerContent(hide2) : headerContent),
      React125.createElement(PopoverBody, { id: `popover-${uniqueId}-body` }, typeof bodyContent === "function" ? bodyContent(hide2) : bodyContent),
      footerContent && React125.createElement(PopoverFooter, { id: `popover-${uniqueId}-footer` }, typeof footerContent === "function" ? footerContent(hide2) : footerContent)
    )
  );
  return React125.createElement(
    PopoverContext.Provider,
    { value: { headerComponent } },
    React125.createElement(Popper, { trigger: children, triggerRef, popper: content, popperRef: popoverRef, minWidth, appendTo, isVisible: visible, onMouseEnter: triggerAction === "hover" && onMouseEnter, onMouseLeave: triggerAction === "hover" && onMouseLeave, onPopperMouseEnter: triggerAction === "hover" && onMouseEnter, onPopperMouseLeave: triggerAction === "hover" && onMouseLeave, onFocus: triggerAction === "hover" && onFocus, onBlur: triggerAction === "hover" && onBlur, positionModifiers, distance, placement: position, onTriggerClick: triggerAction === "click" && onTriggerClick, onDocumentClick, onDocumentKeyDown, enableFlip, zIndex, flipBehavior, animationDuration, onHidden, onShown, onHide: () => setFocusTrapActive(false) })
  );
};
Popover.displayName = "Popover";

// node_modules/@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon.js
var OutlinedCalendarAltIconConfig = {
  name: "OutlinedCalendarAltIcon",
  height: 512,
  width: 448,
  svgPath: "M148 288h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm108-12v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 96v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-40c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm96-260v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48zm-48 346V160H48v298c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z",
  yOffset: 0,
  xOffset: 0
};
var OutlinedCalendarAltIcon = createIcon(OutlinedCalendarAltIconConfig);
var outlined_calendar_alt_icon_default = OutlinedCalendarAltIcon;

// node_modules/@patternfly/react-core/dist/esm/components/DatePicker/DatePicker.js
var import_react14 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js
init_tslib_es6();
var React126 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.css";
var helper_text_default = {
  "helperText": "pf-v5-c-helper-text",
  "helperTextItem": "pf-v5-c-helper-text__item",
  "helperTextItemIcon": "pf-v5-c-helper-text__item-icon",
  "helperTextItemText": "pf-v5-c-helper-text__item-text",
  "modifiers": {
    "hidden": "pf-m-hidden",
    "indeterminate": "pf-m-indeterminate",
    "warning": "pf-m-warning",
    "success": "pf-m-success",
    "error": "pf-m-error",
    "dynamic": "pf-m-dynamic"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js
var HelperText = (_a) => {
  var { children, className, component = "div", id, isLiveRegion = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "component", "id", "isLiveRegion", "aria-label"]);
  const Component44 = component;
  return React126.createElement(Component44, Object.assign({ id, className: css(helper_text_default.helperText, className) }, isLiveRegion && { "aria-live": "polite" }, component === "ul" && { role: "list", "aria-label": ariaLabel }, props), children);
};
HelperText.displayName = "HelperText";

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperTextItem.js
init_tslib_es6();
var React127 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/minus-icon.js
var MinusIconConfig = {
  name: "MinusIcon",
  height: 512,
  width: 448,
  svgPath: "M416 208H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h384c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z",
  yOffset: 0,
  xOffset: 0
};
var MinusIcon = createIcon(MinusIconConfig);
var minus_icon_default = MinusIcon;

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperTextItem.js
var variantStyle = {
  default: "",
  indeterminate: helper_text_default.modifiers.indeterminate,
  warning: helper_text_default.modifiers.warning,
  success: helper_text_default.modifiers.success,
  error: helper_text_default.modifiers.error
};
var HelperTextItem = (_a) => {
  var { children, className, component = "div", variant = "default", icon, isDynamic = false, hasIcon = isDynamic, id, screenReaderText = `${variant} status` } = _a, props = __rest(_a, ["children", "className", "component", "variant", "icon", "isDynamic", "hasIcon", "id", "screenReaderText"]);
  const Component44 = component;
  return React127.createElement(
    Component44,
    Object.assign({ className: css(helper_text_default.helperTextItem, variantStyle[variant], isDynamic && helper_text_default.modifiers.dynamic, className), id }, props),
    icon && React127.createElement("span", { className: css(helper_text_default.helperTextItemIcon), "aria-hidden": true }, icon),
    hasIcon && !icon && React127.createElement(
      "span",
      { className: css(helper_text_default.helperTextItemIcon), "aria-hidden": true },
      (variant === "default" || variant === "indeterminate") && React127.createElement(minus_icon_default, null),
      variant === "warning" && React127.createElement(exclamation_triangle_icon_default, null),
      variant === "success" && React127.createElement(check_circle_icon_default, null),
      variant === "error" && React127.createElement(exclamation_circle_icon_default, null)
    ),
    React127.createElement(
      "span",
      { className: css(helper_text_default.helperTextItemText) },
      children,
      isDynamic && React127.createElement(
        "span",
        { className: "pf-v5-screen-reader" },
        ": ",
        screenReaderText,
        ";"
      )
    )
  );
};
HelperTextItem.displayName = "HelperTextItem";

// node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_width_chars.js
var c_date_picker__input_c_form_control_width_chars = {
  "name": "--pf-v5-c-date-picker__input--c-form-control--width-chars",
  "value": "10",
  "var": "var(--pf-v5-c-date-picker__input--c-form-control--width-chars)"
};
var c_date_picker_input_c_form_control_width_chars_default = c_date_picker__input_c_form_control_width_chars;

// node_modules/@patternfly/react-core/dist/esm/components/DatePicker/DatePicker.js
var yyyyMMddFormat = (date) => `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
var DatePickerBase = (_a, ref) => {
  var { className, locale = void 0, dateFormat = yyyyMMddFormat, dateParse = (val) => val.split("-").length === 3 ? /* @__PURE__ */ new Date(`${val}T00:00:00`) : /* @__PURE__ */ new Date(void 0), isDisabled = false, placeholder = "YYYY-MM-DD", value: valueProp = "", "aria-label": ariaLabel = "Date picker", buttonAriaLabel = "Toggle date picker", onChange = () => void 0, onBlur = () => void 0, invalidFormatText = "Invalid date", requiredDateOptions, helperText, appendTo = "inline", popoverProps, monthFormat, weekdayFormat, longWeekdayFormat, dayFormat, weekStart, validators = [], rangeStart, style: styleProps = {}, inputProps = {} } = _a, props = __rest(_a, ["className", "locale", "dateFormat", "dateParse", "isDisabled", "placeholder", "value", "aria-label", "buttonAriaLabel", "onChange", "onBlur", "invalidFormatText", "requiredDateOptions", "helperText", "appendTo", "popoverProps", "monthFormat", "weekdayFormat", "longWeekdayFormat", "dayFormat", "weekStart", "validators", "rangeStart", "style", "inputProps"]);
  const [value, setValue] = React128.useState(valueProp);
  const [valueDate, setValueDate] = React128.useState(dateParse(value));
  const [errorText, setErrorText] = React128.useState("");
  const [popoverOpen, setPopoverOpen] = React128.useState(false);
  const [selectOpen, setSelectOpen] = React128.useState(false);
  const [pristine, setPristine] = React128.useState(true);
  const [textInputFocused, setTextInputFocused] = React128.useState(false);
  const widthChars = React128.useMemo(() => Math.max(dateFormat(/* @__PURE__ */ new Date()).length, placeholder.length), [dateFormat]);
  const style = Object.assign({ [c_date_picker_input_c_form_control_width_chars_default.name]: widthChars }, styleProps);
  const buttonRef = React128.useRef();
  const datePickerWrapperRef = React128.useRef();
  const triggerRef = React128.useRef();
  const dateIsRequired = (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired) || false;
  const emptyDateText = (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.emptyDateText) || "Date cannot be blank";
  React128.useEffect(() => {
    setValue(valueProp);
    setValueDate(dateParse(valueProp));
  }, [valueProp]);
  React128.useEffect(() => {
    setPristine(!value);
    const newValueDate = dateParse(value);
    if (errorText && isValidDate(newValueDate)) {
      setError(newValueDate);
    }
    if (value === "" && !pristine && !textInputFocused) {
      dateIsRequired ? setErrorText(emptyDateText) : setErrorText("");
    }
  }, [value]);
  const setError = (date) => {
    setErrorText(validators.map((validator) => validator(date)).join("\n") || "");
  };
  const onTextInput = (event, value2) => {
    setValue(value2);
    setErrorText("");
    const newValueDate = dateParse(value2);
    setValueDate(newValueDate);
    if (isValidDate(newValueDate)) {
      onChange(event, value2, new Date(newValueDate));
    } else {
      onChange(event, value2);
    }
  };
  const onInputBlur = (event) => {
    setTextInputFocused(false);
    const newValueDate = dateParse(value);
    const dateIsValid = isValidDate(newValueDate);
    const onBlurDateArg = dateIsValid ? new Date(newValueDate) : void 0;
    onBlur(event, value, onBlurDateArg);
    if (dateIsValid) {
      setError(newValueDate);
    }
    if (!dateIsValid && !pristine) {
      setErrorText(invalidFormatText);
    }
    if (!dateIsValid && pristine && (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired)) {
      setErrorText(emptyDateText);
    }
  };
  const onDateClick = (_event, newValueDate) => {
    const newValue = dateFormat(newValueDate);
    setValue(newValue);
    setValueDate(newValueDate);
    setError(newValueDate);
    setPopoverOpen(false);
    onChange(null, newValue, new Date(newValueDate));
  };
  const onKeyPress = (ev) => {
    if (ev.key === "Enter" && value) {
      if (isValidDate(valueDate)) {
        setError(valueDate);
      } else {
        setErrorText(invalidFormatText);
      }
    }
  };
  (0, import_react14.useImperativeHandle)(ref, () => ({
    setCalendarOpen: (isOpen) => setPopoverOpen(isOpen),
    toggleCalendar: (setOpen) => {
      setPopoverOpen((prev) => setOpen !== void 0 ? setOpen : !prev);
    },
    isCalendarOpen: popoverOpen
  }), [setPopoverOpen, popoverOpen, selectOpen]);
  const createFocusSelectorString = (modifierClass) => `.${calendar_month_default.calendarMonthDatesCell}.${modifierClass} .${calendar_month_default.calendarMonthDate}`;
  const focusSelectorForSelectedDate = createFocusSelectorString(calendar_month_default.modifiers.selected);
  const focusSelectorForUnselectedDate = createFocusSelectorString(calendar_month_default.modifiers.current);
  return React128.createElement(
    "div",
    Object.assign({ className: css(date_picker_default.datePicker, className), ref: datePickerWrapperRef, style }, props),
    React128.createElement(
      Popover,
      Object.assign({ elementToFocus: isValidDate(valueDate) ? focusSelectorForSelectedDate : focusSelectorForUnselectedDate, position: "bottom", bodyContent: React128.createElement(CalendarMonth, {
        date: valueDate,
        onChange: onDateClick,
        locale,
        // Use truthy values of strings
        validators: validators.map((validator) => (date) => !validator(date)),
        onSelectToggle: (open) => setSelectOpen(open),
        monthFormat,
        weekdayFormat,
        longWeekdayFormat,
        dayFormat,
        weekStart,
        rangeStart
      }), showClose: false, isVisible: popoverOpen, shouldClose: (event, hideFunction) => {
        event = event;
        if (event.key === KeyTypes.Escape && selectOpen) {
          event.stopPropagation();
          setSelectOpen(false);
          return false;
        }
        if (buttonRef.current && buttonRef.current.contains(event.target)) {
          return false;
        }
        if (popoverOpen) {
          event.stopPropagation();
          setPopoverOpen(false);
          hideFunction();
          (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired) && !value && setErrorText(emptyDateText);
        }
        if (event.key === KeyTypes.Escape && popoverOpen) {
          event.stopPropagation();
        }
        return true;
      }, withFocusTrap: true, hasNoPadding: true, hasAutoWidth: true, appendTo, triggerRef }, popoverProps),
      React128.createElement(
        "div",
        { className: date_picker_default.datePickerInput, ref: triggerRef },
        React128.createElement(
          InputGroup,
          null,
          React128.createElement(
            InputGroupItem,
            null,
            React128.createElement(TextInput, Object.assign({ isDisabled, isRequired: requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired, "aria-label": ariaLabel, placeholder, validated: errorText.trim() ? "error" : "default", value, onChange: onTextInput, onBlur: onInputBlur, onFocus: () => setTextInputFocused(true), onKeyPress }, inputProps))
          ),
          React128.createElement(
            InputGroupItem,
            null,
            React128.createElement(
              "button",
              {
                ref: buttonRef,
                // TODO: Removed style follow up work with issue #8457
                className: css(button_default.button, button_default.modifiers.control),
                "aria-label": buttonAriaLabel,
                type: "button",
                onClick: () => setPopoverOpen(!popoverOpen),
                disabled: isDisabled
              },
              React128.createElement(outlined_calendar_alt_icon_default, null)
            )
          )
        )
      )
    ),
    (errorText || helperText) && React128.createElement("div", { className: date_picker_default.datePickerHelperText }, errorText ? React128.createElement(
      HelperText,
      null,
      React128.createElement(HelperTextItem, { variant: "error" }, errorText)
    ) : helperText)
  );
};
var DatePicker = React128.forwardRef(DatePickerBase);
DatePicker.displayName = "DatePicker";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionList.js
init_tslib_es6();
var React129 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/DescriptionList/description-list.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/DescriptionList/description-list.css";
var description_list_default = {
  "card": "pf-v5-c-card",
  "descriptionList": "pf-v5-c-description-list",
  "descriptionListDescription": "pf-v5-c-description-list__description",
  "descriptionListGroup": "pf-v5-c-description-list__group",
  "descriptionListTerm": "pf-v5-c-description-list__term",
  "descriptionListTermIcon": "pf-v5-c-description-list__term-icon",
  "descriptionListText": "pf-v5-c-description-list__text",
  "modifiers": {
    "inlineGrid": "pf-m-inline-grid",
    "autoColumnWidths": "pf-m-auto-column-widths",
    "autoFit": "pf-m-auto-fit",
    "compact": "pf-m-compact",
    "fluid": "pf-m-fluid",
    "fillColumns": "pf-m-fill-columns",
    "displayLg": "pf-m-display-lg",
    "display_2xl": "pf-m-display-2xl",
    "helpText": "pf-m-help-text",
    "1Col": "pf-m-1-col",
    "2Col": "pf-m-2-col",
    "3Col": "pf-m-3-col",
    "horizontal": "pf-m-horizontal",
    "vertical": "pf-m-vertical",
    "1ColOnSm": "pf-m-1-col-on-sm",
    "2ColOnSm": "pf-m-2-col-on-sm",
    "3ColOnSm": "pf-m-3-col-on-sm",
    "horizontalOnSm": "pf-m-horizontal-on-sm",
    "verticalOnSm": "pf-m-vertical-on-sm",
    "1ColOnMd": "pf-m-1-col-on-md",
    "2ColOnMd": "pf-m-2-col-on-md",
    "3ColOnMd": "pf-m-3-col-on-md",
    "horizontalOnMd": "pf-m-horizontal-on-md",
    "verticalOnMd": "pf-m-vertical-on-md",
    "1ColOnLg": "pf-m-1-col-on-lg",
    "2ColOnLg": "pf-m-2-col-on-lg",
    "3ColOnLg": "pf-m-3-col-on-lg",
    "horizontalOnLg": "pf-m-horizontal-on-lg",
    "verticalOnLg": "pf-m-vertical-on-lg",
    "1ColOnXl": "pf-m-1-col-on-xl",
    "2ColOnXl": "pf-m-2-col-on-xl",
    "3ColOnXl": "pf-m-3-col-on-xl",
    "horizontalOnXl": "pf-m-horizontal-on-xl",
    "verticalOnXl": "pf-m-vertical-on-xl",
    "1ColOn_2xl": "pf-m-1-col-on-2xl",
    "2ColOn_2xl": "pf-m-2-col-on-2xl",
    "3ColOn_2xl": "pf-m-3-col-on-2xl",
    "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
    "verticalOn_2xl": "pf-m-vertical-on-2xl"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/c_description_list_GridTemplateColumns_min.js
var c_description_list_GridTemplateColumns_min = {
  "name": "--pf-v5-c-description-list--GridTemplateColumns--min",
  "value": "0",
  "var": "var(--pf-v5-c-description-list--GridTemplateColumns--min)"
};
var c_description_list_GridTemplateColumns_min_default = c_description_list_GridTemplateColumns_min;

// node_modules/@patternfly/react-tokens/dist/esm/c_description_list__term_width.js
var c_description_list__term_width = {
  "name": "--pf-v5-c-description-list__term--width",
  "value": "12ch",
  "var": "var(--pf-v5-c-description-list__term--width)"
};
var c_description_list_term_width_default = c_description_list__term_width;

// node_modules/@patternfly/react-tokens/dist/esm/c_description_list_m_horizontal__term_width.js
var c_description_list_m_horizontal__term_width = {
  "name": "--pf-v5-c-description-list--m-horizontal__term--width",
  "value": "fit-content(20ch)",
  "var": "var(--pf-v5-c-description-list--m-horizontal__term--width)"
};
var c_description_list_m_horizontal_term_width_default = c_description_list_m_horizontal__term_width;

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionList.js
var setBreakpointModifiers = (prefix, modifiers) => {
  const mods = modifiers;
  return Object.keys(mods || {}).reduce((acc, curr) => curr === "default" ? Object.assign(Object.assign({}, acc), { [prefix]: mods[curr] }) : Object.assign(Object.assign({}, acc), { [`${prefix}-on-${curr}`]: mods[curr] }), {});
};
var DescriptionList = (_a) => {
  var { className = "", children = null, isHorizontal = false, isAutoColumnWidths, isAutoFit, isInlineGrid, isCompact, isFluid, isFillColumns, displaySize = "default", columnModifier, autoFitMinModifier, termWidth, horizontalTermWidthModifier, orientation, style } = _a, props = __rest(_a, ["className", "children", "isHorizontal", "isAutoColumnWidths", "isAutoFit", "isInlineGrid", "isCompact", "isFluid", "isFillColumns", "displaySize", "columnModifier", "autoFitMinModifier", "termWidth", "horizontalTermWidthModifier", "orientation", "style"]);
  if (isAutoFit && autoFitMinModifier) {
    style = Object.assign(Object.assign({}, style), setBreakpointModifiers(c_description_list_GridTemplateColumns_min_default.name, autoFitMinModifier));
  }
  if (termWidth) {
    style = Object.assign(Object.assign({}, style), { [c_description_list_term_width_default.name]: termWidth });
  }
  if (isHorizontal && horizontalTermWidthModifier) {
    style = Object.assign(Object.assign({}, style), setBreakpointModifiers(c_description_list_m_horizontal_term_width_default.name, horizontalTermWidthModifier));
  }
  return React129.createElement("dl", Object.assign({ className: css(description_list_default.descriptionList, (isHorizontal || isFluid) && description_list_default.modifiers.horizontal, isAutoColumnWidths && description_list_default.modifiers.autoColumnWidths, isAutoFit && description_list_default.modifiers.autoFit, formatBreakpointMods(columnModifier, description_list_default), formatBreakpointMods(orientation, description_list_default), isInlineGrid && description_list_default.modifiers.inlineGrid, isCompact && description_list_default.modifiers.compact, isFluid && description_list_default.modifiers.fluid, isFillColumns && description_list_default.modifiers.fillColumns, displaySize === "lg" && description_list_default.modifiers.displayLg, displaySize === "2xl" && description_list_default.modifiers.display_2xl, className), style }, props), children);
};
DescriptionList.displayName = "DescriptionList";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListDescription.js
init_tslib_es6();
var React130 = __toESM(require_react());
var DescriptionListDescription = (_a) => {
  var { children = null, className } = _a, props = __rest(_a, ["children", "className"]);
  return React130.createElement(
    "dd",
    Object.assign({ className: css(description_list_default.descriptionListDescription, className) }, props),
    React130.createElement("div", { className: css(description_list_default.descriptionListText) }, children)
  );
};
DescriptionListDescription.displayName = "DescriptionListDescription";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListGroup.js
init_tslib_es6();
var React131 = __toESM(require_react());
var DescriptionListGroup = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return React131.createElement("div", Object.assign({ className: css(description_list_default.descriptionListGroup, className) }, props), children);
};
DescriptionListGroup.displayName = "DescriptionListGroup";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTerm.js
init_tslib_es6();
var React132 = __toESM(require_react());
var DescriptionListTerm = (_a) => {
  var { children, className, icon } = _a, props = __rest(_a, ["children", "className", "icon"]);
  return React132.createElement(
    "dt",
    Object.assign({ className: css(description_list_default.descriptionListTerm, className) }, props),
    icon ? React132.createElement("span", { className: css(description_list_default.descriptionListTermIcon) }, icon) : null,
    React132.createElement("span", { className: css(description_list_default.descriptionListText) }, children)
  );
};
DescriptionListTerm.displayName = "DescriptionListTerm";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTermHelpText.js
init_tslib_es6();
var React133 = __toESM(require_react());
var DescriptionListTermHelpText = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React133.createElement("dt", Object.assign({ className: css(description_list_default.descriptionListTerm, className) }, props), children);
};
DescriptionListTermHelpText.displayName = "DescriptionListTermHelpText";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTermHelpTextButton.js
init_tslib_es6();
var React134 = __toESM(require_react());
var DescriptionListTermHelpTextButton = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React134.createElement("span", Object.assign({ className: css(className, description_list_default.descriptionListText, description_list_default.modifiers.helpText), role: "button", type: "button", tabIndex: 0 }, props), children);
};
DescriptionListTermHelpTextButton.displayName = "DescriptionListTermHelpTextButton";

// node_modules/@patternfly/react-core/dist/esm/components/Divider/Divider.js
init_tslib_es6();
var React135 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Divider/divider.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Divider/divider.css";
var divider_default = {
  "divider": "pf-v5-c-divider",
  "modifiers": {
    "hidden": "pf-m-hidden",
    "hiddenOnSm": "pf-m-hidden-on-sm",
    "visibleOnSm": "pf-m-visible-on-sm",
    "hiddenOnMd": "pf-m-hidden-on-md",
    "visibleOnMd": "pf-m-visible-on-md",
    "hiddenOnLg": "pf-m-hidden-on-lg",
    "visibleOnLg": "pf-m-visible-on-lg",
    "hiddenOnXl": "pf-m-hidden-on-xl",
    "visibleOnXl": "pf-m-visible-on-xl",
    "hiddenOn_2xl": "pf-m-hidden-on-2xl",
    "visibleOn_2xl": "pf-m-visible-on-2xl",
    "vertical": "pf-m-vertical",
    "insetNone": "pf-m-inset-none",
    "insetXs": "pf-m-inset-xs",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "inset_3xl": "pf-m-inset-3xl",
    "horizontalOnSm": "pf-m-horizontal-on-sm",
    "verticalOnSm": "pf-m-vertical-on-sm",
    "insetNoneOnSm": "pf-m-inset-none-on-sm",
    "insetXsOnSm": "pf-m-inset-xs-on-sm",
    "insetSmOnSm": "pf-m-inset-sm-on-sm",
    "insetMdOnSm": "pf-m-inset-md-on-sm",
    "insetLgOnSm": "pf-m-inset-lg-on-sm",
    "insetXlOnSm": "pf-m-inset-xl-on-sm",
    "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
    "inset_3xlOnSm": "pf-m-inset-3xl-on-sm",
    "horizontalOnMd": "pf-m-horizontal-on-md",
    "verticalOnMd": "pf-m-vertical-on-md",
    "insetNoneOnMd": "pf-m-inset-none-on-md",
    "insetXsOnMd": "pf-m-inset-xs-on-md",
    "insetSmOnMd": "pf-m-inset-sm-on-md",
    "insetMdOnMd": "pf-m-inset-md-on-md",
    "insetLgOnMd": "pf-m-inset-lg-on-md",
    "insetXlOnMd": "pf-m-inset-xl-on-md",
    "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
    "inset_3xlOnMd": "pf-m-inset-3xl-on-md",
    "horizontalOnLg": "pf-m-horizontal-on-lg",
    "verticalOnLg": "pf-m-vertical-on-lg",
    "insetNoneOnLg": "pf-m-inset-none-on-lg",
    "insetXsOnLg": "pf-m-inset-xs-on-lg",
    "insetSmOnLg": "pf-m-inset-sm-on-lg",
    "insetMdOnLg": "pf-m-inset-md-on-lg",
    "insetLgOnLg": "pf-m-inset-lg-on-lg",
    "insetXlOnLg": "pf-m-inset-xl-on-lg",
    "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
    "inset_3xlOnLg": "pf-m-inset-3xl-on-lg",
    "horizontalOnXl": "pf-m-horizontal-on-xl",
    "verticalOnXl": "pf-m-vertical-on-xl",
    "insetNoneOnXl": "pf-m-inset-none-on-xl",
    "insetXsOnXl": "pf-m-inset-xs-on-xl",
    "insetSmOnXl": "pf-m-inset-sm-on-xl",
    "insetMdOnXl": "pf-m-inset-md-on-xl",
    "insetLgOnXl": "pf-m-inset-lg-on-xl",
    "insetXlOnXl": "pf-m-inset-xl-on-xl",
    "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
    "inset_3xlOnXl": "pf-m-inset-3xl-on-xl",
    "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
    "verticalOn_2xl": "pf-m-vertical-on-2xl",
    "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
    "insetXsOn_2xl": "pf-m-inset-xs-on-2xl",
    "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
    "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
    "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
    "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
    "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl",
    "inset_3xlOn_2xl": "pf-m-inset-3xl-on-2xl"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Divider/Divider.js
var DividerVariant;
(function(DividerVariant2) {
  DividerVariant2["hr"] = "hr";
  DividerVariant2["li"] = "li";
  DividerVariant2["div"] = "div";
})(DividerVariant || (DividerVariant = {}));
var Divider = (_a) => {
  var { className, component = DividerVariant.hr, inset, orientation } = _a, props = __rest(_a, ["className", "component", "inset", "orientation"]);
  const Component44 = component;
  return React135.createElement(Component44, Object.assign({ className: css(divider_default.divider, formatBreakpointMods(inset, divider_default), formatBreakpointMods(orientation, divider_default), className) }, component !== "hr" && { role: "separator" }, props));
};
Divider.displayName = "Divider";

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/DragDrop.js
var React136 = __toESM(require_react());
var DragDropContext = React136.createContext({
  onDrag: (_source) => true,
  onDragMove: (_source, _dest) => {
  },
  onDrop: (_source, _dest) => false
});
var DragDrop = ({ children, onDrag = () => true, onDragMove = () => {
}, onDrop = () => false }) => React136.createElement(DragDropContext.Provider, { value: { onDrag, onDragMove, onDrop } }, children);
DragDrop.displayName = "DragDrop";

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/Draggable.js
init_tslib_es6();
var React138 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/DragDrop/drag-drop.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/DragDrop/drag-drop.css";
var drag_drop_default = {
  "draggable": "pf-v5-c-draggable",
  "droppable": "pf-v5-c-droppable",
  "modifiers": {
    "dragging": "pf-m-dragging",
    "dragOutside": "pf-m-drag-outside"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/DroppableContext.js
var React137 = __toESM(require_react());
var DroppableContext = React137.createContext({
  zone: "defaultDroppableZone",
  droppableId: "defaultDroppableId"
});

// node_modules/@patternfly/react-tokens/dist/esm/c_draggable_m_dragging_BackgroundColor.js
var c_draggable_m_dragging_BackgroundColor = {
  "name": "--pf-v5-c-draggable--m-dragging--BackgroundColor",
  "value": "#fff",
  "var": "var(--pf-v5-c-draggable--m-dragging--BackgroundColor)"
};
var c_draggable_m_dragging_BackgroundColor_default = c_draggable_m_dragging_BackgroundColor;

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/Draggable.js
function getDefaultBackground() {
  const div = document.createElement("div");
  document.head.appendChild(div);
  const bg = window.getComputedStyle(div).backgroundColor;
  document.head.removeChild(div);
  return bg;
}
function getInheritedBackgroundColor(el) {
  const defaultStyle = getDefaultBackground();
  const backgroundColor = window.getComputedStyle(el).backgroundColor;
  if (backgroundColor !== defaultStyle) {
    return backgroundColor;
  } else if (!el.parentElement) {
    return defaultStyle;
  }
  return getInheritedBackgroundColor(el.parentElement);
}
function removeBlankDiv(node) {
  if (node.getAttribute("blankDiv") === "true") {
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      if (child.getAttribute("blankDiv") === "true") {
        node.removeChild(child);
        node.setAttribute("blankDiv", "false");
        break;
      }
    }
  }
}
function resetDroppableItem(droppableItem) {
  removeBlankDiv(droppableItem.node);
  droppableItem.node.classList.remove(drag_drop_default.modifiers.dragging);
  droppableItem.node.classList.remove(drag_drop_default.modifiers.dragOutside);
  droppableItem.draggableNodes.forEach((n, i) => {
    n.style.transform = "";
    n.style.transition = "";
    droppableItem.draggableNodesRects[i] = n.getBoundingClientRect();
  });
}
function overlaps(ev, rect) {
  return ev.clientX > rect.x && ev.clientX < rect.x + rect.width && ev.clientY > rect.y && ev.clientY < rect.y + rect.height;
}
var Draggable = (_a) => {
  var { className, children, style: styleProp = {}, hasNoWrapper = false } = _a, props = __rest(_a, ["className", "children", "style", "hasNoWrapper"]);
  let [style, setStyle] = React138.useState(styleProp);
  const [isDragging, setIsDragging] = React138.useState(false);
  const [isValidDrag, setIsValidDrag] = React138.useState(true);
  const { zone, droppableId } = React138.useContext(DroppableContext);
  const { onDrag, onDragMove, onDrop } = React138.useContext(DragDropContext);
  let startX = 0;
  let startY = 0;
  let index = null;
  let hoveringDroppable;
  let hoveringIndex = null;
  let mouseMoveListener;
  let mouseUpListener;
  let startYOffset = 0;
  const onTransitionEnd = (_ev) => {
    if (isDragging) {
      setIsDragging(false);
      setStyle(styleProp);
    }
  };
  function getSourceAndDest() {
    const hoveringDroppableId = hoveringDroppable ? hoveringDroppable.getAttribute("data-pf-droppableid") : null;
    const source = {
      droppableId,
      index
    };
    const dest = hoveringDroppableId !== null && hoveringIndex !== null ? {
      droppableId: hoveringDroppableId,
      index: hoveringIndex
    } : void 0;
    return { source, dest, hoveringDroppableId };
  }
  const onMouseUpWhileDragging = (droppableItems) => {
    droppableItems.forEach(resetDroppableItem);
    document.removeEventListener("mousemove", mouseMoveListener);
    document.removeEventListener("mouseup", mouseUpListener);
    document.removeEventListener("contextmenu", mouseUpListener);
    const { source, dest, hoveringDroppableId } = getSourceAndDest();
    const consumerReordered = onDrop(source, dest);
    if (consumerReordered && droppableId === hoveringDroppableId) {
      setIsDragging(false);
      setStyle(styleProp);
    } else if (!consumerReordered) {
      setStyle(Object.assign(Object.assign({}, style), { transition: "transform 0.5s cubic-bezier(0.2, 1, 0.1, 1) 0s", transform: "", background: styleProp.background, boxShadow: styleProp.boxShadow }));
    }
  };
  const onMouseMoveWhileDragging = (ev, droppableItems, blankDivRect) => {
    hoveringDroppable = null;
    droppableItems.forEach((droppableItem) => {
      const { node, rect, isDraggingHost, draggableNodes, draggableNodesRects } = droppableItem;
      if (overlaps(ev, rect)) {
        node.classList.remove(drag_drop_default.modifiers.dragOutside);
        hoveringDroppable = node;
        if (node.getAttribute("blankDiv") !== "true" && !isDraggingHost) {
          const blankDiv = document.createElement("div");
          blankDiv.setAttribute("blankDiv", "true");
          let blankDivPos = -1;
          for (let i = 0; i < draggableNodes.length; i++) {
            const childRect = draggableNodesRects[i];
            const isLast = i === draggableNodes.length - 1;
            const startOverlaps = childRect.y >= startY - startYOffset;
            if ((startOverlaps || isLast) && blankDivPos === -1) {
              if (isLast && !startOverlaps) {
                draggableNodes[i].after(blankDiv);
              } else {
                draggableNodes[i].before(blankDiv);
              }
              blankDiv.style.height = `${blankDivRect.height}px`;
              blankDiv.style.width = `${blankDivRect.width}px`;
              node.setAttribute("blankDiv", "true");
              blankDivPos = i;
            }
            if (blankDivPos !== -1) {
              childRect.y += blankDivRect.height;
            }
          }
          draggableNodes.splice(blankDivPos, 0, blankDiv);
          draggableNodesRects.splice(blankDivPos, 0, blankDivRect);
          rect.height += blankDivRect.height;
        }
      } else {
        resetDroppableItem(droppableItem);
        node.classList.add(drag_drop_default.modifiers.dragging);
        node.classList.add(drag_drop_default.modifiers.dragOutside);
      }
    });
    setStyle(Object.assign(Object.assign({}, style), { transform: `translate(${ev.pageX - startX}px, ${ev.pageY - startY}px)` }));
    setIsValidDrag(Boolean(hoveringDroppable));
    hoveringIndex = null;
    if (hoveringDroppable) {
      const { draggableNodes, draggableNodesRects } = droppableItems.find((item) => item.node === hoveringDroppable);
      let lastTranslate = 0;
      draggableNodes.forEach((n, i) => {
        n.style.transition = "transform 0.5s cubic-bezier(0.2, 1, 0.1, 1) 0s";
        const rect = draggableNodesRects[i];
        const halfway = rect.y + rect.height / 2;
        let translateY = 0;
        if (startY < halfway && ev.pageY + (blankDivRect.height - startYOffset) > halfway) {
          translateY -= blankDivRect.height;
        } else if (startY >= halfway && ev.pageY - startYOffset <= halfway) {
          translateY += blankDivRect.height;
        }
        if (translateY <= lastTranslate && translateY < 0 || translateY > lastTranslate && translateY > 0) {
          hoveringIndex = i;
        }
        n.style.transform = `translate(0, ${translateY}px`;
        lastTranslate = translateY;
      });
    }
    const { source, dest } = getSourceAndDest();
    onDragMove(source, dest);
  };
  const onDragStart = (ev) => {
    ev.preventDefault();
    if (isDragging) {
      return;
    }
    const dragging = ev.target;
    const rect = dragging.getBoundingClientRect();
    const droppableNodes = Array.from(document.querySelectorAll(`[data-pf-droppable="${zone}"]`));
    const droppableItems = droppableNodes.reduce((acc, cur) => {
      cur.classList.add(drag_drop_default.modifiers.dragging);
      const draggableNodes = Array.from(cur.querySelectorAll(`[data-pf-draggable-zone="${zone}"]`));
      const isDraggingHost = cur.contains(dragging);
      if (isDraggingHost) {
        index = draggableNodes.indexOf(dragging);
      }
      const droppableItem = {
        node: cur,
        rect: cur.getBoundingClientRect(),
        isDraggingHost,
        // We don't want styles to apply to the left behind div in onMouseMoveWhileDragging
        draggableNodes: draggableNodes.map((node) => node === dragging ? node.cloneNode(false) : node),
        draggableNodesRects: draggableNodes.map((node) => node.getBoundingClientRect())
      };
      acc.push(droppableItem);
      return acc;
    }, []);
    if (!onDrag({ droppableId, index })) {
      droppableItems.forEach((item) => resetDroppableItem(item));
      return;
    }
    style = Object.assign(Object.assign({}, style), { top: rect.y, left: rect.x, width: rect.width, height: rect.height, [c_draggable_m_dragging_BackgroundColor_default.name]: getInheritedBackgroundColor(dragging), position: "fixed", zIndex: 5e3 });
    setStyle(style);
    startX = ev.pageX;
    startY = ev.pageY;
    startYOffset = startY - rect.y;
    setIsDragging(true);
    mouseMoveListener = (ev2) => onMouseMoveWhileDragging(ev2, droppableItems, rect);
    mouseUpListener = () => onMouseUpWhileDragging(droppableItems);
    document.addEventListener("mousemove", mouseMoveListener);
    document.addEventListener("mouseup", mouseUpListener);
  };
  const childProps = Object.assign({
    "data-pf-draggable-zone": isDragging ? null : zone,
    draggable: true,
    className: css(drag_drop_default.draggable, isDragging && drag_drop_default.modifiers.dragging, !isValidDrag && drag_drop_default.modifiers.dragOutside, className),
    onDragStart,
    onTransitionEnd,
    style
  }, props);
  return React138.createElement(
    React138.Fragment,
    null,
    isDragging && React138.createElement("div", Object.assign({ draggable: true }, props, { style: Object.assign(Object.assign({}, styleProp), { visibility: "hidden" }) }), children),
    hasNoWrapper ? React138.cloneElement(children, childProps) : React138.createElement("div", Object.assign({}, childProps), children)
  );
};
Draggable.displayName = "Draggable";

// node_modules/@patternfly/react-core/dist/esm/components/DragDrop/Droppable.js
init_tslib_es6();
var React139 = __toESM(require_react());
var Droppable = (_a) => {
  var { className, children, zone = "defaultZone", droppableId = "defaultId", hasNoWrapper = false } = _a, props = __rest(_a, ["className", "children", "zone", "droppableId", "hasNoWrapper"]);
  const childProps = Object.assign({
    "data-pf-droppable": zone,
    "data-pf-droppableid": droppableId,
    // if has no wrapper is set, don't overwrite children className with the className prop
    className: hasNoWrapper && React139.Children.count(children) === 1 ? css(drag_drop_default.droppable, className, children.props.className) : css(drag_drop_default.droppable, className)
  }, props);
  return React139.createElement(DroppableContext.Provider, { value: { zone, droppableId } }, hasNoWrapper ? React139.cloneElement(children, childProps) : React139.createElement("div", Object.assign({}, childProps), children));
};
Droppable.displayName = "Droppable";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/Drawer.js
init_tslib_es6();
var React140 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Drawer/drawer.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Drawer/drawer.css";
var drawer_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "drawer": "pf-v5-c-drawer",
  "drawerActions": "pf-v5-c-drawer__actions",
  "drawerBody": "pf-v5-c-drawer__body",
  "drawerClose": "pf-v5-c-drawer__close",
  "drawerContent": "pf-v5-c-drawer__content",
  "drawerHead": "pf-v5-c-drawer__head",
  "drawerMain": "pf-v5-c-drawer__main",
  "drawerPanel": "pf-v5-c-drawer__panel",
  "drawerPanelMain": "pf-v5-c-drawer__panel-main",
  "drawerSection": "pf-v5-c-drawer__section",
  "drawerSplitter": "pf-v5-c-drawer__splitter",
  "drawerSplitterHandle": "pf-v5-c-drawer__splitter-handle",
  "modifiers": {
    "panelBottom": "pf-m-panel-bottom",
    "inline": "pf-m-inline",
    "noBorder": "pf-m-no-border",
    "resizable": "pf-m-resizable",
    "static": "pf-m-static",
    "panelLeft": "pf-m-panel-left",
    "expanded": "pf-m-expanded",
    "resizing": "pf-m-resizing",
    "noBackground": "pf-m-no-background",
    "light_200": "pf-m-light-200",
    "noPadding": "pf-m-no-padding",
    "padding": "pf-m-padding",
    "vertical": "pf-m-vertical",
    "width_25": "pf-m-width-25",
    "width_33": "pf-m-width-33",
    "width_50": "pf-m-width-50",
    "width_66": "pf-m-width-66",
    "width_75": "pf-m-width-75",
    "width_100": "pf-m-width-100",
    "width_25OnLg": "pf-m-width-25-on-lg",
    "width_33OnLg": "pf-m-width-33-on-lg",
    "width_50OnLg": "pf-m-width-50-on-lg",
    "width_66OnLg": "pf-m-width-66-on-lg",
    "width_75OnLg": "pf-m-width-75-on-lg",
    "width_100OnLg": "pf-m-width-100-on-lg",
    "width_25OnXl": "pf-m-width-25-on-xl",
    "width_33OnXl": "pf-m-width-33-on-xl",
    "width_50OnXl": "pf-m-width-50-on-xl",
    "width_66OnXl": "pf-m-width-66-on-xl",
    "width_75OnXl": "pf-m-width-75-on-xl",
    "width_100OnXl": "pf-m-width-100-on-xl",
    "width_25On_2xl": "pf-m-width-25-on-2xl",
    "width_33On_2xl": "pf-m-width-33-on-2xl",
    "width_50On_2xl": "pf-m-width-50-on-2xl",
    "width_66On_2xl": "pf-m-width-66-on-2xl",
    "width_75On_2xl": "pf-m-width-75-on-2xl",
    "width_100On_2xl": "pf-m-width-100-on-2xl",
    "inlineOnLg": "pf-m-inline-on-lg",
    "staticOnLg": "pf-m-static-on-lg",
    "inlineOnXl": "pf-m-inline-on-xl",
    "staticOnXl": "pf-m-static-on-xl",
    "inlineOn_2xl": "pf-m-inline-on-2xl",
    "staticOn_2xl": "pf-m-static-on-2xl"
  },
  "pageMain": "pf-v5-c-page__main",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/Drawer.js
var DrawerColorVariant;
(function(DrawerColorVariant2) {
  DrawerColorVariant2["default"] = "default";
  DrawerColorVariant2["light200"] = "light-200";
  DrawerColorVariant2["noBackground"] = "no-background";
})(DrawerColorVariant || (DrawerColorVariant = {}));
var DrawerContext = React140.createContext({
  isExpanded: false,
  isStatic: false,
  onExpand: () => {
  },
  position: "end",
  drawerRef: null,
  drawerContentRef: null,
  isInline: false
});
var Drawer = (_a) => {
  var { className = "", children, isExpanded = false, isInline = false, isStatic = false, position = "end", onExpand = () => {
  } } = _a, props = __rest(_a, ["className", "children", "isExpanded", "isInline", "isStatic", "position", "onExpand"]);
  const drawerRef = React140.useRef();
  const drawerContentRef = React140.useRef();
  return React140.createElement(
    DrawerContext.Provider,
    { value: { isExpanded, isStatic, onExpand, position, drawerRef, drawerContentRef, isInline } },
    React140.createElement("div", Object.assign({ className: css(drawer_default.drawer, isExpanded && drawer_default.modifiers.expanded, isInline && drawer_default.modifiers.inline, isStatic && drawer_default.modifiers.static, (position === "left" || position === "start") && drawer_default.modifiers.panelLeft, position === "bottom" && drawer_default.modifiers.panelBottom, className), ref: drawerRef }, props), children)
  );
};
Drawer.displayName = "Drawer";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerActions.js
init_tslib_es6();
var React141 = __toESM(require_react());
var DrawerActions = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    children
  } = _a, props = __rest(_a, ["className", "children"]);
  return React141.createElement("div", Object.assign({ className: css(drawer_default.drawerActions, className) }, props), children);
};
DrawerActions.displayName = "DrawerActions";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerCloseButton.js
init_tslib_es6();
var React142 = __toESM(require_react());
var DrawerCloseButton = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    onClose = () => void 0,
    "aria-label": ariaLabel = "Close drawer panel"
  } = _a, props = __rest(_a, ["className", "onClose", "aria-label"]);
  return React142.createElement(
    "div",
    Object.assign({ className: css(drawer_default.drawerClose, className) }, props),
    React142.createElement(
      Button,
      { variant: "plain", onClick: onClose, "aria-label": ariaLabel },
      React142.createElement(times_icon_default, null)
    )
  );
};
DrawerCloseButton.displayName = "DrawerCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContent.js
init_tslib_es6();
var React144 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerMain.js
init_tslib_es6();
var React143 = __toESM(require_react());
var DrawerMain = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    children
  } = _a, props = __rest(_a, ["className", "children"]);
  return React143.createElement("div", Object.assign({ className: css(drawer_default.drawerMain, className) }, props), children);
};
DrawerMain.displayName = "DrawerMain";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContent.js
var DrawerContent = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    children,
    panelContent,
    colorVariant = DrawerColorVariant.default
  } = _a, props = __rest(_a, ["className", "children", "panelContent", "colorVariant"]);
  const { drawerContentRef } = React144.useContext(DrawerContext);
  return React144.createElement(
    DrawerMain,
    null,
    React144.createElement("div", Object.assign({ className: css(drawer_default.drawerContent, colorVariant === DrawerColorVariant.light200 && drawer_default.modifiers.light_200, colorVariant === DrawerColorVariant.noBackground && drawer_default.modifiers.noBackground, className), ref: drawerContentRef }, props), children),
    panelContent
  );
};
DrawerContent.displayName = "DrawerContent";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContentBody.js
init_tslib_es6();
var React145 = __toESM(require_react());
var DrawerContentBody = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    children,
    hasPadding = false
  } = _a, props = __rest(_a, ["className", "children", "hasPadding"]);
  return React145.createElement("div", Object.assign({ className: css(drawer_default.drawerBody, hasPadding && drawer_default.modifiers.padding, className) }, props), children);
};
DrawerContentBody.displayName = "DrawerContentBody";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js
init_tslib_es6();
var React147 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelBody.js
init_tslib_es6();
var React146 = __toESM(require_react());
var DrawerPanelBody = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    children,
    hasNoPadding = false
  } = _a, props = __rest(_a, ["className", "children", "hasNoPadding"]);
  return React146.createElement("div", Object.assign({ className: css(drawer_default.drawerBody, hasNoPadding && drawer_default.modifiers.noPadding, className) }, props), children);
};
DrawerPanelBody.displayName = "DrawerPanelBody";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js
var DrawerHead = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    children,
    hasNoPadding = false
  } = _a, props = __rest(_a, ["className", "children", "hasNoPadding"]);
  return React147.createElement(
    DrawerPanelBody,
    { hasNoPadding },
    React147.createElement("div", Object.assign({ className: css(drawer_default.drawerHead, className) }, props), children)
  );
};
DrawerHead.displayName = "DrawerHead";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelContent.js
init_tslib_es6();
var React148 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis.js
var c_drawer__panel_md_FlexBasis = {
  "name": "--pf-v5-c-drawer__panel--md--FlexBasis",
  "value": "50%",
  "var": "var(--pf-v5-c-drawer__panel--md--FlexBasis)"
};
var c_drawer_panel_md_FlexBasis_default = c_drawer__panel_md_FlexBasis;

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis_min.js
var c_drawer__panel_md_FlexBasis_min = {
  "name": "--pf-v5-c-drawer__panel--md--FlexBasis--min",
  "value": "1.5rem",
  "var": "var(--pf-v5-c-drawer__panel--md--FlexBasis--min)"
};
var c_drawer_panel_md_FlexBasis_min_default = c_drawer__panel_md_FlexBasis_min;

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis_max.js
var c_drawer__panel_md_FlexBasis_max = {
  "name": "--pf-v5-c-drawer__panel--md--FlexBasis--max",
  "value": "100%",
  "var": "var(--pf-v5-c-drawer__panel--md--FlexBasis--max)"
};
var c_drawer_panel_md_FlexBasis_max_default = c_drawer__panel_md_FlexBasis_max;

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelContent.js
var isResizing = null;
var newSize = 0;
var DrawerPanelContent = (_a) => {
  var { className = "", id, children, hasNoBorder = false, isResizable = false, onResize, minSize, defaultSize, maxSize, increment = 5, resizeAriaLabel = "Resize", widths, colorVariant = DrawerColorVariant.default, focusTrap } = _a, props = __rest(_a, ["className", "id", "children", "hasNoBorder", "isResizable", "onResize", "minSize", "defaultSize", "maxSize", "increment", "resizeAriaLabel", "widths", "colorVariant", "focusTrap"]);
  const panel = React148.useRef();
  const splitterRef = React148.useRef();
  const [separatorValue, setSeparatorValue] = React148.useState(0);
  const { position, isExpanded, isStatic, onExpand, drawerRef, drawerContentRef, isInline } = React148.useContext(DrawerContext);
  const hidden = isStatic ? false : !isExpanded;
  const [isExpandedInternal, setIsExpandedInternal] = React148.useState(!hidden);
  const [isFocusTrapActive, setIsFocusTrapActive] = React148.useState(false);
  const previouslyFocusedElement = React148.useRef(null);
  let currWidth = 0;
  let panelRect;
  let end2;
  let start2;
  let bottom2;
  let setInitialVals = true;
  if (isStatic && (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.enabled)) {
    console.warn(`DrawerPanelContent: The focusTrap.enabled prop cannot be true if the Drawer's isStatic prop is true. This will cause a permanent focus trap.`);
  }
  React148.useEffect(() => {
    if (!isStatic && isExpanded) {
      setIsExpandedInternal(isExpanded);
    }
  }, [isStatic, isExpanded]);
  const calcValueNow = () => {
    let splitterPos;
    let drawerSize;
    const isRTL = getLanguageDirection(panel.current) === "rtl";
    if (isInline && (position === "end" || position === "right")) {
      if (isRTL) {
        splitterPos = panel.current.getBoundingClientRect().left - splitterRef.current.getBoundingClientRect().right;
        drawerSize = drawerRef.current.getBoundingClientRect().left - drawerRef.current.getBoundingClientRect().right;
      } else {
        splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;
        drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;
      }
    } else if (isInline && (position === "start" || position === "left")) {
      if (isRTL) {
        splitterPos = splitterRef.current.getBoundingClientRect().left - panel.current.getBoundingClientRect().right;
        drawerSize = drawerRef.current.getBoundingClientRect().left - drawerRef.current.getBoundingClientRect().right;
      } else {
        splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;
        drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;
      }
    } else if (position === "end" || position === "right") {
      if (isRTL) {
        splitterPos = drawerContentRef.current.getBoundingClientRect().left - splitterRef.current.getBoundingClientRect().right;
        drawerSize = drawerContentRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
      } else {
        splitterPos = drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;
        drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
      }
    } else if (position === "start" || position === "left") {
      if (isRTL) {
        splitterPos = splitterRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
        drawerSize = drawerContentRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
      } else {
        splitterPos = splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
        drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
      }
    } else if (position === "bottom") {
      splitterPos = drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;
      drawerSize = drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;
    }
    const newSplitterPos = splitterPos / drawerSize * 100;
    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;
  };
  const handleTouchStart = (e) => {
    e.stopPropagation();
    document.addEventListener("touchmove", callbackTouchMove, { passive: false });
    document.addEventListener("touchend", callbackTouchEnd);
    isResizing = true;
  };
  const handleMousedown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    document.addEventListener("mousemove", callbackMouseMove);
    document.addEventListener("mouseup", callbackMouseUp);
    drawerRef.current.classList.add(css(drawer_default.modifiers.resizing));
    isResizing = true;
    setInitialVals = true;
  };
  const handleMouseMove = (e) => {
    const mousePos = position === "bottom" ? e.clientY : e.clientX;
    handleControlMove(e, mousePos);
  };
  const handleTouchMove = (e) => {
    e.preventDefault();
    e.stopImmediatePropagation();
    const touchPos = position === "bottom" ? e.touches[0].clientY : e.touches[0].clientX;
    handleControlMove(e, touchPos);
  };
  const handleControlMove = (e, controlPosition) => {
    const isRTL = getLanguageDirection(panel.current) === "rtl";
    e.stopPropagation();
    if (!isResizing) {
      return;
    }
    if (setInitialVals) {
      panelRect = panel.current.getBoundingClientRect();
      if (isRTL) {
        start2 = panelRect.right;
        end2 = panelRect.left;
      } else {
        end2 = panelRect.right;
        start2 = panelRect.left;
      }
      bottom2 = panelRect.bottom;
      setInitialVals = false;
    }
    const mousePos = controlPosition;
    let newSize2 = 0;
    if (position === "end" || position === "right") {
      newSize2 = isRTL ? mousePos - end2 : end2 - mousePos;
    } else if (position === "start" || position === "left") {
      newSize2 = isRTL ? start2 - mousePos : mousePos - start2;
    } else {
      newSize2 = bottom2 - mousePos;
    }
    if (position === "bottom") {
      panel.current.style.overflowAnchor = "none";
    }
    panel.current.style.setProperty(c_drawer_panel_md_FlexBasis_default.name, newSize2 + "px");
    currWidth = newSize2;
    setSeparatorValue(calcValueNow());
  };
  const handleMouseup = (e) => {
    if (!isResizing) {
      return;
    }
    drawerRef.current.classList.remove(css(drawer_default.modifiers.resizing));
    isResizing = false;
    onResize && onResize(e, currWidth, id);
    setInitialVals = true;
    document.removeEventListener("mousemove", callbackMouseMove);
    document.removeEventListener("mouseup", callbackMouseUp);
  };
  const handleTouchEnd = (e) => {
    e.stopPropagation();
    if (!isResizing) {
      return;
    }
    isResizing = false;
    onResize && onResize(e, currWidth, id);
    document.removeEventListener("touchmove", callbackTouchMove);
    document.removeEventListener("touchend", callbackTouchEnd);
  };
  const callbackMouseMove = React148.useCallback(handleMouseMove, []);
  const callbackTouchEnd = React148.useCallback(handleTouchEnd, []);
  const callbackTouchMove = React148.useCallback(handleTouchMove, []);
  const callbackMouseUp = React148.useCallback(handleMouseup, []);
  const handleKeys = (e) => {
    const isRTL = getLanguageDirection(panel.current) === "rtl";
    const key = e.key;
    if (key !== "Escape" && key !== "Enter" && key !== "ArrowUp" && key !== "ArrowDown" && key !== "ArrowLeft" && key !== "ArrowRight") {
      if (isResizing) {
        e.preventDefault();
      }
      return;
    }
    e.preventDefault();
    if (key === "Escape" || key === "Enter") {
      onResize && onResize(e, currWidth, id);
    }
    const panelRect2 = panel.current.getBoundingClientRect();
    newSize = position === "bottom" ? panelRect2.height : panelRect2.width;
    let delta = 0;
    if (key === "ArrowRight") {
      if (isRTL) {
        delta = position === "left" || position === "start" ? -increment : increment;
      } else {
        delta = position === "left" || position === "start" ? increment : -increment;
      }
    } else if (key === "ArrowLeft") {
      if (isRTL) {
        delta = position === "left" || position === "start" ? increment : -increment;
      } else {
        delta = position === "left" || position === "start" ? -increment : increment;
      }
    } else if (key === "ArrowUp") {
      delta = increment;
    } else if (key === "ArrowDown") {
      delta = -increment;
    }
    newSize = newSize + delta;
    if (position === "bottom") {
      panel.current.style.overflowAnchor = "none";
    }
    panel.current.style.setProperty(c_drawer_panel_md_FlexBasis_default.name, newSize + "px");
    currWidth = newSize;
    setSeparatorValue(calcValueNow());
  };
  const boundaryCssVars = {};
  if (defaultSize) {
    boundaryCssVars[c_drawer_panel_md_FlexBasis_default.name] = defaultSize;
  }
  if (minSize) {
    boundaryCssVars[c_drawer_panel_md_FlexBasis_min_default.name] = minSize;
  }
  if (maxSize) {
    boundaryCssVars[c_drawer_panel_md_FlexBasis_max_default.name] = maxSize;
  }
  const isValidFocusTrap = (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.enabled) && !isStatic;
  const Component44 = isValidFocusTrap ? FocusTrap : "div";
  return React148.createElement(GenerateId, { prefix: "pf-drawer-panel-" }, (panelId) => {
    const focusTrapProps = {
      tabIndex: -1,
      "aria-modal": true,
      role: "dialog",
      active: isFocusTrapActive,
      "aria-labelledby": (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap["aria-labelledby"]) || id || panelId,
      focusTrapOptions: {
        fallbackFocus: () => panel.current,
        onActivate: () => {
          if (previouslyFocusedElement.current !== document.activeElement) {
            previouslyFocusedElement.current = document.activeElement;
          }
        },
        onDeactivate: () => {
          previouslyFocusedElement.current && previouslyFocusedElement.current.focus && previouslyFocusedElement.current.focus();
        },
        clickOutsideDeactivates: true,
        returnFocusOnDeactivate: false,
        // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
        // We want to prevent this in case false is ever passed in.
        initialFocus: (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.elementToFocusOnExpand) || void 0,
        escapeDeactivates: false
      }
    };
    return React148.createElement(Component44, Object.assign({}, isValidFocusTrap && focusTrapProps, { id: id || panelId, className: css(drawer_default.drawerPanel, isResizable && drawer_default.modifiers.resizable, hasNoBorder && drawer_default.modifiers.noBorder, formatBreakpointMods(widths, drawer_default), colorVariant === DrawerColorVariant.light200 && drawer_default.modifiers.light_200, colorVariant === DrawerColorVariant.noBackground && drawer_default.modifiers.noBackground, className), onTransitionEnd: (ev) => {
      if (ev.target === panel.current) {
        if (!hidden && ev.nativeEvent.propertyName === "transform") {
          onExpand(ev);
        }
        setIsExpandedInternal(!hidden);
        if (isValidFocusTrap && ev.nativeEvent.propertyName === "transform") {
          setIsFocusTrapActive((prevIsFocusTrapActive) => !prevIsFocusTrapActive);
        }
      }
    }, hidden }, (defaultSize || minSize || maxSize) && {
      style: boundaryCssVars
    }, props, { ref: panel }), isExpandedInternal && React148.createElement(
      React148.Fragment,
      null,
      isResizable && React148.createElement(
        React148.Fragment,
        null,
        React148.createElement(
          "div",
          { className: css(drawer_default.drawerSplitter, position !== "bottom" && drawer_default.modifiers.vertical), role: "separator", tabIndex: 0, "aria-orientation": position === "bottom" ? "horizontal" : "vertical", "aria-label": resizeAriaLabel, "aria-valuenow": separatorValue, "aria-valuemin": 0, "aria-valuemax": 100, "aria-controls": id || panelId, onMouseDown: handleMousedown, onKeyDown: handleKeys, onTouchStart: handleTouchStart, ref: splitterRef },
          React148.createElement("div", { className: css(drawer_default.drawerSplitterHandle), "aria-hidden": true })
        ),
        React148.createElement("div", { className: css(drawer_default.drawerPanelMain) }, children)
      ),
      !isResizable && children
    ));
  });
};
DrawerPanelContent.displayName = "DrawerPanelContent";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerSection.js
init_tslib_es6();
var React149 = __toESM(require_react());
var DrawerSection = (_a) => {
  var {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    className = "",
    children,
    colorVariant = DrawerColorVariant.default
  } = _a, props = __rest(_a, ["className", "children", "colorVariant"]);
  return React149.createElement("div", Object.assign({ className: css(drawer_default.drawerSection, colorVariant === DrawerColorVariant.light200 && drawer_default.modifiers.light_200, colorVariant === DrawerColorVariant.noBackground && drawer_default.modifiers.noBackground, className) }, props), children);
};
DrawerSection.displayName = "DrawerSection";

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/Dropdown.js
init_tslib_es6();
var import_react15 = __toESM(require_react());
var DropdownBase = (_a) => {
  var { children, className, onSelect, isOpen, toggle, shouldFocusToggleOnSelect = false, onOpenChange, isPlain, isScrollable, innerRef, ouiaId, ouiaSafe = true, zIndex = 9999, popperProps, onOpenChangeKeys = ["Escape", "Tab"] } = _a, props = __rest(_a, ["children", "className", "onSelect", "isOpen", "toggle", "shouldFocusToggleOnSelect", "onOpenChange", "isPlain", "isScrollable", "innerRef", "ouiaId", "ouiaSafe", "zIndex", "popperProps", "onOpenChangeKeys"]);
  const localMenuRef = import_react15.default.useRef();
  const localToggleRef = import_react15.default.useRef();
  const ouiaProps = useOUIAProps(Dropdown.displayName, ouiaId, ouiaSafe);
  const menuRef = innerRef || localMenuRef;
  const toggleRef = typeof toggle === "function" || typeof toggle !== "function" && !toggle.toggleRef ? localToggleRef : toggle === null || toggle === void 0 ? void 0 : toggle.toggleRef;
  import_react15.default.useEffect(() => {
    const handleMenuKeys = (event) => {
      var _a2, _b, _c;
      if (isOpen && onOpenChange && (((_a2 = menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)))) {
        if (onOpenChangeKeys.includes(event.key)) {
          onOpenChange(false);
          (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
        }
      }
    };
    const handleClick = (event) => {
      var _a2, _b, _c;
      if (isOpen && ((_a2 = toggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(event.target)) && event.detail === 0) {
        setTimeout(() => {
          var _a3;
          const firstElement = (_a3 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a3 === void 0 ? void 0 : _a3.querySelector('li button:not(:disabled),li input:not(:disabled),li a:not([aria-disabled="true"])');
          firstElement && firstElement.focus();
        }, 0);
      }
      if (isOpen && onOpenChange && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
        if (isOpen && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
          onOpenChange(false);
        }
      }
    };
    window.addEventListener("keydown", handleMenuKeys);
    window.addEventListener("click", handleClick);
    return () => {
      window.removeEventListener("keydown", handleMenuKeys);
      window.removeEventListener("click", handleClick);
    };
  }, [isOpen, menuRef, toggleRef, onOpenChange, onOpenChangeKeys]);
  const menu = import_react15.default.createElement(
    Menu,
    Object.assign({ className: css(className), ref: menuRef, onSelect: (event, value) => {
      onSelect && onSelect(event, value);
      shouldFocusToggleOnSelect && toggleRef.current.focus();
    }, isPlain, isScrollable }, props, ouiaProps),
    import_react15.default.createElement(MenuContent, null, children)
  );
  return import_react15.default.createElement(Popper, Object.assign({ trigger: typeof toggle === "function" ? toggle(toggleRef) : toggle.toggleNode, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, zIndex }, popperProps));
};
var Dropdown = import_react15.default.forwardRef((props, ref) => import_react15.default.createElement(DropdownBase, Object.assign({ innerRef: ref }, props)));
Dropdown.displayName = "Dropdown";

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownGroup.js
init_tslib_es6();
var import_react16 = __toESM(require_react());
var DropdownGroup = (_a) => {
  var { children, className, label, labelHeadingLevel = "h1" } = _a, props = __rest(_a, ["children", "className", "label", "labelHeadingLevel"]);
  return import_react16.default.createElement(MenuGroup, Object.assign({ className: css(className), label, labelHeadingLevel }, props), children);
};
DropdownGroup.displayName = "DropdownGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownItem.js
init_tslib_es6();
var import_react17 = __toESM(require_react());
var DropdownItemBase = (_a) => {
  var { children, className, description, isDisabled, isAriaDisabled, value, onClick, ouiaId, ouiaSafe, innerRef, tooltipProps } = _a, props = __rest(_a, ["children", "className", "description", "isDisabled", "isAriaDisabled", "value", "onClick", "ouiaId", "ouiaSafe", "innerRef", "tooltipProps"]);
  const ouiaProps = useOUIAProps(DropdownItem.displayName, ouiaId, ouiaSafe);
  return import_react17.default.createElement(MenuItem, Object.assign({ className: css(className), description, isDisabled, isAriaDisabled, itemId: value, onClick, tooltipProps, ref: innerRef }, ouiaProps, props), children);
};
var DropdownItem = import_react17.default.forwardRef((props, ref) => import_react17.default.createElement(DropdownItemBase, Object.assign({}, props, { innerRef: ref })));
DropdownItem.displayName = "DropdownItem";

// node_modules/@patternfly/react-core/dist/esm/components/Dropdown/DropdownList.js
init_tslib_es6();
var import_react18 = __toESM(require_react());
var DropdownList = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return import_react18.default.createElement(MenuList, Object.assign({ className: css(className) }, props), children);
};
DropdownList.displayName = "DropdownList";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelector.js
init_tslib_es6();
var React186 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/DualListSelector/dual-list-selector.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/DualListSelector/dual-list-selector.css";
var dual_list_selector_default = {
  "badge": "pf-v5-c-badge",
  "button": "pf-v5-c-button",
  "dirRtl": "pf-v5-m-dir-rtl",
  "dualListSelector": "pf-v5-c-dual-list-selector",
  "dualListSelectorControls": "pf-v5-c-dual-list-selector__controls",
  "dualListSelectorControlsItem": "pf-v5-c-dual-list-selector__controls-item",
  "dualListSelectorDraggable": "pf-v5-c-dual-list-selector__draggable",
  "dualListSelectorHeader": "pf-v5-c-dual-list-selector__header",
  "dualListSelectorItem": "pf-v5-c-dual-list-selector__item",
  "dualListSelectorItemCheck": "pf-v5-c-dual-list-selector__item-check",
  "dualListSelectorItemCount": "pf-v5-c-dual-list-selector__item-count",
  "dualListSelectorItemMain": "pf-v5-c-dual-list-selector__item-main",
  "dualListSelectorItemText": "pf-v5-c-dual-list-selector__item-text",
  "dualListSelectorItemToggle": "pf-v5-c-dual-list-selector__item-toggle",
  "dualListSelectorItemToggleIcon": "pf-v5-c-dual-list-selector__item-toggle-icon",
  "dualListSelectorList": "pf-v5-c-dual-list-selector__list",
  "dualListSelectorListItem": "pf-v5-c-dual-list-selector__list-item",
  "dualListSelectorListItemRow": "pf-v5-c-dual-list-selector__list-item-row",
  "dualListSelectorMain": "pf-v5-c-dual-list-selector__main",
  "dualListSelectorMenu": "pf-v5-c-dual-list-selector__menu",
  "dualListSelectorPane": "pf-v5-c-dual-list-selector__pane",
  "dualListSelectorStatus": "pf-v5-c-dual-list-selector__status",
  "dualListSelectorStatusText": "pf-v5-c-dual-list-selector__status-text",
  "dualListSelectorTitleText": "pf-v5-c-dual-list-selector__title-text",
  "dualListSelectorTools": "pf-v5-c-dual-list-selector__tools",
  "dualListSelectorToolsActions": "pf-v5-c-dual-list-selector__tools-actions",
  "dualListSelectorToolsFilter": "pf-v5-c-dual-list-selector__tools-filter",
  "modifiers": {
    "chosen": "pf-m-chosen",
    "dragOver": "pf-m-drag-over",
    "expandable": "pf-m-expandable",
    "expanded": "pf-m-expanded",
    "disabled": "pf-m-disabled",
    "selected": "pf-m-selected",
    "check": "pf-m-check",
    "ghostRow": "pf-m-ghost-row",
    "read": "pf-m-read"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-double-left-icon.js
var AngleDoubleLeftIconConfig = {
  name: "AngleDoubleLeftIcon",
  height: 512,
  width: 448,
  svgPath: "M223.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L319.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L393.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34zm-192 34l136 136c9.4 9.4 24.6 9.4 33.9 0l22.6-22.6c9.4-9.4 9.4-24.6 0-33.9L127.9 256l96.4-96.4c9.4-9.4 9.4-24.6 0-33.9L201.7 103c-9.4-9.4-24.6-9.4-33.9 0l-136 136c-9.5 9.4-9.5 24.6-.1 34z",
  yOffset: 0,
  xOffset: 0
};
var AngleDoubleLeftIcon = createIcon(AngleDoubleLeftIconConfig);
var angle_double_left_icon_default = AngleDoubleLeftIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-double-right-icon.js
var AngleDoubleRightIconConfig = {
  name: "AngleDoubleRightIcon",
  height: 512,
  width: 448,
  svgPath: "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34zm192-34l-136-136c-9.4-9.4-24.6-9.4-33.9 0l-22.6 22.6c-9.4 9.4-9.4 24.6 0 33.9l96.4 96.4-96.4 96.4c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l136-136c9.4-9.2 9.4-24.4 0-33.8z",
  yOffset: 0,
  xOffset: 0
};
var AngleDoubleRightIcon = createIcon(AngleDoubleRightIconConfig);
var angle_double_right_icon_default = AngleDoubleRightIcon;

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorPane.js
init_tslib_es6();
var React183 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTree.js
init_tslib_es6();
var React156 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTreeItem.js
init_tslib_es6();
var React155 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/treeUtils.js
function flattenTree(tree) {
  let result = [];
  tree.forEach((item) => {
    if (item.children) {
      result = result.concat(flattenTree(item.children));
    } else {
      result.push(item.id);
    }
  });
  return result;
}
function flattenTreeWithFolders(tree) {
  let result = [];
  tree.forEach((item) => {
    result.push(item.id);
    if (item.children) {
      result = result.concat(flattenTreeWithFolders(item.children));
    }
  });
  return result;
}
function filterFolders(tree, inputList) {
  let result = [];
  tree.forEach((item) => {
    if (item.children) {
      result = result.concat(filterFolders(item.children, inputList));
    } else {
      if (inputList.includes(item.id)) {
        result.push(item.id);
      }
    }
  });
  return result;
}
function filterTreeItems(item, inputList) {
  if (inputList.includes(item.id)) {
    return true;
  }
  if (item.children) {
    return (item.children = item.children.map((opt) => Object.assign({}, opt)).filter((child) => filterTreeItems(child, inputList))).length > 0;
  }
}
function filterTreeItemsWithoutFolders(item, inputList) {
  if (item.children) {
    return (item.children = item.children.map((opt) => Object.assign({}, opt)).filter((child) => child.children ? filterTreeItemsWithoutFolders(child, inputList) : filterTreeItems(child, inputList))).length > 0;
  }
  if (inputList.includes(item.id)) {
    return true;
  }
}
function filterRestTreeItems(item, inputList) {
  if (item.children) {
    const child = (item.children = item.children.map((opt) => Object.assign({}, opt)).filter((child2) => filterRestTreeItems(child2, inputList))).length > 0;
    return child;
  }
  if (!inputList.includes(item.id)) {
    return true;
  }
}

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorContext.js
var React154 = __toESM(require_react());
var DualListSelectorContext = React154.createContext({ isTree: false });
var DualListSelectorListContext = React154.createContext({});
var DualListSelectorPaneContext = React154.createContext({ isChosen: false });

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTreeItem.js
var DualListSelectorTreeItemBase = (_a) => {
  var {
    onOptionCheck,
    children,
    className,
    id,
    text,
    defaultExpanded,
    hasBadge,
    isChecked,
    checkProps,
    badgeProps,
    itemData,
    isDisabled = false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    useMemo: useMemo8
  } = _a, props = __rest(_a, ["onOptionCheck", "children", "className", "id", "text", "defaultExpanded", "hasBadge", "isChecked", "checkProps", "badgeProps", "itemData", "isDisabled", "useMemo"]);
  const ref = React155.useRef(null);
  const [isExpanded, setIsExpanded] = React155.useState(defaultExpanded || false);
  const { setFocusedOption } = React155.useContext(DualListSelectorListContext);
  React155.useEffect(() => {
    setIsExpanded(defaultExpanded);
  }, [defaultExpanded]);
  return React155.createElement(
    "li",
    Object.assign({ className: css(dual_list_selector_default.dualListSelectorListItem, className, children && dual_list_selector_default.modifiers.expandable, isExpanded && dual_list_selector_default.modifiers.expanded, isDisabled && dual_list_selector_default.modifiers.disabled), id }, props, { "aria-selected": isChecked, role: "treeitem" }, isExpanded && { "aria-expanded": "true" }),
    React155.createElement(
      "div",
      { className: css(dual_list_selector_default.dualListSelectorListItemRow, isChecked && dual_list_selector_default.modifiers.selected, dual_list_selector_default.modifiers.check) },
      React155.createElement(
        "div",
        { className: css(dual_list_selector_default.dualListSelectorItem), ref, tabIndex: -1, onClick: isDisabled ? void 0 : (evt) => {
          onOptionCheck && onOptionCheck(evt, !isChecked, itemData);
          setFocusedOption(id);
        } },
        React155.createElement(
          "span",
          { className: css(dual_list_selector_default.dualListSelectorItemMain) },
          children && React155.createElement(
            "div",
            { className: css(dual_list_selector_default.dualListSelectorItemToggle), onClick: (e) => {
              if (children) {
                setIsExpanded(!isExpanded);
              }
              e.stopPropagation();
            }, onKeyDown: (e) => {
              if (e.key === " " || e.key === "Enter") {
                document.activeElement.click();
                e.preventDefault();
              }
            }, tabIndex: -1 },
            React155.createElement(
              "span",
              { className: css(dual_list_selector_default.dualListSelectorItemToggleIcon) },
              React155.createElement(angle_right_icon_default, { "aria-hidden": true })
            )
          ),
          React155.createElement(
            "span",
            { className: css(dual_list_selector_default.dualListSelectorItemCheck) },
            React155.createElement("input", Object.assign({ type: "checkbox", onChange: (evt) => {
              onOptionCheck && onOptionCheck(evt, !isChecked, itemData);
              setFocusedOption(id);
            }, onClick: (evt) => evt.stopPropagation(), onKeyDown: (e) => {
              if (e.key === " " || e.key === "Enter") {
                onOptionCheck && onOptionCheck(e, !isChecked, itemData);
                setFocusedOption(id);
                e.preventDefault();
              }
            }, ref: (elem) => elem && (elem.indeterminate = isChecked === null), checked: isChecked || false, tabIndex: -1 }, checkProps))
          ),
          React155.createElement("span", { className: css(dual_list_selector_default.dualListSelectorItemText) }, text),
          hasBadge && children && React155.createElement(
            "span",
            { className: css(dual_list_selector_default.dualListSelectorItemCount) },
            React155.createElement(Badge, Object.assign({}, badgeProps), flattenTree(children.props.data).length)
          )
        )
      )
    ),
    isExpanded && children
  );
};
var DualListSelectorTreeItem = React155.memo(DualListSelectorTreeItemBase, (prevProps, nextProps) => {
  if (!nextProps.useMemo) {
    return false;
  }
  if (prevProps.className !== nextProps.className || prevProps.text !== nextProps.text || prevProps.id !== nextProps.id || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isChecked !== nextProps.isChecked || prevProps.itemData !== nextProps.itemData) {
    return false;
  }
  return true;
});
DualListSelectorTreeItem.displayName = "DualListSelectorTreeItem";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTree.js
var DualListSelectorTree = (_a) => {
  var { data, hasBadges = false, isNested = false, defaultAllExpanded = false, onOptionCheck, isDisabled = false } = _a, props = __rest(_a, ["data", "hasBadges", "isNested", "defaultAllExpanded", "onOptionCheck", "isDisabled"]);
  const dataToRender = typeof data === "function" ? data() : data;
  const tree = dataToRender.map((item) => React156.createElement(DualListSelectorTreeItem, Object.assign({ key: item.id, text: item.text, id: item.id, defaultExpanded: item.defaultExpanded !== void 0 ? item.defaultExpanded : defaultAllExpanded, onOptionCheck, isChecked: item.isChecked, checkProps: item.checkProps, hasBadge: item.hasBadge !== void 0 ? item.hasBadge : hasBadges, badgeProps: item.badgeProps, itemData: item, isDisabled, useMemo: true }, item.children && {
    children: React156.createElement(DualListSelectorTree, { isNested: true, data: item.children, hasBadges, defaultAllExpanded, onOptionCheck, isDisabled })
  })));
  return isNested ? React156.createElement("ul", Object.assign({ className: css(dual_list_selector_default.dualListSelectorList), role: "group" }, props), tree) : React156.createElement(React156.Fragment, null, tree);
};
DualListSelectorTree.displayName = "DualListSelectorTree";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListWrapper.js
init_tslib_es6();
var React159 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorList.js
init_tslib_es6();

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListItem.js
init_tslib_es6();
var React157 = __toESM(require_react());
var DualListSelectorListItemBase = (_a) => {
  var {
    onOptionSelect,
    orderIndex,
    children,
    className,
    id = getUniqueId("dual-list-selector-list-item"),
    isSelected,
    innerRef,
    isDraggable = false,
    isDisabled,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    draggableButtonAriaLabel = "Reorder option"
  } = _a, props = __rest(_a, ["onOptionSelect", "orderIndex", "children", "className", "id", "isSelected", "innerRef", "isDraggable", "isDisabled", "draggableButtonAriaLabel"]);
  const privateRef = React157.useRef(null);
  const ref = innerRef || privateRef;
  const { setFocusedOption } = React157.useContext(DualListSelectorListContext);
  return React157.createElement(
    "li",
    Object.assign({ className: css(dual_list_selector_default.dualListSelectorListItem, className, isDisabled && dual_list_selector_default.modifiers.disabled), key: orderIndex, onClick: isDisabled ? void 0 : (e) => {
      setFocusedOption(id);
      onOptionSelect(e, id);
    }, onKeyDown: (e) => {
      if (e.key === " " || e.key === "Enter") {
        document.activeElement.click();
        e.preventDefault();
      }
    }, "aria-selected": isSelected, id, ref, role: "option", tabIndex: -1 }, props),
    React157.createElement(
      "div",
      { className: css(dual_list_selector_default.dualListSelectorListItemRow, isSelected && dual_list_selector_default.modifiers.selected) },
      isDraggable && !isDisabled && React157.createElement(
        "div",
        { className: css(dual_list_selector_default.dualListSelectorDraggable) },
        React157.createElement(
          Button,
          { variant: ButtonVariant.plain, component: "span" },
          React157.createElement(grip_vertical_icon_default, { style: { verticalAlign: "-0.3em" } })
        )
      ),
      React157.createElement(
        "span",
        { className: css(dual_list_selector_default.dualListSelectorItem) },
        React157.createElement(
          "span",
          { className: css(dual_list_selector_default.dualListSelectorItemMain) },
          React157.createElement("span", { className: css(dual_list_selector_default.dualListSelectorItemText) }, children)
        )
      )
    )
  );
};
DualListSelectorListItemBase.displayName = "DualListSelectorListItemBase";
var DualListSelectorListItem = React157.forwardRef((props, ref) => React157.createElement(DualListSelectorListItemBase, Object.assign({ innerRef: ref }, props)));
DualListSelectorListItem.displayName = "DualListSelectorListItem";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorList.js
var React158 = __toESM(require_react());
var DualListSelectorList = (_a) => {
  var { children } = _a, props = __rest(_a, ["children"]);
  const { setFocusedOption, isTree, ariaLabelledBy, focusedOption, displayOption, selectedOptions, id, onOptionSelect, options, isDisabled } = React158.useContext(DualListSelectorListContext);
  const onOptionClick = (e, index, id2) => {
    setFocusedOption(id2);
    onOptionSelect(e, index, id2);
  };
  const hasOptions = () => options.length !== 0 || children !== void 0 && children.length !== 0;
  return React158.createElement("ul", Object.assign({ className: css(dual_list_selector_default.dualListSelectorList) }, hasOptions() && {
    role: isTree ? "tree" : "listbox",
    "aria-multiselectable": true,
    "aria-labelledby": ariaLabelledBy,
    "aria-activedescendant": focusedOption
  }, { "aria-disabled": isDisabled ? "true" : void 0 }, props), options.length === 0 ? children : options.map((option, index) => {
    if (displayOption(option)) {
      return React158.createElement(DualListSelectorListItem, { key: index, isSelected: selectedOptions.indexOf(index) !== -1, id: `${id}-option-${index}`, onOptionSelect: (e, id2) => onOptionClick(e, index, id2), orderIndex: index, isDisabled }, option);
    }
    return;
  }));
};
DualListSelectorList.displayName = "DualListSelectorList";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListWrapper.js
var DualListSelectorListWrapperBase = (_a) => {
  var { className, children, "aria-labelledby": ariaLabelledBy, innerRef, options = [], selectedOptions = [], onOptionSelect, displayOption, id = getUniqueId("dual-list-selector-list"), isDisabled = false } = _a, props = __rest(_a, ["className", "children", "aria-labelledby", "innerRef", "options", "selectedOptions", "onOptionSelect", "displayOption", "id", "isDisabled"]);
  const [focusedOption, setFocusedOption] = React159.useState("");
  const ref = React159.useRef(null);
  const menuRef = innerRef || ref;
  const { isTree } = React159.useContext(DualListSelectorContext);
  const handleKeys = (event) => {
    if (!menuRef.current || menuRef.current !== event.target.closest(`.${dual_list_selector_default.dualListSelectorMenu}`) && !Array.from(menuRef.current.getElementsByClassName(dual_list_selector_default.dualListSelectorMenu)).includes(event.target.closest(`.${dual_list_selector_default.dualListSelectorMenu}`))) {
      return;
    }
    event.stopImmediatePropagation();
    const validOptions = isTree ? Array.from(menuRef.current.querySelectorAll(`.${dual_list_selector_default.dualListSelectorItemToggle}, .${dual_list_selector_default.dualListSelectorItemCheck} > input`)) : Array.from(menuRef.current.getElementsByTagName("LI")).filter((el) => !el.classList.contains("pf-m-disabled"));
    const activeElement = document.activeElement;
    handleArrows(event, validOptions, (element) => activeElement.contains(element), (element) => {
      if (element.classList.contains(`.${dual_list_selector_default.dualListSelectorListItem}`)) {
        setFocusedOption(element.id);
      } else {
        setFocusedOption(element.closest(`.${dual_list_selector_default.dualListSelectorListItem}`).id);
      }
      return element;
    }, [`.${dual_list_selector_default.dualListSelectorItemToggle}`, `.${dual_list_selector_default.dualListSelectorItemCheck} > input`], void 0, false, false, false);
  };
  React159.useEffect(() => {
    window.addEventListener("keydown", handleKeys);
    return () => {
      window.removeEventListener("keydown", handleKeys);
    };
  }, [menuRef.current]);
  return React159.createElement(
    "div",
    Object.assign({ className: css(dual_list_selector_default.dualListSelectorMenu, className), ref: menuRef, tabIndex: 0 }, props),
    React159.createElement(DualListSelectorListContext.Provider, { value: {
      setFocusedOption,
      isTree,
      focusedOption,
      ariaLabelledBy,
      displayOption,
      selectedOptions,
      id,
      options,
      onOptionSelect,
      isDisabled
    } }, children ? children : React159.createElement(DualListSelectorList, null))
  );
};
DualListSelectorListWrapperBase.displayName = "DualListSelectorListWrapperBase";
var DualListSelectorListWrapper = React159.forwardRef((props, ref) => React159.createElement(DualListSelectorListWrapperBase, Object.assign({ innerRef: ref }, props)));
DualListSelectorListWrapper.displayName = "DualListSelectorListWrapper";

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/SearchInput.js
init_tslib_es6();
var React182 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Icon/Icon.js
init_tslib_es6();
var React160 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Icon/icon.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Icon/icon.css";
var icon_default = {
  "icon": "pf-v5-c-icon",
  "iconContent": "pf-v5-c-icon__content",
  "iconProgress": "pf-v5-c-icon__progress",
  "modifiers": {
    "inline": "pf-m-inline",
    "sm": "pf-m-sm",
    "md": "pf-m-md",
    "lg": "pf-m-lg",
    "xl": "pf-m-xl",
    "inProgress": "pf-m-in-progress",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "success": "pf-m-success",
    "info": "pf-m-info",
    "custom": "pf-m-custom"
  },
  "spinner": "pf-v5-c-spinner"
};

// node_modules/@patternfly/react-core/dist/esm/components/Icon/Icon.js
var Icon = (_a) => {
  var { children, className, progressIcon, size, iconSize, progressIconSize, status, isInline = false, isInProgress = false, defaultProgressArialabel = "Loading...", shouldMirrorRTL = false } = _a, props = __rest(_a, ["children", "className", "progressIcon", "size", "iconSize", "progressIconSize", "status", "isInline", "isInProgress", "defaultProgressArialabel", "shouldMirrorRTL"]);
  const _progressIcon = progressIcon !== null && progressIcon !== void 0 ? progressIcon : React160.createElement(Spinner, { diameter: "1em", "aria-label": defaultProgressArialabel });
  return React160.createElement(
    "span",
    Object.assign({ className: css(icon_default.icon, isInline && icon_default.modifiers.inline, isInProgress && icon_default.modifiers.inProgress, icon_default.modifiers[size], className) }, props),
    React160.createElement("span", { className: css(icon_default.iconContent, icon_default.modifiers[iconSize], icon_default.modifiers[status], shouldMirrorRTL && "pf-v5-m-mirror-inline-rtl") }, children),
    isInProgress && React160.createElement("span", { className: css(icon_default.iconProgress, icon_default.modifiers[progressIconSize], className) }, _progressIcon)
  );
};
Icon.displayName = "Icon";

// node_modules/@patternfly/react-icons/dist/esm/icons/angle-down-icon.js
var AngleDownIconConfig = {
  name: "AngleDownIcon",
  height: 512,
  width: 320,
  svgPath: "M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z",
  yOffset: 0,
  xOffset: 0
};
var AngleDownIcon = createIcon(AngleDownIconConfig);
var angle_down_icon_default = AngleDownIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/search-icon.js
var SearchIconConfig = {
  name: "SearchIcon",
  height: 512,
  width: 512,
  svgPath: "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z",
  yOffset: 0,
  xOffset: 0
};
var SearchIcon = createIcon(SearchIconConfig);
var search_icon_default = SearchIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/arrow-right-icon.js
var ArrowRightIconConfig = {
  name: "ArrowRightIcon",
  height: 512,
  width: 448,
  svgPath: "M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z",
  yOffset: 0,
  xOffset: 0
};
var ArrowRightIcon = createIcon(ArrowRightIconConfig);
var arrow_right_icon_default = ArrowRightIcon;

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/AdvancedSearchMenu.js
var React178 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Form/ActionGroup.js
init_tslib_es6();
var React161 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Form/form.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Form/form.css";
var form_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "form": "pf-v5-c-form",
  "formActions": "pf-v5-c-form__actions",
  "formFieldGroup": "pf-v5-c-form__field-group",
  "formFieldGroupBody": "pf-v5-c-form__field-group-body",
  "formFieldGroupHeader": "pf-v5-c-form__field-group-header",
  "formFieldGroupHeaderActions": "pf-v5-c-form__field-group-header-actions",
  "formFieldGroupHeaderDescription": "pf-v5-c-form__field-group-header-description",
  "formFieldGroupHeaderMain": "pf-v5-c-form__field-group-header-main",
  "formFieldGroupHeaderTitle": "pf-v5-c-form__field-group-header-title",
  "formFieldGroupHeaderTitleText": "pf-v5-c-form__field-group-header-title-text",
  "formFieldGroupToggle": "pf-v5-c-form__field-group-toggle",
  "formFieldGroupToggleButton": "pf-v5-c-form__field-group-toggle-button",
  "formFieldGroupToggleIcon": "pf-v5-c-form__field-group-toggle-icon",
  "formFieldset": "pf-v5-c-form__fieldset",
  "formGroup": "pf-v5-c-form__group",
  "formGroupControl": "pf-v5-c-form__group-control",
  "formGroupLabel": "pf-v5-c-form__group-label",
  "formGroupLabelHelp": "pf-v5-c-form__group-label-help",
  "formGroupLabelInfo": "pf-v5-c-form__group-label-info",
  "formGroupLabelMain": "pf-v5-c-form__group-label-main",
  "formHelperText": "pf-v5-c-form__helper-text",
  "formHelperTextIcon": "pf-v5-c-form__helper-text-icon",
  "formLabel": "pf-v5-c-form__label",
  "formLabelRequired": "pf-v5-c-form__label-required",
  "formLabelText": "pf-v5-c-form__label-text",
  "formSection": "pf-v5-c-form__section",
  "formSectionTitle": "pf-v5-c-form__section-title",
  "modifiers": {
    "horizontal": "pf-m-horizontal",
    "alignRight": "pf-m-align-right",
    "noPaddingTop": "pf-m-no-padding-top",
    "horizontalOnXs": "pf-m-horizontal-on-xs",
    "horizontalOnSm": "pf-m-horizontal-on-sm",
    "horizontalOnMd": "pf-m-horizontal-on-md",
    "horizontalOnLg": "pf-m-horizontal-on-lg",
    "horizontalOnXl": "pf-m-horizontal-on-xl",
    "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
    "limitWidth": "pf-m-limit-width",
    "action": "pf-m-action",
    "info": "pf-m-info",
    "disabled": "pf-m-disabled",
    "inline": "pf-m-inline",
    "stack": "pf-m-stack",
    "error": "pf-m-error",
    "success": "pf-m-success",
    "warning": "pf-m-warning",
    "inactive": "pf-m-inactive",
    "hidden": "pf-m-hidden",
    "expanded": "pf-m-expanded"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Form/ActionGroup.js
var ActionGroup = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  const customClassName = css(form_default.formGroup, form_default.modifiers.action, className);
  const formActionsComponent = React161.createElement("div", { className: css(form_default.formActions) }, children);
  return React161.createElement(
    "div",
    Object.assign({}, props, { className: customClassName }),
    React161.createElement("div", { className: css(form_default.formGroupControl) }, formActionsComponent)
  );
};
ActionGroup.displayName = "ActionGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js
init_tslib_es6();
var React162 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_form_m_limit_width_MaxWidth.js
var c_form_m_limit_width_MaxWidth = {
  "name": "--pf-v5-c-form--m-limit-width--MaxWidth",
  "value": "55rem",
  "var": "var(--pf-v5-c-form--m-limit-width--MaxWidth)"
};
var c_form_m_limit_width_MaxWidth_default = c_form_m_limit_width_MaxWidth;

// node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js
var FormBase = (_a) => {
  var { children = null, className = "", isHorizontal = false, isWidthLimited = false, maxWidth = "", innerRef } = _a, props = __rest(_a, ["children", "className", "isHorizontal", "isWidthLimited", "maxWidth", "innerRef"]);
  return React162.createElement("form", Object.assign({ noValidate: true }, maxWidth && {
    style: Object.assign({ [c_form_m_limit_width_MaxWidth_default.name]: maxWidth }, props.style)
  }, props, { className: css(form_default.form, isHorizontal && form_default.modifiers.horizontal, (isWidthLimited || maxWidth) && form_default.modifiers.limitWidth, className), ref: innerRef }), children);
};
var Form = React162.forwardRef((props, ref) => React162.createElement(FormBase, Object.assign({ innerRef: ref }, props)));
Form.displayName = "Form";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js
init_tslib_es6();
var React163 = __toESM(require_react());
var FormAlert = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (
    // There are currently no associated styles with the pf-v5-c-form_alert class.
    // Therefore, it does not exist in react-styles
    React163.createElement("div", Object.assign({}, props, { className: css(`${form_default.form}__alert`, className) }), children)
  );
};
FormAlert.displayName = "FormAlert";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroup.js
init_tslib_es6();
var React166 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Form/InternalFormFieldGroup.js
init_tslib_es6();
var React165 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupToggle.js
init_tslib_es6();
var React164 = __toESM(require_react());
var FormFieldGroupToggle = (_a) => {
  var { className, onToggle, isExpanded, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, toggleId } = _a, props = __rest(_a, ["className", "onToggle", "isExpanded", "aria-label", "aria-labelledby", "toggleId"]);
  return React164.createElement(
    "div",
    Object.assign({ className: css(form_default.formFieldGroupToggle, className) }, props),
    React164.createElement(
      "div",
      { className: css(form_default.formFieldGroupToggleButton) },
      React164.createElement(
        Button,
        { variant: "plain", "aria-label": ariaLabel, onClick: onToggle, "aria-expanded": isExpanded, "aria-labelledby": ariaLabelledby, id: toggleId },
        React164.createElement(
          "span",
          { className: css(form_default.formFieldGroupToggleIcon) },
          React164.createElement(angle_right_icon_default, { "aria-hidden": "true" })
        )
      )
    )
  );
};
FormFieldGroupToggle.displayName = "FormFieldGroupToggle";

// node_modules/@patternfly/react-core/dist/esm/components/Form/InternalFormFieldGroup.js
var InternalFormFieldGroup = (_a) => {
  var { children, className, header, isExpandable, isExpanded, onToggle, toggleAriaLabel } = _a, props = __rest(_a, ["children", "className", "header", "isExpandable", "isExpanded", "onToggle", "toggleAriaLabel"]);
  const headerTitleText = header ? header.props.titleText : null;
  if (isExpandable && !toggleAriaLabel && !headerTitleText) {
    console.error("FormFieldGroupExpandable:", "toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible");
  }
  return React165.createElement(
    "div",
    Object.assign({ className: css(form_default.formFieldGroup, isExpanded && isExpandable && form_default.modifiers.expanded, className), role: "group" }, headerTitleText && { "aria-labelledby": `${header.props.titleText.id}` }, props),
    isExpandable && React165.createElement(GenerateId, { prefix: "form-field-group-toggle" }, (id) => React165.createElement(FormFieldGroupToggle, Object.assign({ onToggle, isExpanded, "aria-label": toggleAriaLabel, toggleId: id }, headerTitleText && { "aria-labelledby": `${header.props.titleText.id} ${id}` }))),
    header && header,
    (!isExpandable || isExpandable && isExpanded) && React165.createElement("div", { className: css(form_default.formFieldGroupBody) }, children)
  );
};
InternalFormFieldGroup.displayName = "InternalFormFieldGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroup.js
var FormFieldGroup = (_a) => {
  var { children, className, header } = _a, props = __rest(_a, ["children", "className", "header"]);
  return React166.createElement(InternalFormFieldGroup, Object.assign({ className, header }, props), children);
};
FormFieldGroup.displayName = "FormFieldGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupExpandable.js
init_tslib_es6();
var React167 = __toESM(require_react());
var import_react19 = __toESM(require_react());
var FormFieldGroupExpandable = (_a) => {
  var { children, className, header, isExpanded = false, toggleAriaLabel } = _a, props = __rest(_a, ["children", "className", "header", "isExpanded", "toggleAriaLabel"]);
  const [localIsExpanded, setIsExpanded] = (0, import_react19.useState)(isExpanded);
  return React167.createElement(InternalFormFieldGroup, Object.assign({ className, header, isExpandable: true, isExpanded: localIsExpanded, toggleAriaLabel, onToggle: () => setIsExpanded(!localIsExpanded) }, props), children);
};
FormFieldGroupExpandable.displayName = "FormFieldGroupExpandable";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupHeader.js
init_tslib_es6();
var React168 = __toESM(require_react());
var FormFieldGroupHeader = (_a) => {
  var { className, titleText, titleDescription, actions } = _a, props = __rest(_a, ["className", "titleText", "titleDescription", "actions"]);
  return React168.createElement(
    "div",
    Object.assign({ className: css(form_default.formFieldGroupHeader, className) }, props),
    React168.createElement(
      "div",
      { className: css(form_default.formFieldGroupHeaderMain) },
      titleText && React168.createElement(
        "div",
        { className: css(form_default.formFieldGroupHeaderTitle) },
        React168.createElement("div", { className: css(form_default.formFieldGroupHeaderTitleText), id: titleText.id }, titleText.text)
      ),
      titleDescription && React168.createElement("div", { className: css(form_default.formFieldGroupHeaderDescription) }, titleDescription)
    ),
    React168.createElement("div", { className: css(form_default.formFieldGroupHeaderActions) }, actions && actions)
  );
};
FormFieldGroupHeader.displayName = "FormFieldGroupHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormGroup.js
init_tslib_es6();
var React169 = __toESM(require_react());
var FormGroup = (_a) => {
  var { children = null, className = "", label, labelInfo, labelIcon, isRequired = false, isInline = false, hasNoPaddingTop = false, isStack = false, fieldId, role } = _a, props = __rest(_a, ["children", "className", "label", "labelInfo", "labelIcon", "isRequired", "isInline", "hasNoPaddingTop", "isStack", "fieldId", "role"]);
  const isGroupOrRadioGroup = role === "group" || role === "radiogroup";
  const LabelComponent = isGroupOrRadioGroup ? "span" : "label";
  const labelContent = React169.createElement(
    React169.Fragment,
    null,
    React169.createElement(
      LabelComponent,
      Object.assign({ className: css(form_default.formLabel) }, !isGroupOrRadioGroup && { htmlFor: fieldId }),
      React169.createElement("span", { className: css(form_default.formLabelText) }, label),
      isRequired && React169.createElement(
        "span",
        { className: css(form_default.formLabelRequired), "aria-hidden": "true" },
        " ",
        ASTERISK
      )
    ),
    " ",
    React169.isValidElement(labelIcon) && labelIcon
  );
  return React169.createElement(GenerateId, null, (randomId) => React169.createElement(
    "div",
    Object.assign({ className: css(form_default.formGroup, className) }, role && { role }, isGroupOrRadioGroup && { "aria-labelledby": `${fieldId || randomId}-legend` }, props),
    label && React169.createElement(
      "div",
      Object.assign({ className: css(form_default.formGroupLabel, labelInfo && form_default.modifiers.info, hasNoPaddingTop && form_default.modifiers.noPaddingTop) }, isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` }),
      labelInfo && React169.createElement(
        React169.Fragment,
        null,
        React169.createElement("div", { className: css(form_default.formGroupLabelMain) }, labelContent),
        React169.createElement("div", { className: css(form_default.formGroupLabelInfo) }, labelInfo)
      ),
      !labelInfo && labelContent
    ),
    React169.createElement("div", { className: css(form_default.formGroupControl, isInline && form_default.modifiers.inline, isStack && form_default.modifiers.stack) }, children)
  ));
};
FormGroup.displayName = "FormGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormHelperText.js
init_tslib_es6();
var React170 = __toESM(require_react());
var FormHelperText = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React170.createElement("div", Object.assign({ className: css(form_default.formHelperText, className) }, props), children);
};
FormHelperText.displayName = "FormHelperText";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormSection.js
init_tslib_es6();
var React171 = __toESM(require_react());
var FormSection = (_a) => {
  var { className = "", children, title = "", titleElement: TitleElement = "div" } = _a, props = __rest(_a, ["className", "children", "title", "titleElement"]);
  return React171.createElement(GenerateId, { prefix: "pf-form-section-title" }, (sectionId) => React171.createElement(
    "section",
    Object.assign({ className: css(form_default.formSection, className), role: "group" }, title && { "aria-labelledby": sectionId }, props),
    title && React171.createElement(TitleElement, { id: sectionId, className: css(form_default.formSectionTitle, className) }, title),
    children
  ));
};
FormSection.displayName = "FormSection";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormContext.js
init_tslib_es6();
var import_react20 = __toESM(require_react());
var FormContext = import_react20.default.createContext({});
var FormContextConsumer = FormContext.Consumer;
var FormContextProvider = ({ initialValues, children }) => {
  var _a;
  const [values, setValues] = import_react20.default.useState(initialValues || {});
  const [errors, setErrors] = import_react20.default.useState({});
  const [validators, setValidators] = import_react20.default.useState({});
  const [touched, setTouched] = import_react20.default.useState({});
  const isValid = ((_a = Object.keys(errors)) === null || _a === void 0 ? void 0 : _a.length) === 0;
  const getValue = (fieldId) => Object.entries(values).reduce((acc, [id, value]) => id === fieldId ? value : acc, "");
  const setValue = (fieldId, value, triggerValidation = true) => {
    var _a2;
    if (values[fieldId] !== value) {
      setValues((prevValues) => Object.assign(Object.assign({}, prevValues), { [fieldId]: value }));
      triggerValidation && ((_a2 = validators[fieldId]) === null || _a2 === void 0 ? void 0 : _a2.call(validators, value));
    }
  };
  const getError = (fieldId) => Object.entries(errors).reduce((acc, [id, error]) => id === fieldId ? error : acc, "");
  const setError = (fieldId, error) => errors[fieldId] !== error && setErrors((_a2) => {
    var _b = fieldId, _ = _a2[_b], prevErrors = __rest(_a2, [typeof _b === "symbol" ? _b : _b + ""]);
    return Object.assign(Object.assign({}, prevErrors), !!error && { [fieldId]: error });
  });
  const isTouched = (fieldId) => Object.entries(touched).reduce((acc, [id, isTouched2]) => id === fieldId ? isTouched2 : acc, false);
  const setFieldTouched = (fieldId, isTouched2) => touched[fieldId] !== isTouched2 && setTouched((_a2) => {
    var _b = fieldId, _ = _a2[_b], prevTouched = __rest(_a2, [typeof _b === "symbol" ? _b : _b + ""]);
    return Object.assign(Object.assign({}, prevTouched), isTouched2 && { [fieldId]: isTouched2 });
  });
  const setValidator = (fieldId, validate2) => validators[fieldId] !== validate2 && setValidators((prevValidators) => Object.assign(Object.assign({}, prevValidators), { [fieldId]: validate2 }));
  const validate = () => {
    var _a2;
    return (_a2 = Object.entries(validators)) === null || _a2 === void 0 ? void 0 : _a2.reduce((acc, [id, validateField]) => {
      const fieldError = validateField(values[id]);
      if (fieldError) {
        acc[id] = fieldError;
      }
      return acc;
    }, {});
  };
  return import_react20.default.createElement(FormContext.Provider, { value: {
    values,
    errors,
    touched,
    isValid,
    setValues,
    setErrors,
    getValue,
    setValue,
    getError,
    setError,
    validate,
    setValidator,
    isTouched,
    setTouched: setFieldTouched
  } }, typeof children === "function" ? import_react20.default.createElement(FormContext.Consumer, null, (formContext) => children(formContext)) : children);
};
FormContextProvider.displayName = "FormContextProvider";
var useFormContext = () => import_react20.default.useContext(FormContext);

// node_modules/@patternfly/react-core/dist/esm/components/Panel/Panel.js
init_tslib_es6();
var React173 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Panel/panel.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Panel/panel.css";
var panel_default = {
  "modifiers": {
    "bordered": "pf-m-bordered",
    "raised": "pf-m-raised",
    "scrollable": "pf-m-scrollable"
  },
  "panel": "pf-v5-c-panel",
  "panelFooter": "pf-v5-c-panel__footer",
  "panelHeader": "pf-v5-c-panel__header",
  "panelMain": "pf-v5-c-panel__main",
  "panelMainBody": "pf-v5-c-panel__main-body",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Panel/Panel.js
var PanelBase = (_a) => {
  var { className, children, variant, isScrollable, innerRef } = _a, props = __rest(_a, ["className", "children", "variant", "isScrollable", "innerRef"]);
  return React173.createElement("div", Object.assign({ className: css(panel_default.panel, variant === "raised" && panel_default.modifiers.raised, variant === "bordered" && panel_default.modifiers.bordered, isScrollable && panel_default.modifiers.scrollable, className), ref: innerRef }, props), children);
};
var Panel = React173.forwardRef((props, ref) => React173.createElement(PanelBase, Object.assign({ innerRef: ref }, props)));
Panel.displayName = "Panel";

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMain.js
init_tslib_es6();
var React174 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_panel__main_MaxHeight.js
var c_panel__main_MaxHeight = {
  "name": "--pf-v5-c-panel__main--MaxHeight",
  "value": "18.75rem",
  "var": "var(--pf-v5-c-panel__main--MaxHeight)"
};
var c_panel_main_MaxHeight_default = c_panel__main_MaxHeight;

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMain.js
var PanelMain = (_a) => {
  var { className, children, maxHeight } = _a, props = __rest(_a, ["className", "children", "maxHeight"]);
  return React174.createElement("div", Object.assign({ className: css(panel_default.panelMain, className), style: { [c_panel_main_MaxHeight_default.name]: maxHeight } }, props), children);
};
PanelMain.displayName = "PanelMain";

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMainBody.js
init_tslib_es6();
var React175 = __toESM(require_react());
var PanelMainBody = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return React175.createElement("div", Object.assign({ className: css(panel_default.panelMainBody, className) }, props), children);
};
PanelMainBody.displayName = "PanelMainBody";

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelHeader.js
init_tslib_es6();
var React176 = __toESM(require_react());
var PanelHeader = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return React176.createElement("div", Object.assign({ className: css(panel_default.panelHeader, className) }, props), children);
};
PanelHeader.displayName = "PanelHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelFooter.js
init_tslib_es6();
var React177 = __toESM(require_react());
var PanelFooter = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return React177.createElement("div", Object.assign({ className: css(panel_default.panelFooter, className) }, props), children);
};
PanelFooter.displayName = "PanelFooter";

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/AdvancedSearchMenu.js
var AdvancedSearchMenu = ({ className, parentRef, parentInputRef, value = "", attributes = [], formAdditionalItems, hasWordsAttrLabel = "Has words", advancedSearchDelimiter, getAttrValueMap, onChange, onSearch, onClear, resetButtonLabel = "Reset", submitSearchButtonLabel = "Search", isSearchMenuOpen, onToggleAdvancedMenu }) => {
  const firstAttrRef = React178.useRef(null);
  const [putFocusBackOnInput, setPutFocusBackOnInput] = React178.useState(false);
  React178.useEffect(() => {
    if (attributes.length > 0 && !advancedSearchDelimiter) {
      console.error("AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop");
    }
  });
  React178.useEffect(() => {
    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {
      firstAttrRef.current.focus();
      setPutFocusBackOnInput(true);
    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {
      parentInputRef.current.focus();
    }
  }, [isSearchMenuOpen]);
  React178.useEffect(() => {
    document.addEventListener("mousedown", onDocClick);
    document.addEventListener("touchstart", onDocClick);
    document.addEventListener("keydown", onEscPress);
    return function cleanup() {
      document.removeEventListener("mousedown", onDocClick);
      document.removeEventListener("touchstart", onDocClick);
      document.removeEventListener("keydown", onEscPress);
    };
  });
  const onDocClick = (event) => {
    const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);
    if (isSearchMenuOpen && !clickedWithinSearchInput) {
      onToggleAdvancedMenu(event);
    }
  };
  const onEscPress = (event) => {
    if (isSearchMenuOpen && event.key === KeyTypes.Escape && parentRef && parentRef.current.contains(event.target)) {
      onToggleAdvancedMenu(event);
      if (parentInputRef) {
        parentInputRef.current.focus();
      }
    }
  };
  const onSearchHandler = (event) => {
    event.preventDefault();
    if (onSearch) {
      onSearch(event, value, getAttrValueMap());
    }
    if (isSearchMenuOpen) {
      onToggleAdvancedMenu(event);
    }
  };
  const handleValueChange = (attribute, newValue, event) => {
    const newMap = getAttrValueMap();
    newMap[attribute] = newValue;
    let updatedValue = "";
    Object.entries(newMap).forEach(([k, v]) => {
      if (v.trim() !== "") {
        const quoteWrappedValue = v.includes(" ") ? `'${v.replace(/(^'|'$)/g, "")}'` : v;
        if (k !== "haswords") {
          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${quoteWrappedValue}`;
        } else {
          updatedValue = `${updatedValue} ${quoteWrappedValue}`;
        }
      }
    });
    if (onChange) {
      onChange(event, updatedValue.replace(/^\s+/g, ""));
    }
  };
  const getValue = (attribute) => {
    const map = getAttrValueMap();
    return map.hasOwnProperty(attribute) ? map[attribute] : "";
  };
  const buildFormGroups = () => {
    const formGroups = [];
    attributes.forEach((attribute, index) => {
      const display = typeof attribute === "string" ? attribute : attribute.display;
      const queryAttr = typeof attribute === "string" ? attribute : attribute.attr;
      if (index === 0) {
        formGroups.push(React178.createElement(
          FormGroup,
          { label: display, fieldId: `${queryAttr}_${index}`, key: `${attribute}_${index}` },
          React178.createElement(TextInput, { ref: firstAttrRef, type: "text", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (evt, value2) => handleValueChange(queryAttr, value2, evt) })
        ));
      } else {
        formGroups.push(React178.createElement(
          FormGroup,
          { label: display, fieldId: `${queryAttr}_${index}`, key: `${attribute}_${index}` },
          React178.createElement(TextInput, { type: "text", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (evt, value2) => handleValueChange(queryAttr, value2, evt) })
        ));
      }
    });
    formGroups.push(React178.createElement(GenerateId, { key: "hasWords" }, (randomId) => React178.createElement(
      FormGroup,
      { label: hasWordsAttrLabel, fieldId: randomId },
      React178.createElement(TextInput, { type: "text", id: randomId, value: getValue("haswords"), onChange: (evt, value2) => handleValueChange("haswords", value2, evt) })
    )));
    return formGroups;
  };
  return isSearchMenuOpen ? React178.createElement(
    Panel,
    { variant: "raised", className: css(className) },
    React178.createElement(
      PanelMain,
      null,
      React178.createElement(
        PanelMainBody,
        null,
        React178.createElement(
          Form,
          null,
          buildFormGroups(),
          formAdditionalItems ? formAdditionalItems : null,
          React178.createElement(
            ActionGroup,
            null,
            React178.createElement(Button, { variant: "primary", type: "submit", onClick: onSearchHandler, isDisabled: !value }, submitSearchButtonLabel),
            !!onClear && React178.createElement(Button, { variant: "link", type: "reset", onClick: onClear }, resetButtonLabel)
          )
        )
      )
    )
  ) : null;
};
AdvancedSearchMenu.displayName = "SearchInput";

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroup.js
init_tslib_es6();
var React179 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/TextInputGroup/text-input-group.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/TextInputGroup/text-input-group.css";
var text_input_group_default = {
  "button": "pf-v5-c-button",
  "chipGroupMain": "pf-v5-c-chip-group__main",
  "modifiers": {
    "disabled": "pf-m-disabled",
    "plain": "pf-m-plain",
    "icon": "pf-m-icon",
    "hint": "pf-m-hint"
  },
  "textInputGroup": "pf-v5-c-text-input-group",
  "textInputGroupGroup": "pf-v5-c-text-input-group__group",
  "textInputGroupIcon": "pf-v5-c-text-input-group__icon",
  "textInputGroupMain": "pf-v5-c-text-input-group__main",
  "textInputGroupText": "pf-v5-c-text-input-group__text",
  "textInputGroupTextInput": "pf-v5-c-text-input-group__text-input",
  "textInputGroupUtilities": "pf-v5-c-text-input-group__utilities",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroup.js
var TextInputGroupContext = React179.createContext({
  isDisabled: false
});
var TextInputGroup = (_a) => {
  var { children, className, isDisabled, isPlain, innerRef } = _a, props = __rest(_a, ["children", "className", "isDisabled", "isPlain", "innerRef"]);
  const ref = React179.useRef(null);
  const textInputGroupRef = innerRef || ref;
  return React179.createElement(
    TextInputGroupContext.Provider,
    { value: { isDisabled } },
    React179.createElement("div", Object.assign({ ref: textInputGroupRef, className: css(text_input_group_default.textInputGroup, isDisabled && text_input_group_default.modifiers.disabled, isPlain && text_input_group_default.modifiers.plain, className) }, props), children)
  );
};
TextInputGroup.displayName = "TextInputGroup";

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupMain.js
init_tslib_es6();
var React180 = __toESM(require_react());
var TextInputGroupMainBase = (_a) => {
  var { children, className, icon, type = "text", hint, onChange = () => void 0, onFocus, onBlur, "aria-label": ariaLabel = "Type to filter", value: inputValue, placeholder: inputPlaceHolder, innerRef, name, "aria-activedescendant": ariaActivedescendant, role, isExpanded, "aria-controls": ariaControls } = _a, props = __rest(_a, ["children", "className", "icon", "type", "hint", "onChange", "onFocus", "onBlur", "aria-label", "value", "placeholder", "innerRef", "name", "aria-activedescendant", "role", "isExpanded", "aria-controls"]);
  const { isDisabled } = React180.useContext(TextInputGroupContext);
  const ref = React180.useRef(null);
  const textInputGroupInputInputRef = innerRef || ref;
  const handleChange = (event) => {
    onChange(event, event.currentTarget.value);
  };
  return React180.createElement(
    "div",
    Object.assign({ className: css(text_input_group_default.textInputGroupMain, icon && text_input_group_default.modifiers.icon, className) }, props),
    children,
    React180.createElement(
      "span",
      { className: css(text_input_group_default.textInputGroupText) },
      hint && React180.createElement("input", { className: css(text_input_group_default.textInputGroupTextInput, text_input_group_default.modifiers.hint), type: "text", disabled: true, "aria-hidden": "true", value: hint }),
      icon && React180.createElement("span", { className: css(text_input_group_default.textInputGroupIcon) }, icon),
      React180.createElement("input", Object.assign({ ref: textInputGroupInputInputRef, type, className: css(text_input_group_default.textInputGroupTextInput), "aria-label": ariaLabel, disabled: isDisabled, onChange: handleChange, onFocus, onBlur, value: inputValue || "", placeholder: inputPlaceHolder, name, "aria-activedescendant": ariaActivedescendant }, role && { role }, isExpanded !== void 0 && { "aria-expanded": isExpanded }, ariaControls && { "aria-controls": ariaControls }))
    )
  );
};
var TextInputGroupMain = React180.forwardRef((props, ref) => React180.createElement(TextInputGroupMainBase, Object.assign({ innerRef: ref }, props)));
TextInputGroupMain.displayName = "TextInputGroupMain";

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupUtilities.js
init_tslib_es6();
var React181 = __toESM(require_react());
var TextInputGroupUtilities = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React181.createElement("div", Object.assign({ className: css(text_input_group_default.textInputGroupUtilities, className) }, props), children);
};
TextInputGroupUtilities.displayName = "TextInputGroupUtilities";

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/SearchInput.js
var SearchInputBase = (_a) => {
  var { className, value = "", attributes = [], formAdditionalItems, hasWordsAttrLabel = "Has words", advancedSearchDelimiter, placeholder, hint, onChange, onSearch, onClear, onToggleAdvancedSearch, isAdvancedSearchOpen, resultsCount, onNextClick, onPreviousClick, innerRef, expandableInput, "aria-label": ariaLabel = "Search input", resetButtonLabel = "Reset", openMenuButtonAriaLabel = "Open advanced search", previousNavigationButtonAriaLabel = "Previous", isPreviousNavigationButtonDisabled = false, isNextNavigationButtonDisabled = false, nextNavigationButtonAriaLabel = "Next", submitSearchButtonLabel = "Search", isDisabled = false, appendTo, zIndex = 9999, name, areUtilitiesDisplayed } = _a, props = __rest(_a, ["className", "value", "attributes", "formAdditionalItems", "hasWordsAttrLabel", "advancedSearchDelimiter", "placeholder", "hint", "onChange", "onSearch", "onClear", "onToggleAdvancedSearch", "isAdvancedSearchOpen", "resultsCount", "onNextClick", "onPreviousClick", "innerRef", "expandableInput", "aria-label", "resetButtonLabel", "openMenuButtonAriaLabel", "previousNavigationButtonAriaLabel", "isPreviousNavigationButtonDisabled", "isNextNavigationButtonDisabled", "nextNavigationButtonAriaLabel", "submitSearchButtonLabel", "isDisabled", "appendTo", "zIndex", "name", "areUtilitiesDisplayed"]);
  const [isSearchMenuOpen, setIsSearchMenuOpen] = React182.useState(false);
  const [searchValue, setSearchValue] = React182.useState(value);
  const searchInputRef = React182.useRef(null);
  const ref = React182.useRef(null);
  const searchInputInputRef = innerRef || ref;
  const searchInputExpandableToggleRef = React182.useRef(null);
  const triggerRef = React182.useRef(null);
  const popperRef = React182.useRef(null);
  const [focusAfterExpandChange, setFocusAfterExpandChange] = React182.useState(false);
  const { isExpanded, onToggleExpand, toggleAriaLabel } = expandableInput || {};
  React182.useEffect(() => {
    var _a2, _b;
    if (!focusAfterExpandChange) {
      return;
    } else if (isExpanded) {
      (_a2 = searchInputInputRef === null || searchInputInputRef === void 0 ? void 0 : searchInputInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    } else {
      (_b = searchInputExpandableToggleRef === null || searchInputExpandableToggleRef === void 0 ? void 0 : searchInputExpandableToggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
    setFocusAfterExpandChange(false);
  }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);
  React182.useEffect(() => {
    setSearchValue(value);
  }, [value]);
  React182.useEffect(() => {
    if (attributes.length > 0 && !advancedSearchDelimiter) {
      console.error("An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop");
    }
  });
  React182.useEffect(() => {
    setIsSearchMenuOpen(isAdvancedSearchOpen);
  }, [isAdvancedSearchOpen]);
  const onChangeHandler = (event, value2) => {
    if (onChange) {
      onChange(event, value2);
    }
    setSearchValue(value2);
  };
  const onToggle = (e) => {
    const isOpen = !isSearchMenuOpen;
    setIsSearchMenuOpen(isOpen);
    if (onToggleAdvancedSearch) {
      onToggleAdvancedSearch(e, isOpen);
    }
  };
  const onSearchHandler = (event) => {
    event.preventDefault();
    if (onSearch) {
      onSearch(event, value, getAttrValueMap());
    }
    setIsSearchMenuOpen(false);
  };
  const splitStringExceptInQuotes = (str) => {
    let quoteType;
    return str.match(/\\?.|^$/g).reduce((p, c) => {
      if (c === "'" || c === '"') {
        if (!quoteType) {
          quoteType = c;
        }
        if (c === quoteType) {
          p.quote = !p.quote;
        }
      } else if (!p.quote && c === " ") {
        p.a.push("");
      } else {
        p.a[p.a.length - 1] += c.replace(/\\(.)/, "$1");
      }
      return p;
    }, { a: [""] }).a;
  };
  const getAttrValueMap = () => {
    const attrValue = {};
    const pairs = splitStringExceptInQuotes(searchValue);
    pairs.map((pair) => {
      const splitPair = pair.split(advancedSearchDelimiter);
      if (splitPair.length === 2) {
        attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, "");
      } else if (splitPair.length === 1) {
        attrValue.haswords = attrValue.hasOwnProperty("haswords") ? `${attrValue.haswords} ${splitPair[0]}` : splitPair[0];
      }
    });
    return attrValue;
  };
  const onEnter = (event) => {
    if (event.key === "Enter") {
      onSearchHandler(event);
    }
  };
  const onClearInput = (e) => {
    if (onClear) {
      onClear(e);
    }
    if (searchInputInputRef && searchInputInputRef.current) {
      searchInputInputRef.current.focus();
    }
  };
  const onExpandHandler = (event) => {
    setSearchValue("");
    onToggleExpand(event, isExpanded);
    setFocusAfterExpandChange(true);
  };
  const renderUtilities = value && (resultsCount || !!onNextClick && !!onPreviousClick || !!onClear && !expandableInput);
  const buildTextInputGroup = (_a2 = {}) => {
    var searchInputProps2 = __rest(_a2, []);
    return React182.createElement(
      TextInputGroup,
      Object.assign({ isDisabled }, searchInputProps2),
      React182.createElement(TextInputGroupMain, { hint, icon: React182.createElement(search_icon_default, null), innerRef: searchInputInputRef, value: searchValue, placeholder, "aria-label": ariaLabel, onKeyDown: onEnter, onChange: onChangeHandler, name }),
      (renderUtilities || areUtilitiesDisplayed) && React182.createElement(
        TextInputGroupUtilities,
        null,
        resultsCount && React182.createElement(Badge, { isRead: true }, resultsCount),
        !!onNextClick && !!onPreviousClick && React182.createElement(
          "div",
          { className: text_input_group_default.textInputGroupGroup },
          React182.createElement(
            Button,
            { variant: ButtonVariant.plain, "aria-label": previousNavigationButtonAriaLabel, isDisabled: isDisabled || isPreviousNavigationButtonDisabled, onClick: onPreviousClick },
            React182.createElement(angle_up_icon_default, null)
          ),
          React182.createElement(
            Button,
            { variant: ButtonVariant.plain, "aria-label": nextNavigationButtonAriaLabel, isDisabled: isDisabled || isNextNavigationButtonDisabled, onClick: onNextClick },
            React182.createElement(angle_down_icon_default, null)
          )
        ),
        !!onClear && !expandableInput && React182.createElement(
          Button,
          { variant: ButtonVariant.plain, isDisabled, "aria-label": resetButtonLabel, onClick: onClearInput },
          React182.createElement(times_icon_default, null)
        )
      )
    );
  };
  const expandableToggle = React182.createElement(Button, { variant: ButtonVariant.plain, "aria-label": toggleAriaLabel, "aria-expanded": isExpanded, icon: isExpanded ? React182.createElement(times_icon_default, null) : React182.createElement(search_icon_default, null), onClick: onExpandHandler, ref: searchInputExpandableToggleRef });
  const buildExpandableSearchInput = (_a2 = {}) => {
    var searchInputProps2 = __rest(_a2, []);
    return React182.createElement(
      InputGroup,
      Object.assign({}, searchInputProps2),
      React182.createElement(
        InputGroupItem,
        { isFill: true },
        buildTextInputGroup(),
        " "
      ),
      React182.createElement(InputGroupItem, { isPlain: true }, expandableToggle)
    );
  };
  const buildSearchTextInputGroup = (_a2 = {}) => {
    var searchInputProps2 = __rest(_a2, []);
    if (expandableInput) {
      return buildExpandableSearchInput(Object.assign({}, searchInputProps2));
    }
    return buildTextInputGroup(Object.assign({}, searchInputProps2));
  };
  const buildSearchTextInputGroupWithExtraButtons = (_a2 = {}) => {
    var searchInputProps2 = __rest(_a2, []);
    return React182.createElement(
      InputGroup,
      Object.assign({ ref: triggerRef }, searchInputProps2),
      React182.createElement(InputGroupItem, { isFill: true }, buildTextInputGroup()),
      (attributes.length > 0 || onToggleAdvancedSearch) && React182.createElement(
        InputGroupItem,
        { isPlain: true },
        React182.createElement(
          Button,
          { className: isSearchMenuOpen && "pf-m-expanded", variant: ButtonVariant.control, "aria-label": openMenuButtonAriaLabel, onClick: onToggle, isDisabled, "aria-expanded": isSearchMenuOpen },
          React182.createElement(caret_down_icon_default, null)
        )
      ),
      !!onSearch && React182.createElement(
        InputGroupItem,
        null,
        React182.createElement(
          Button,
          { type: "submit", variant: ButtonVariant.control, "aria-label": submitSearchButtonLabel, onClick: onSearchHandler, isDisabled },
          React182.createElement(
            Icon,
            { shouldMirrorRTL: true },
            React182.createElement(arrow_right_icon_default, null)
          )
        )
      ),
      expandableInput && React182.createElement(InputGroupItem, null, expandableToggle)
    );
  };
  const searchInputProps = Object.assign(Object.assign({}, props), { className: className && css(className), innerRef: searchInputRef });
  if (!!expandableInput && !isExpanded) {
    return React182.createElement(
      InputGroup,
      Object.assign({}, searchInputProps),
      React182.createElement(InputGroupItem, null, expandableToggle)
    );
  }
  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {
    if (attributes.length > 0) {
      const AdvancedSearch = React182.createElement(
        "div",
        { ref: popperRef },
        React182.createElement(AdvancedSearchMenu, { value, parentRef: searchInputRef, parentInputRef: searchInputInputRef, onSearch, onClear, onChange, onToggleAdvancedMenu: onToggle, resetButtonLabel, submitSearchButtonLabel, attributes, formAdditionalItems, hasWordsAttrLabel, advancedSearchDelimiter, getAttrValueMap, isSearchMenuOpen })
      );
      const AdvancedSearchWithPopper = React182.createElement(
        "div",
        Object.assign({ className: css(className), ref: searchInputRef }, props),
        React182.createElement(Popper, { trigger: buildSearchTextInputGroupWithExtraButtons(), triggerRef, popper: AdvancedSearch, popperRef, isVisible: isSearchMenuOpen, enableFlip: true, appendTo: () => appendTo || searchInputRef.current, zIndex })
      );
      const AdvancedSearchInline = React182.createElement(
        "div",
        Object.assign({ className: css(className), ref: searchInputRef }, props),
        buildSearchTextInputGroupWithExtraButtons(),
        AdvancedSearch
      );
      return appendTo !== "inline" ? AdvancedSearchWithPopper : AdvancedSearchInline;
    }
    return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));
  }
  return buildSearchTextInputGroup(searchInputProps);
};
SearchInputBase.displayName = "SearchInputBase";
var SearchInput = React182.forwardRef((props, ref) => React182.createElement(SearchInputBase, Object.assign({}, props, { innerRef: ref })));
SearchInput.displayName = "SearchInput";

// node_modules/@patternfly/react-tokens/dist/esm/c_dual_list_selector__menu_MinHeight.js
var c_dual_list_selector__menu_MinHeight = {
  "name": "--pf-v5-c-dual-list-selector__menu--MinHeight",
  "value": "12.5rem",
  "var": "var(--pf-v5-c-dual-list-selector__menu--MinHeight)"
};
var c_dual_list_selector_menu_MinHeight_default = c_dual_list_selector__menu_MinHeight;

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorPane.js
var DualListSelectorPane = (_a) => {
  var { isChosen = false, className = "", status = "", actions, searchInput, children, onOptionSelect, onOptionCheck, title = "", options = [], selectedOptions = [], isSearchable = false, searchInputAriaLabel = "", onFilterUpdate, onSearchInputChanged, onSearchInputClear, filterOption, id = getUniqueId("dual-list-selector-pane"), isDisabled = false, listMinHeight } = _a, props = __rest(_a, ["isChosen", "className", "status", "actions", "searchInput", "children", "onOptionSelect", "onOptionCheck", "title", "options", "selectedOptions", "isSearchable", "searchInputAriaLabel", "onFilterUpdate", "onSearchInputChanged", "onSearchInputClear", "filterOption", "id", "isDisabled", "listMinHeight"]);
  const [input, setInput] = React183.useState("");
  const { isTree } = React183.useContext(DualListSelectorContext);
  const onChange = (e, newValue) => {
    let filtered;
    if (isTree) {
      filtered = options.map((opt) => Object.assign({}, opt)).filter((item) => filterInput(item, newValue));
    } else {
      filtered = options.filter((option) => {
        if (displayOption(option)) {
          return option;
        }
      });
    }
    onFilterUpdate(filtered, isChosen ? "chosen" : "available", newValue === "");
    if (onSearchInputChanged) {
      onSearchInputChanged(e, newValue);
    }
    setInput(newValue);
  };
  const filterInput = (item, input2) => {
    if (filterOption) {
      return filterOption(item, input2);
    } else {
      if (item.text.toLowerCase().includes(input2.toLowerCase()) || input2 === "") {
        return true;
      }
    }
    if (item.children) {
      return (item.children = item.children.map((opt) => Object.assign({}, opt)).filter((child) => filterInput(child, input2))).length > 0;
    }
  };
  const displayOption = (option) => {
    if (filterOption) {
      return filterOption(option, input);
    } else {
      return option.toString().toLowerCase().includes(input.toLowerCase());
    }
  };
  return React183.createElement(
    "div",
    Object.assign({ className: css(dual_list_selector_default.dualListSelectorPane, isChosen ? dual_list_selector_default.modifiers.chosen : "pf-m-available", className) }, props),
    title && React183.createElement(
      "div",
      { className: css(dual_list_selector_default.dualListSelectorHeader) },
      React183.createElement(
        "div",
        { className: `${dual_list_selector_default.dualListSelector}__title` },
        React183.createElement("div", { className: css(dual_list_selector_default.dualListSelectorTitleText) }, title)
      )
    ),
    (actions || searchInput || isSearchable) && React183.createElement(
      "div",
      { className: css(dual_list_selector_default.dualListSelectorTools) },
      (isSearchable || searchInput) && React183.createElement("div", { className: css(dual_list_selector_default.dualListSelectorToolsFilter) }, searchInput ? searchInput : React183.createElement(SearchInput, { onChange: isDisabled ? void 0 : onChange, onClear: onSearchInputClear ? onSearchInputClear : (e) => onChange(e, ""), isDisabled, "aria-label": searchInputAriaLabel })),
      actions && React183.createElement("div", { className: css(dual_list_selector_default.dualListSelectorToolsActions) }, actions)
    ),
    status && React183.createElement(
      "div",
      { className: css(dual_list_selector_default.dualListSelectorStatus) },
      React183.createElement("div", { className: css(dual_list_selector_default.dualListSelectorStatusText), id: `${id}-status` }, status)
    ),
    React183.createElement(
      DualListSelectorPaneContext.Provider,
      { value: { isChosen } },
      !isTree && React183.createElement(DualListSelectorListWrapper, Object.assign({ "aria-labelledby": `${id}-status`, options, selectedOptions, onOptionSelect: (e, index, id2) => onOptionSelect(e, index, isChosen, id2), displayOption, id: `${id}-list`, isDisabled }, listMinHeight && {
        style: { [c_dual_list_selector_menu_MinHeight_default.name]: listMinHeight }
      }), children),
      isTree && React183.createElement(DualListSelectorListWrapper, Object.assign({ "aria-labelledby": `${id}-status`, id: `${id}-list` }, listMinHeight && {
        style: { [c_dual_list_selector_menu_MinHeight_default.name]: listMinHeight }
      }), options.length > 0 ? React183.createElement(
        DualListSelectorList,
        null,
        React183.createElement(DualListSelectorTree, { data: isSearchable ? options.map((opt) => Object.assign({}, opt)).filter((item) => filterInput(item, input)) : options, onOptionCheck, id: `${id}-tree`, isDisabled })
      ) : children)
    )
  );
};
DualListSelectorPane.displayName = "DualListSelectorPane";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorControlsWrapper.js
init_tslib_es6();
var React184 = __toESM(require_react());
var DualListSelectorControlsWrapperBase = (_a) => {
  var { innerRef, children = null, className, "aria-label": ariaLabel = "Controls for moving options between lists" } = _a, props = __rest(_a, ["innerRef", "children", "className", "aria-label"]);
  const ref = React184.useRef(null);
  const wrapperRef = innerRef || ref;
  const handleKeys = (event) => {
    if (!wrapperRef.current || wrapperRef.current !== event.target.closest(`.${dual_list_selector_default.dualListSelectorControls}`) && !Array.from(wrapperRef.current.getElementsByClassName(dual_list_selector_default.dualListSelectorControls)).includes(event.target.closest(`.${dual_list_selector_default.dualListSelectorControls}`))) {
      return;
    }
    event.stopImmediatePropagation();
    const controls = Array.from(wrapperRef.current.getElementsByTagName("BUTTON")).filter((el) => !el.classList.contains("pf-m-disabled"));
    const activeElement = document.activeElement;
    handleArrows(event, controls, (element) => activeElement.contains(element), (element) => element, void 0, void 0, true, false);
  };
  React184.useEffect(() => {
    window.addEventListener("keydown", handleKeys);
    return () => {
      window.removeEventListener("keydown", handleKeys);
    };
  }, [wrapperRef.current]);
  return React184.createElement("div", Object.assign({ className: css(dual_list_selector_default.dualListSelectorControls, className), tabIndex: 0, ref: wrapperRef, "aria-label": ariaLabel }, props), children);
};
DualListSelectorControlsWrapperBase.displayName = "DualListSelectorControlsWrapperBase";
var DualListSelectorControlsWrapper = React184.forwardRef((props, ref) => React184.createElement(DualListSelectorControlsWrapperBase, Object.assign({ innerRef: ref, role: "group" }, props)));
DualListSelectorControlsWrapper.displayName = "DualListSelectorControlsWrapper";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorControl.js
init_tslib_es6();
var React185 = __toESM(require_react());
var DualListSelectorControlBase = (_a) => {
  var { innerRef, children = null, className, "aria-label": ariaLabel, isDisabled = true, onClick = () => {
  }, tooltipContent, tooltipProps = {} } = _a, props = __rest(_a, ["innerRef", "children", "className", "aria-label", "isDisabled", "onClick", "tooltipContent", "tooltipProps"]);
  const privateRef = React185.useRef(null);
  const ref = innerRef || privateRef;
  return React185.createElement(
    "div",
    Object.assign({ className: css(dual_list_selector_default.dualListSelectorControlsItem, className) }, props),
    React185.createElement(Button, { isDisabled, "aria-disabled": isDisabled, variant: ButtonVariant.plain, onClick, "aria-label": ariaLabel, tabIndex: -1, ref }, children),
    tooltipContent && React185.createElement(Tooltip, Object.assign({ content: tooltipContent, position: "left", triggerRef: ref }, tooltipProps))
  );
};
DualListSelectorControlBase.displayName = "DualListSelectorControlBase";
var DualListSelectorControl = React185.forwardRef((props, ref) => React185.createElement(DualListSelectorControlBase, Object.assign({ innerRef: ref }, props)));
DualListSelectorControl.displayName = "DualListSelectorControl";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelector.js
var DualListSelector = class extends React186.Component {
  constructor(props) {
    super(props);
    this.addAllButtonRef = React186.createRef();
    this.addSelectedButtonRef = React186.createRef();
    this.removeSelectedButtonRef = React186.createRef();
    this.removeAllButtonRef = React186.createRef();
    this.replacer = (key, value) => {
      if (key[0] === "_") {
        return void 0;
      }
      return value;
    };
    this.onFilterUpdate = (newFilteredOptions, paneType, isSearchReset) => {
      const { isTree } = this.props;
      if (paneType === "available") {
        if (isSearchReset) {
          this.setState({
            availableFilteredOptions: null,
            availableTreeFilteredOptions: null
          });
          return;
        }
        if (isTree) {
          this.setState({
            availableTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)
          });
        } else {
          this.setState({
            availableFilteredOptions: newFilteredOptions
          });
        }
      } else if (paneType === "chosen") {
        if (isSearchReset) {
          this.setState({
            chosenFilteredOptions: null,
            chosenTreeFilteredOptions: null
          });
          return;
        }
        if (isTree) {
          this.setState({
            chosenTreeFilteredOptions: flattenTreeWithFolders(newFilteredOptions)
          });
        } else {
          this.setState({
            chosenFilteredOptions: newFilteredOptions
          });
        }
      }
    };
    this.addAllVisible = (event) => {
      this.setState((prevState) => {
        const itemsToRemove = [];
        const newAvailable = [];
        const movedOptions = prevState.availableFilteredOptions || prevState.availableOptions;
        prevState.availableOptions.forEach((value) => {
          if (movedOptions.indexOf(value) !== -1) {
            itemsToRemove.push(value);
          } else {
            newAvailable.push(value);
          }
        });
        const newChosen = [...prevState.chosenOptions, ...itemsToRemove];
        this.props.addAll && this.props.addAll(newAvailable, newChosen);
        this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
        return {
          chosenOptions: newChosen,
          chosenFilteredOptions: newChosen,
          availableOptions: newAvailable,
          availableFilteredOptions: newAvailable,
          chosenOptionsSelected: [],
          availableOptionsSelected: []
        };
      });
    };
    this.addAllTreeVisible = (event) => {
      this.setState((prevState) => {
        const movedOptions = prevState.availableTreeFilteredOptions || flattenTreeWithFolders(prevState.availableOptions);
        const newAvailable = prevState.availableOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterRestTreeItems(item, movedOptions));
        const currChosen = flattenTree(prevState.chosenOptions);
        const nextChosenOptions = currChosen.concat(movedOptions);
        const newChosen = this.createMergedCopy().map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, nextChosenOptions));
        this.props.addAll && this.props.addAll(newAvailable, newChosen);
        this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
        return {
          chosenOptions: newChosen,
          chosenFilteredOptions: newChosen,
          availableOptions: newAvailable,
          availableFilteredOptions: newAvailable,
          availableTreeOptionsChecked: [],
          chosenTreeOptionsChecked: []
        };
      });
    };
    this.addSelected = (event) => {
      this.setState((prevState) => {
        const itemsToRemove = [];
        const newAvailable = [];
        prevState.availableOptions.forEach((value, index) => {
          if (prevState.availableOptionsSelected.indexOf(index) !== -1) {
            itemsToRemove.push(value);
          } else {
            newAvailable.push(value);
          }
        });
        const newChosen = [...prevState.chosenOptions, ...itemsToRemove];
        this.props.addSelected && this.props.addSelected(newAvailable, newChosen);
        this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
        return {
          chosenOptionsSelected: [],
          availableOptionsSelected: [],
          chosenOptions: newChosen,
          chosenFilteredOptions: newChosen,
          availableOptions: newAvailable,
          availableFilteredOptions: newAvailable
        };
      });
    };
    this.addTreeSelected = (event) => {
      this.setState((prevState) => {
        const newAvailable = prevState.availableOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterRestTreeItems(item, prevState.availableTreeOptionsChecked));
        const currChosen = flattenTree(prevState.chosenOptions);
        const nextChosenOptions = currChosen.concat(prevState.availableTreeOptionsChecked);
        const newChosen = this.createMergedCopy().map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, nextChosenOptions));
        this.props.addSelected && this.props.addSelected(newAvailable, newChosen);
        this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
        return {
          availableTreeOptionsChecked: [],
          chosenTreeOptionsChecked: [],
          availableOptions: newAvailable,
          chosenOptions: newChosen
        };
      });
    };
    this.removeAllVisible = (event) => {
      this.setState((prevState) => {
        const itemsToRemove = [];
        const newChosen = [];
        const movedOptions = prevState.chosenFilteredOptions || prevState.chosenOptions;
        prevState.chosenOptions.forEach((value) => {
          if (movedOptions.indexOf(value) !== -1) {
            itemsToRemove.push(value);
          } else {
            newChosen.push(value);
          }
        });
        const newAvailable = [...prevState.availableOptions, ...itemsToRemove];
        this.props.removeAll && this.props.removeAll(newAvailable, newChosen);
        this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
        return {
          chosenOptions: newChosen,
          chosenFilteredOptions: newChosen,
          availableOptions: newAvailable,
          availableFilteredOptions: newAvailable,
          chosenOptionsSelected: [],
          availableOptionsSelected: []
        };
      });
    };
    this.removeAllTreeVisible = (event) => {
      this.setState((prevState) => {
        const movedOptions = prevState.chosenTreeFilteredOptions || flattenTreeWithFolders(prevState.chosenOptions);
        const newChosen = prevState.chosenOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterRestTreeItems(item, movedOptions));
        const currAvailable = flattenTree(prevState.availableOptions);
        const nextAvailableOptions = currAvailable.concat(movedOptions);
        const newAvailable = this.createMergedCopy().map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, nextAvailableOptions));
        this.props.removeAll && this.props.removeAll(newAvailable, newChosen);
        this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
        return {
          chosenOptions: newChosen,
          availableOptions: newAvailable,
          availableTreeOptionsChecked: [],
          chosenTreeOptionsChecked: []
        };
      });
    };
    this.removeSelected = (event) => {
      this.setState((prevState) => {
        const itemsToRemove = [];
        const newChosen = [];
        prevState.chosenOptions.forEach((value, index) => {
          if (prevState.chosenOptionsSelected.indexOf(index) !== -1) {
            itemsToRemove.push(value);
          } else {
            newChosen.push(value);
          }
        });
        const newAvailable = [...prevState.availableOptions, ...itemsToRemove];
        this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);
        this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
        return {
          chosenOptionsSelected: [],
          availableOptionsSelected: [],
          chosenOptions: newChosen,
          chosenFilteredOptions: newChosen,
          availableOptions: newAvailable,
          availableFilteredOptions: newAvailable
        };
      });
    };
    this.removeTreeSelected = (event) => {
      this.setState((prevState) => {
        const newChosen = prevState.chosenOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterRestTreeItems(item, prevState.chosenTreeOptionsChecked));
        const currAvailable = flattenTree(prevState.availableOptions);
        const nextAvailableOptions = currAvailable.concat(prevState.chosenTreeOptionsChecked);
        const newAvailable = this.createMergedCopy().map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, nextAvailableOptions));
        this.props.removeSelected && this.props.removeSelected(newAvailable, newChosen);
        this.props.onListChange && this.props.onListChange(event, newAvailable, newChosen);
        return {
          availableTreeOptionsChecked: [],
          chosenTreeOptionsChecked: [],
          availableOptions: newAvailable,
          chosenOptions: newChosen
        };
      });
    };
    this.onOptionSelect = (e, index, isChosen, id, itemData, parentData) => {
      this.setState((prevState) => {
        const originalArray = isChosen ? prevState.chosenOptionsSelected : prevState.availableOptionsSelected;
        let updatedArray = null;
        if (originalArray.indexOf(index) !== -1) {
          updatedArray = originalArray.filter((value) => value !== index);
        } else {
          updatedArray = [...originalArray, index];
        }
        return {
          chosenOptionsSelected: isChosen ? updatedArray : prevState.chosenOptionsSelected,
          availableOptionsSelected: isChosen ? prevState.availableOptionsSelected : updatedArray
        };
      });
      this.props.onOptionSelect && this.props.onOptionSelect(e, index, isChosen, id, itemData, parentData);
    };
    this.isChecked = (treeItem, isChosen) => isChosen ? this.state.chosenTreeOptionsChecked.includes(treeItem.id) : this.state.availableTreeOptionsChecked.includes(treeItem.id);
    this.areAllDescendantsChecked = (treeItem, isChosen) => treeItem.children ? treeItem.children.every((child) => this.areAllDescendantsChecked(child, isChosen)) : this.isChecked(treeItem, isChosen);
    this.areSomeDescendantsChecked = (treeItem, isChosen) => treeItem.children ? treeItem.children.some((child) => this.areSomeDescendantsChecked(child, isChosen)) : this.isChecked(treeItem, isChosen);
    this.mapChecked = (item, isChosen) => {
      const hasCheck = this.areAllDescendantsChecked(item, isChosen);
      item.isChecked = false;
      if (hasCheck) {
        item.isChecked = true;
      } else {
        const hasPartialCheck = this.areSomeDescendantsChecked(item, isChosen);
        if (hasPartialCheck) {
          item.isChecked = null;
        }
      }
      if (item.children) {
        return Object.assign(Object.assign({}, item), { children: item.children.map((child) => this.mapChecked(child, isChosen)) });
      }
      return item;
    };
    this.onTreeOptionCheck = (evt, isChecked, itemData, isChosen) => {
      const { availableOptions, availableTreeFilteredOptions, chosenOptions, chosenTreeFilteredOptions } = this.state;
      let panelOptions;
      if (isChosen) {
        if (chosenTreeFilteredOptions) {
          panelOptions = chosenOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, chosenTreeFilteredOptions));
        } else {
          panelOptions = chosenOptions;
        }
      } else {
        if (availableTreeFilteredOptions) {
          panelOptions = availableOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItemsWithoutFolders(item, availableTreeFilteredOptions));
        } else {
          panelOptions = availableOptions;
        }
      }
      const checkedOptionTree = panelOptions.map((opt) => Object.assign({}, opt)).filter((item) => filterTreeItems(item, [itemData.id]));
      const flatTree = flattenTreeWithFolders(checkedOptionTree);
      const prevChecked = isChosen ? this.state.chosenTreeOptionsChecked : this.state.availableTreeOptionsChecked;
      let updatedChecked = [];
      if (isChecked) {
        updatedChecked = prevChecked.concat(flatTree.filter((id) => !prevChecked.includes(id)));
      } else {
        updatedChecked = prevChecked.filter((id) => !flatTree.includes(id));
      }
      this.setState((prevState) => ({
        availableTreeOptionsChecked: isChosen ? prevState.availableTreeOptionsChecked : updatedChecked,
        chosenTreeOptionsChecked: isChosen ? updatedChecked : prevState.chosenTreeOptionsChecked
      }), () => {
        this.props.onOptionCheck && this.props.onOptionCheck(evt, isChecked, itemData.id, updatedChecked);
      });
    };
    this.state = {
      availableOptions: [...this.props.availableOptions],
      availableOptionsSelected: [],
      availableFilteredOptions: null,
      availableTreeFilteredOptions: null,
      chosenOptions: [...this.props.chosenOptions],
      chosenOptionsSelected: [],
      chosenFilteredOptions: null,
      chosenTreeFilteredOptions: null,
      availableTreeOptionsChecked: [],
      chosenTreeOptionsChecked: []
    };
  }
  // If the DualListSelector uses trees, concat the two initial arrays and merge duplicate folder IDs
  createMergedCopy() {
    const copyOfAvailable = JSON.parse(JSON.stringify(this.props.availableOptions));
    const copyOfChosen = JSON.parse(JSON.stringify(this.props.chosenOptions));
    return this.props.isTree ? Object.values(copyOfAvailable.concat(copyOfChosen).reduce((mapObj, item) => {
      const key = item.id;
      if (mapObj[key]) {
        mapObj[key].children.push(...item.children);
      } else {
        mapObj[key] = Object.assign({}, item);
      }
      return mapObj;
    }, {})) : null;
  }
  componentDidUpdate() {
    if (JSON.stringify(this.props.availableOptions, this.replacer) !== JSON.stringify(this.state.availableOptions, this.replacer) || JSON.stringify(this.props.chosenOptions, this.replacer) !== JSON.stringify(this.state.chosenOptions, this.replacer)) {
      this.setState({
        availableOptions: [...this.props.availableOptions],
        chosenOptions: [...this.props.chosenOptions]
      });
    }
  }
  render() {
    const _a = this.props, {
      availableOptionsTitle,
      availableOptionsActions,
      availableOptionsSearchAriaLabel,
      className,
      children,
      chosenOptionsTitle,
      chosenOptionsActions,
      chosenOptionsSearchAriaLabel,
      filterOption,
      isSearchable,
      chosenOptionsStatus,
      availableOptionsStatus,
      controlsAriaLabel,
      addAllAriaLabel,
      addSelectedAriaLabel,
      removeSelectedAriaLabel,
      removeAllAriaLabel,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      availableOptions: consumerPassedAvailableOptions,
      chosenOptions: consumerPassedChosenOptions,
      removeSelected,
      addAll,
      removeAll,
      addSelected,
      onListChange,
      onAvailableOptionsSearchInputChanged,
      onChosenOptionsSearchInputChanged,
      onOptionSelect,
      onOptionCheck,
      id,
      isTree,
      isDisabled,
      addAllTooltip,
      addAllTooltipProps,
      addSelectedTooltip,
      addSelectedTooltipProps,
      removeAllTooltip,
      removeAllTooltipProps,
      removeSelectedTooltip,
      removeSelectedTooltipProps
    } = _a, props = __rest(_a, ["availableOptionsTitle", "availableOptionsActions", "availableOptionsSearchAriaLabel", "className", "children", "chosenOptionsTitle", "chosenOptionsActions", "chosenOptionsSearchAriaLabel", "filterOption", "isSearchable", "chosenOptionsStatus", "availableOptionsStatus", "controlsAriaLabel", "addAllAriaLabel", "addSelectedAriaLabel", "removeSelectedAriaLabel", "removeAllAriaLabel", "availableOptions", "chosenOptions", "removeSelected", "addAll", "removeAll", "addSelected", "onListChange", "onAvailableOptionsSearchInputChanged", "onChosenOptionsSearchInputChanged", "onOptionSelect", "onOptionCheck", "id", "isTree", "isDisabled", "addAllTooltip", "addAllTooltipProps", "addSelectedTooltip", "addSelectedTooltipProps", "removeAllTooltip", "removeAllTooltipProps", "removeSelectedTooltip", "removeSelectedTooltipProps"]);
    const { availableOptions, chosenOptions, chosenOptionsSelected, availableOptionsSelected, chosenTreeOptionsChecked, availableTreeOptionsChecked } = this.state;
    const availableOptionsStatusToDisplay = availableOptionsStatus || (isTree ? `${filterFolders(availableOptions, availableTreeOptionsChecked).length} of ${flattenTree(availableOptions).length} items selected` : `${availableOptionsSelected.length} of ${availableOptions.length} items selected`);
    const chosenOptionsStatusToDisplay = chosenOptionsStatus || (isTree ? `${filterFolders(chosenOptions, chosenTreeOptionsChecked).length} of ${flattenTree(chosenOptions).length} items selected` : `${chosenOptionsSelected.length} of ${chosenOptions.length} items selected`);
    const available = isTree ? availableOptions.map((item) => this.mapChecked(item, false)) : availableOptions;
    const chosen = isTree ? chosenOptions.map((item) => this.mapChecked(item, true)) : chosenOptions;
    return React186.createElement(
      DualListSelectorContext.Provider,
      { value: { isTree } },
      React186.createElement(GenerateId, null, (randomId) => React186.createElement("div", Object.assign({ className: css(dual_list_selector_default.dualListSelector, className), id: id || randomId }, props), children === "" ? React186.createElement(
        React186.Fragment,
        null,
        React186.createElement(DualListSelectorPane, { isSearchable, onFilterUpdate: this.onFilterUpdate, searchInputAriaLabel: availableOptionsSearchAriaLabel, filterOption, onSearchInputChanged: onAvailableOptionsSearchInputChanged, status: availableOptionsStatusToDisplay, title: availableOptionsTitle, options: available, selectedOptions: isTree ? availableTreeOptionsChecked : availableOptionsSelected, onOptionSelect: this.onOptionSelect, onOptionCheck: (e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, false), actions: availableOptionsActions, id: `${id || randomId}-available-pane`, isDisabled }),
        React186.createElement(
          DualListSelectorControlsWrapper,
          { "aria-label": controlsAriaLabel },
          React186.createElement(
            DualListSelectorControl,
            { isDisabled: (isTree ? availableTreeOptionsChecked.length === 0 : availableOptionsSelected.length === 0) || isDisabled, onClick: isTree ? this.addTreeSelected : this.addSelected, ref: this.addSelectedButtonRef, "aria-label": addSelectedAriaLabel, tooltipContent: addSelectedTooltip, tooltipProps: addSelectedTooltipProps },
            React186.createElement(angle_right_icon_default, null)
          ),
          React186.createElement(
            DualListSelectorControl,
            { isDisabled: availableOptions.length === 0 || isDisabled, onClick: isTree ? this.addAllTreeVisible : this.addAllVisible, ref: this.addAllButtonRef, "aria-label": addAllAriaLabel, tooltipContent: addAllTooltip, tooltipProps: addAllTooltipProps },
            React186.createElement(angle_double_right_icon_default, null)
          ),
          React186.createElement(
            DualListSelectorControl,
            { isDisabled: chosenOptions.length === 0 || isDisabled, onClick: isTree ? this.removeAllTreeVisible : this.removeAllVisible, "aria-label": removeAllAriaLabel, ref: this.removeAllButtonRef, tooltipContent: removeAllTooltip, tooltipProps: removeAllTooltipProps },
            React186.createElement(angle_double_left_icon_default, null)
          ),
          React186.createElement(
            DualListSelectorControl,
            { onClick: isTree ? this.removeTreeSelected : this.removeSelected, isDisabled: (isTree ? chosenTreeOptionsChecked.length === 0 : chosenOptionsSelected.length === 0) || isDisabled, ref: this.removeSelectedButtonRef, "aria-label": removeSelectedAriaLabel, tooltipContent: removeSelectedTooltip, tooltipProps: removeSelectedTooltipProps },
            React186.createElement(angle_left_icon_default, null)
          )
        ),
        React186.createElement(DualListSelectorPane, { isChosen: true, isSearchable, onFilterUpdate: this.onFilterUpdate, searchInputAriaLabel: chosenOptionsSearchAriaLabel, filterOption, onSearchInputChanged: onChosenOptionsSearchInputChanged, title: chosenOptionsTitle, status: chosenOptionsStatusToDisplay, options: chosen, selectedOptions: isTree ? chosenTreeOptionsChecked : chosenOptionsSelected, onOptionSelect: this.onOptionSelect, onOptionCheck: (e, isChecked, itemData) => this.onTreeOptionCheck(e, isChecked, itemData, true), actions: chosenOptionsActions, id: `${id || randomId}-chosen-pane`, isDisabled })
      ) : children))
    );
  }
};
DualListSelector.displayName = "DualListSelector";
DualListSelector.defaultProps = {
  children: "",
  availableOptions: [],
  availableOptionsTitle: "Available options",
  availableOptionsSearchAriaLabel: "Available search input",
  chosenOptions: [],
  chosenOptionsTitle: "Chosen options",
  chosenOptionsSearchAriaLabel: "Chosen search input",
  controlsAriaLabel: "Selector controls",
  addAllAriaLabel: "Add all",
  addSelectedAriaLabel: "Add selected",
  removeSelectedAriaLabel: "Remove selected",
  removeAllAriaLabel: "Remove all",
  isTree: false,
  isDisabled: false
};

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js
init_tslib_es6();
var React187 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/EmptyState/empty-state.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/EmptyState/empty-state.css";
var empty_state_default = {
  "emptyState": "pf-v5-c-empty-state",
  "emptyStateActions": "pf-v5-c-empty-state__actions",
  "emptyStateBody": "pf-v5-c-empty-state__body",
  "emptyStateContent": "pf-v5-c-empty-state__content",
  "emptyStateFooter": "pf-v5-c-empty-state__footer",
  "emptyStateIcon": "pf-v5-c-empty-state__icon",
  "emptyStateTitleText": "pf-v5-c-empty-state__title-text",
  "modifiers": {
    "xs": "pf-m-xs",
    "sm": "pf-m-sm",
    "lg": "pf-m-lg",
    "xl": "pf-m-xl",
    "fullHeight": "pf-m-full-height"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js
var EmptyStateVariant;
(function(EmptyStateVariant2) {
  EmptyStateVariant2["xs"] = "xs";
  EmptyStateVariant2["sm"] = "sm";
  EmptyStateVariant2["lg"] = "lg";
  EmptyStateVariant2["xl"] = "xl";
  EmptyStateVariant2["full"] = "full";
})(EmptyStateVariant || (EmptyStateVariant = {}));
var EmptyState = (_a) => {
  var { children, className, variant = EmptyStateVariant.full, isFullHeight } = _a, props = __rest(_a, ["children", "className", "variant", "isFullHeight"]);
  return React187.createElement(
    "div",
    Object.assign({ className: css(empty_state_default.emptyState, variant === "xs" && empty_state_default.modifiers.xs, variant === "sm" && empty_state_default.modifiers.sm, variant === "lg" && empty_state_default.modifiers.lg, variant === "xl" && empty_state_default.modifiers.xl, isFullHeight && empty_state_default.modifiers.fullHeight, className) }, props),
    React187.createElement("div", { className: css(empty_state_default.emptyStateContent) }, children)
  );
};
EmptyState.displayName = "EmptyState";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateHeader.js
init_tslib_es6();
var React188 = __toESM(require_react());
var EmptyStateHeader = (_a) => {
  var { children, className, titleClassName, titleText, headingLevel: HeadingLevel = "h1", icon } = _a, props = __rest(_a, ["children", "className", "titleClassName", "titleText", "headingLevel", "icon"]);
  return React188.createElement(
    "div",
    Object.assign({ className: css(`${empty_state_default.emptyState}__header`, className) }, props),
    icon,
    (titleText || children) && React188.createElement(
      "div",
      { className: css(`${empty_state_default.emptyState}__title`) },
      titleText && React188.createElement(HeadingLevel, { className: css(empty_state_default.emptyStateTitleText, titleClassName) }, titleText),
      children
    )
  );
};
EmptyStateHeader.displayName = "EmptyStateHeader";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js
init_tslib_es6();
var React189 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_empty_state__icon_Color.js
var c_empty_state__icon_Color = {
  "name": "--pf-v5-c-empty-state__icon--Color",
  "value": "#6a6e73",
  "var": "var(--pf-v5-c-empty-state__icon--Color)"
};
var c_empty_state_icon_Color_default = c_empty_state__icon_Color;

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js
var isSpinner = (icon) => icon.type === Spinner;
var EmptyStateIcon = (_a) => {
  var { className, icon: IconComponent, color } = _a, props = __rest(_a, ["className", "icon", "color"]);
  const iconIsSpinner = isSpinner(React189.createElement(IconComponent, null));
  return React189.createElement(
    "div",
    Object.assign({ className: css(empty_state_default.emptyStateIcon) }, color && !iconIsSpinner && { style: { [c_empty_state_icon_Color_default.name]: color } }),
    React189.createElement(IconComponent, Object.assign({ className, "aria-hidden": !iconIsSpinner }, props))
  );
};
EmptyStateIcon.displayName = "EmptyStateIcon";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js
init_tslib_es6();
var React190 = __toESM(require_react());
var EmptyStateBody = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React190.createElement("div", Object.assign({ className: css(empty_state_default.emptyStateBody, className) }, props), children);
};
EmptyStateBody.displayName = "EmptyStateBody";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateFooter.js
init_tslib_es6();
var React191 = __toESM(require_react());
var EmptyStateFooter = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React191.createElement("div", Object.assign({ className: css(empty_state_default.emptyStateFooter, className) }, props), children);
};
EmptyStateFooter.displayName = "EmptyStateFooter";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateActions.js
init_tslib_es6();
var React192 = __toESM(require_react());
var EmptyStateActions = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React192.createElement("div", Object.assign({ className: css(empty_state_default.emptyStateActions, className) }, props), children);
};
EmptyStateActions.displayName = "EmptyStateActions";

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSection.js
init_tslib_es6();
var React193 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ExpandableSection/expandable-section.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/ExpandableSection/expandable-section.css";
var expandable_section_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "expandableSection": "pf-v5-c-expandable-section",
  "expandableSectionContent": "pf-v5-c-expandable-section__content",
  "expandableSectionToggle": "pf-v5-c-expandable-section__toggle",
  "expandableSectionToggleIcon": "pf-v5-c-expandable-section__toggle-icon",
  "expandableSectionToggleText": "pf-v5-c-expandable-section__toggle-text",
  "modifiers": {
    "expanded": "pf-m-expanded",
    "detached": "pf-m-detached",
    "truncate": "pf-m-truncate",
    "limitWidth": "pf-m-limit-width",
    "displayLg": "pf-m-display-lg",
    "indented": "pf-m-indented",
    "active": "pf-m-active",
    "expandTop": "pf-m-expand-top"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/c_expandable_section_m_truncate__content_LineClamp.js
var c_expandable_section_m_truncate__content_LineClamp = {
  "name": "--pf-v5-c-expandable-section--m-truncate__content--LineClamp",
  "value": "3",
  "var": "var(--pf-v5-c-expandable-section--m-truncate__content--LineClamp)"
};
var c_expandable_section_m_truncate_content_LineClamp_default = c_expandable_section_m_truncate__content_LineClamp;

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSection.js
var ExpandableSectionVariant;
(function(ExpandableSectionVariant2) {
  ExpandableSectionVariant2["default"] = "default";
  ExpandableSectionVariant2["truncate"] = "truncate";
})(ExpandableSectionVariant || (ExpandableSectionVariant = {}));
var setLineClamp = (lines, element) => {
  if (!element || lines < 1) {
    return;
  }
  element.style.setProperty(c_expandable_section_m_truncate_content_LineClamp_default.name, lines.toString());
};
var ExpandableSection = class extends React193.Component {
  constructor(props) {
    super(props);
    this.expandableContentRef = React193.createRef();
    this.observer = () => {
    };
    this.checkToggleVisibility = () => {
      var _a;
      if ((_a = this.expandableContentRef) === null || _a === void 0 ? void 0 : _a.current) {
        const maxLines = this.props.truncateMaxLines || parseInt(c_expandable_section_m_truncate_content_LineClamp_default.value);
        const totalLines = this.expandableContentRef.current.scrollHeight / parseInt(getComputedStyle(this.expandableContentRef.current).lineHeight);
        this.setState({
          hasToggle: totalLines > maxLines
        });
      }
    };
    this.resize = () => {
      const { offsetWidth } = this.expandableContentRef.current;
      if (this.state.previousWidth !== offsetWidth) {
        this.setState({ previousWidth: offsetWidth });
        this.checkToggleVisibility();
      }
    };
    this.handleResize = debounce(this.resize, 250);
    this.state = {
      isExpanded: props.isExpanded,
      hasToggle: true,
      previousWidth: void 0
    };
  }
  calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {
    if (propOrStateIsExpanded && toggleTextExpanded !== "") {
      return toggleTextExpanded;
    }
    if (!propOrStateIsExpanded && toggleTextCollapsed !== "") {
      return toggleTextCollapsed;
    }
    return toggleText;
  }
  componentDidMount() {
    if (this.props.variant === ExpandableSectionVariant.truncate) {
      const expandableContent = this.expandableContentRef.current;
      this.setState({ previousWidth: expandableContent.offsetWidth });
      this.observer = getResizeObserver(expandableContent, this.handleResize, false);
      if (this.props.truncateMaxLines) {
        setLineClamp(this.props.truncateMaxLines, expandableContent);
      }
      this.checkToggleVisibility();
    }
  }
  componentDidUpdate(prevProps) {
    if (this.props.variant === ExpandableSectionVariant.truncate && (prevProps.truncateMaxLines !== this.props.truncateMaxLines || prevProps.children !== this.props.children)) {
      const expandableContent = this.expandableContentRef.current;
      setLineClamp(this.props.truncateMaxLines, expandableContent);
      this.checkToggleVisibility();
    }
  }
  componentWillUnmount() {
    if (this.props.variant === ExpandableSectionVariant.truncate) {
      this.observer();
    }
  }
  render() {
    const _a = this.props, {
      onToggle: onToggleProp,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      isActive,
      className,
      toggleText,
      toggleTextExpanded,
      toggleTextCollapsed,
      toggleContent,
      children,
      isExpanded,
      isDetached,
      displaySize,
      isWidthLimited,
      isIndented,
      contentId,
      toggleId,
      variant,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      truncateMaxLines
    } = _a, props = __rest(_a, ["onToggle", "isActive", "className", "toggleText", "toggleTextExpanded", "toggleTextCollapsed", "toggleContent", "children", "isExpanded", "isDetached", "displaySize", "isWidthLimited", "isIndented", "contentId", "toggleId", "variant", "truncateMaxLines"]);
    if (isDetached && !toggleId) {
      console.warn("ExpandableSection: The toggleId value must be passed in and must match the toggleId of the ExpandableSectionToggle.");
    }
    let onToggle = onToggleProp;
    let propOrStateIsExpanded = isExpanded;
    const uniqueContentId = contentId || getUniqueId("expandable-section-content");
    const uniqueToggleId = toggleId || getUniqueId("expandable-section-toggle");
    if (isExpanded === void 0) {
      propOrStateIsExpanded = this.state.isExpanded;
      onToggle = (event, isOpen) => {
        this.setState({ isExpanded: isOpen }, () => onToggleProp(event, this.state.isExpanded));
      };
    }
    const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);
    const expandableToggle = !isDetached && React193.createElement(
      "button",
      { className: css(expandable_section_default.expandableSectionToggle), type: "button", "aria-expanded": propOrStateIsExpanded, "aria-controls": uniqueContentId, id: uniqueToggleId, onClick: (event) => onToggle(event, !propOrStateIsExpanded) },
      variant !== ExpandableSectionVariant.truncate && React193.createElement(
        "span",
        { className: css(expandable_section_default.expandableSectionToggleIcon) },
        React193.createElement(angle_right_icon_default, { "aria-hidden": true })
      ),
      React193.createElement("span", { className: css(expandable_section_default.expandableSectionToggleText) }, toggleContent || computedToggleText)
    );
    return React193.createElement(
      "div",
      Object.assign({ className: css(expandable_section_default.expandableSection, propOrStateIsExpanded && expandable_section_default.modifiers.expanded, isActive && expandable_section_default.modifiers.active, isDetached && expandable_section_default.modifiers.detached, displaySize === "lg" && expandable_section_default.modifiers.displayLg, isWidthLimited && expandable_section_default.modifiers.limitWidth, isIndented && expandable_section_default.modifiers.indented, variant === ExpandableSectionVariant.truncate && expandable_section_default.modifiers.truncate, className) }, props),
      variant === ExpandableSectionVariant.default && expandableToggle,
      React193.createElement("div", { ref: this.expandableContentRef, className: css(expandable_section_default.expandableSectionContent), hidden: variant !== ExpandableSectionVariant.truncate && !propOrStateIsExpanded, id: uniqueContentId, "aria-labelledby": uniqueToggleId, role: "region" }, children),
      variant === ExpandableSectionVariant.truncate && this.state.hasToggle && expandableToggle
    );
  }
};
ExpandableSection.displayName = "ExpandableSection";
ExpandableSection.defaultProps = {
  className: "",
  toggleText: "",
  toggleTextExpanded: "",
  toggleTextCollapsed: "",
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onToggle: (event, isExpanded) => void 0,
  isActive: false,
  isDetached: false,
  displaySize: "default",
  isWidthLimited: false,
  isIndented: false,
  variant: "default"
};

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSectionToggle.js
init_tslib_es6();
var React194 = __toESM(require_react());
var ExpandableSectionToggle = (_a) => {
  var { children, className = "", isExpanded = false, onToggle, contentId, toggleId, direction = "down", hasTruncatedContent = false } = _a, props = __rest(_a, ["children", "className", "isExpanded", "onToggle", "contentId", "toggleId", "direction", "hasTruncatedContent"]);
  return React194.createElement(
    "div",
    Object.assign({ className: css(expandable_section_default.expandableSection, isExpanded && expandable_section_default.modifiers.expanded, expandable_section_default.modifiers.detached, hasTruncatedContent && expandable_section_default.modifiers.truncate, className) }, props),
    React194.createElement(
      "button",
      { className: css(expandable_section_default.expandableSectionToggle), type: "button", "aria-expanded": isExpanded, "aria-controls": contentId, onClick: () => onToggle(!isExpanded), id: toggleId },
      !hasTruncatedContent && React194.createElement(
        "span",
        { className: css(expandable_section_default.expandableSectionToggleIcon, isExpanded && direction === "up" && expandable_section_default.modifiers.expandTop) },
        React194.createElement(angle_right_icon_default, { "aria-hidden": true })
      ),
      React194.createElement("span", { className: css(expandable_section_default.expandableSectionToggleText) }, children)
    )
  );
};
ExpandableSectionToggle.displayName = "ExpandableSectionToggle";

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUploadField.js
init_tslib_es6();
var React196 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/FileUpload/file-upload.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/FileUpload/file-upload.css";
var file_upload_default = {
  "button": "pf-v5-c-button",
  "fileUpload": "pf-v5-c-file-upload",
  "fileUploadFileDetails": "pf-v5-c-file-upload__file-details",
  "fileUploadFileDetailsSpinner": "pf-v5-c-file-upload__file-details-spinner",
  "fileUploadFileSelect": "pf-v5-c-file-upload__file-select",
  "formControl": "pf-v5-c-form-control",
  "modifiers": {
    "dragHover": "pf-m-drag-hover",
    "loading": "pf-m-loading",
    "control": "pf-m-control"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js
init_tslib_es6();
var React195 = __toESM(require_react());
var TextAreResizeOrientation;
(function(TextAreResizeOrientation2) {
  TextAreResizeOrientation2["horizontal"] = "horizontal";
  TextAreResizeOrientation2["vertical"] = "vertical";
  TextAreResizeOrientation2["both"] = "both";
})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));
var TextAreaReadOnlyVariant;
(function(TextAreaReadOnlyVariant2) {
  TextAreaReadOnlyVariant2["default"] = "default";
  TextAreaReadOnlyVariant2["plain"] = "plain";
})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));
var TextAreaBase = class extends React195.Component {
  constructor(props) {
    super(props);
    this.inputRef = React195.createRef();
    this.setAutoHeight = (field) => {
      const parent = field.parentElement;
      parent.style.setProperty("height", "inherit");
      const computed = window.getComputedStyle(field);
      const height = parseInt(computed.getPropertyValue("border-top-width")) + parseInt(computed.getPropertyValue("padding-top")) + field.scrollHeight + parseInt(computed.getPropertyValue("padding-bottom")) + parseInt(computed.getPropertyValue("border-bottom-width"));
      parent.style.setProperty("height", `${height}px`);
    };
    this.handleChange = (event) => {
      const field = event.currentTarget;
      if (this.props.autoResize && canUseDOM) {
        this.setAutoHeight(field);
      }
      if (this.props.onChange) {
        this.props.onChange(event, field.value);
      }
    };
    if (!props.id && !props["aria-label"]) {
      console.error("TextArea: TextArea requires either an id or aria-label to be specified");
    }
  }
  componentDidMount() {
    const inputRef = this.props.innerRef || this.inputRef;
    if (this.props.autoResize && canUseDOM) {
      const field = inputRef.current;
      this.setAutoHeight(field);
    }
  }
  render() {
    const _a = this.props, {
      className,
      value,
      validated,
      isRequired,
      isDisabled,
      readOnlyVariant,
      resizeOrientation,
      innerRef,
      disabled,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      autoResize,
      onChange,
      /* eslint-enable @typescript-eslint/no-unused-vars */
      onBlur,
      onFocus
    } = _a, props = __rest(_a, ["className", "value", "validated", "isRequired", "isDisabled", "readOnlyVariant", "resizeOrientation", "innerRef", "disabled", "autoResize", "onChange", "onBlur", "onFocus"]);
    const orientation = `resize${capitalize(resizeOrientation)}`;
    const hasStatusIcon = ["success", "error", "warning"].includes(validated);
    return React195.createElement(
      "span",
      { className: css(form_control_default.formControl, readOnlyVariant && form_control_default.modifiers.readonly, readOnlyVariant === "plain" && form_control_default.modifiers.plain, resizeOrientation && form_control_default.modifiers[orientation], isDisabled && form_control_default.modifiers.disabled, hasStatusIcon && form_control_default.modifiers[validated], className) },
      React195.createElement("textarea", Object.assign({ onChange: this.handleChange, onFocus, onBlur }, typeof this.props.defaultValue !== "string" && { value }, { "aria-invalid": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: !!readOnlyVariant, ref: innerRef || this.inputRef }, props)),
      hasStatusIcon && React195.createElement(
        "span",
        { className: css(form_control_default.formControlUtilities) },
        React195.createElement(FormControlIcon, { status: validated })
      )
    );
  }
};
TextAreaBase.displayName = "TextArea";
TextAreaBase.defaultProps = {
  innerRef: React195.createRef(),
  className: "",
  isRequired: false,
  isDisabled: false,
  validated: "default",
  resizeOrientation: "both",
  "aria-label": null
};
var TextArea = React195.forwardRef((props, ref) => React195.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref })));
TextArea.displayName = "TextArea";

// node_modules/@patternfly/react-core/dist/esm/helpers/fileUtils.js
var fileReaderType;
(function(fileReaderType2) {
  fileReaderType2["text"] = "text";
  fileReaderType2["dataURL"] = "dataURL";
})(fileReaderType || (fileReaderType = {}));
function readFile(fileHandle, type) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = () => reject(reader.error);
    if (type === fileReaderType.text) {
      reader.readAsText(fileHandle);
    } else if (type === fileReaderType.dataURL) {
      reader.readAsDataURL(fileHandle);
    } else {
      reject("unknown type");
    }
  });
}

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUploadField.js
var FileUploadField = (_a) => {
  var { id, name, type, value = "", filename = "", onBrowseButtonClick = () => {
  }, onClearButtonClick = () => {
  }, onTextAreaClick, onTextChange, onTextAreaBlur, textAreaPlaceholder = "", className = "", isDisabled = false, isReadOnly = false, isLoading = false, spinnerAriaValueText, isRequired = false, isDragActive = false, validated = "default", "aria-label": ariaLabel = "File upload", filenamePlaceholder = "Drag a file here or browse to upload", filenameAriaLabel = filename ? "Read only filename" : filenamePlaceholder, browseButtonText = "Browse...", clearButtonText = "Clear", isClearButtonDisabled = !filename && !value, containerRef = null, allowEditingUploadedText = false, hideDefaultPreview = false, children = null } = _a, props = __rest(_a, ["id", "name", "type", "value", "filename", "onBrowseButtonClick", "onClearButtonClick", "onTextAreaClick", "onTextChange", "onTextAreaBlur", "textAreaPlaceholder", "className", "isDisabled", "isReadOnly", "isLoading", "spinnerAriaValueText", "isRequired", "isDragActive", "validated", "aria-label", "filenamePlaceholder", "filenameAriaLabel", "browseButtonText", "clearButtonText", "isClearButtonDisabled", "containerRef", "allowEditingUploadedText", "hideDefaultPreview", "children"]);
  const onTextAreaChange = (event, newValue) => {
    onTextChange === null || onTextChange === void 0 ? void 0 : onTextChange(event, newValue);
  };
  return React196.createElement(
    "div",
    Object.assign({ className: css(file_upload_default.fileUpload, isDragActive && file_upload_default.modifiers.dragHover, isLoading && file_upload_default.modifiers.loading, className), ref: containerRef }, props),
    React196.createElement(
      "div",
      { className: file_upload_default.fileUploadFileSelect },
      React196.createElement(
        InputGroup,
        null,
        React196.createElement(
          InputGroupItem,
          { isFill: true },
          React196.createElement(TextInput, {
            readOnlyVariant: "default",
            isDisabled,
            id: `${id}-filename`,
            name: name || `${id}-filename`,
            "aria-label": filenameAriaLabel,
            placeholder: filenamePlaceholder,
            "aria-describedby": `${id}-browse-button`,
            value: filename
          })
        ),
        React196.createElement(
          InputGroupItem,
          null,
          React196.createElement(Button, { id: `${id}-browse-button`, variant: ButtonVariant.control, onClick: onBrowseButtonClick, isDisabled }, browseButtonText)
        ),
        React196.createElement(
          InputGroupItem,
          null,
          React196.createElement(Button, { variant: ButtonVariant.control, isDisabled: isDisabled || isClearButtonDisabled, onClick: onClearButtonClick }, clearButtonText)
        )
      )
    ),
    React196.createElement(
      "div",
      { className: file_upload_default.fileUploadFileDetails },
      !hideDefaultPreview && type === fileReaderType.text && React196.createElement(TextArea, { readOnly: isReadOnly || !!filename && !allowEditingUploadedText, disabled: isDisabled, isRequired, resizeOrientation: TextAreResizeOrientation.vertical, validated, id, "aria-label": ariaLabel, value, onChange: onTextAreaChange, onClick: onTextAreaClick, onBlur: onTextAreaBlur, placeholder: textAreaPlaceholder }),
      isLoading && React196.createElement(
        "div",
        { className: file_upload_default.fileUploadFileDetailsSpinner },
        React196.createElement(Spinner, { size: spinnerSize.lg, "aria-valuetext": spinnerAriaValueText })
      )
    ),
    children
  );
};
FileUploadField.displayName = "FileUploadField";

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUpload.js
init_tslib_es6();
var React198 = __toESM(require_react());

// node_modules/react-dropzone/dist/es/index.js
var import_react21 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/file-selector/dist/es5/file-selector.js
init_tslib_es6();

// node_modules/file-selector/dist/es5/file.js
var COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
  ["aac", "audio/aac"],
  ["abw", "application/x-abiword"],
  ["arc", "application/x-freearc"],
  ["avif", "image/avif"],
  ["avi", "video/x-msvideo"],
  ["azw", "application/vnd.amazon.ebook"],
  ["bin", "application/octet-stream"],
  ["bmp", "image/bmp"],
  ["bz", "application/x-bzip"],
  ["bz2", "application/x-bzip2"],
  ["cda", "application/x-cdf"],
  ["csh", "application/x-csh"],
  ["css", "text/css"],
  ["csv", "text/csv"],
  ["doc", "application/msword"],
  ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
  ["eot", "application/vnd.ms-fontobject"],
  ["epub", "application/epub+zip"],
  ["gz", "application/gzip"],
  ["gif", "image/gif"],
  ["heic", "image/heic"],
  ["heif", "image/heif"],
  ["htm", "text/html"],
  ["html", "text/html"],
  ["ico", "image/vnd.microsoft.icon"],
  ["ics", "text/calendar"],
  ["jar", "application/java-archive"],
  ["jpeg", "image/jpeg"],
  ["jpg", "image/jpeg"],
  ["js", "text/javascript"],
  ["json", "application/json"],
  ["jsonld", "application/ld+json"],
  ["mid", "audio/midi"],
  ["midi", "audio/midi"],
  ["mjs", "text/javascript"],
  ["mp3", "audio/mpeg"],
  ["mp4", "video/mp4"],
  ["mpeg", "video/mpeg"],
  ["mpkg", "application/vnd.apple.installer+xml"],
  ["odp", "application/vnd.oasis.opendocument.presentation"],
  ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
  ["odt", "application/vnd.oasis.opendocument.text"],
  ["oga", "audio/ogg"],
  ["ogv", "video/ogg"],
  ["ogx", "application/ogg"],
  ["opus", "audio/opus"],
  ["otf", "font/otf"],
  ["png", "image/png"],
  ["pdf", "application/pdf"],
  ["php", "application/x-httpd-php"],
  ["ppt", "application/vnd.ms-powerpoint"],
  ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
  ["rar", "application/vnd.rar"],
  ["rtf", "application/rtf"],
  ["sh", "application/x-sh"],
  ["svg", "image/svg+xml"],
  ["swf", "application/x-shockwave-flash"],
  ["tar", "application/x-tar"],
  ["tif", "image/tiff"],
  ["tiff", "image/tiff"],
  ["ts", "video/mp2t"],
  ["ttf", "font/ttf"],
  ["txt", "text/plain"],
  ["vsd", "application/vnd.visio"],
  ["wav", "audio/wav"],
  ["weba", "audio/webm"],
  ["webm", "video/webm"],
  ["webp", "image/webp"],
  ["woff", "font/woff"],
  ["woff2", "font/woff2"],
  ["xhtml", "application/xhtml+xml"],
  ["xls", "application/vnd.ms-excel"],
  ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  ["xml", "application/xml"],
  ["xul", "application/vnd.mozilla.xul+xml"],
  ["zip", "application/zip"],
  ["7z", "application/x-7z-compressed"],
  // Others
  ["mkv", "video/x-matroska"],
  ["mov", "video/quicktime"],
  ["msg", "application/vnd.ms-outlook"]
]);
function toFileWithPath(file, path) {
  var f = withMimeType(file);
  if (typeof f.path !== "string") {
    var webkitRelativePath = file.webkitRelativePath;
    Object.defineProperty(f, "path", {
      value: typeof path === "string" ? path : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : file.name,
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  return f;
}
function withMimeType(file) {
  var name = file.name;
  var hasExtension = name && name.lastIndexOf(".") !== -1;
  if (hasExtension && !file.type) {
    var ext = name.split(".").pop().toLowerCase();
    var type = COMMON_MIME_TYPES.get(ext);
    if (type) {
      Object.defineProperty(file, "type", {
        value: type,
        writable: false,
        configurable: false,
        enumerable: true
      });
    }
  }
  return file;
}

// node_modules/file-selector/dist/es5/file-selector.js
var FILES_TO_IGNORE = [
  // Thumbnail cache files for macOS and Windows
  ".DS_Store",
  "Thumbs.db"
  // Windows
];
function fromEvent(evt) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      if (isObject(evt) && isDataTransfer(evt.dataTransfer)) {
        return [2, getDataTransferFiles(evt.dataTransfer, evt.type)];
      } else if (isChangeEvt(evt)) {
        return [2, getInputFiles(evt)];
      } else if (Array.isArray(evt) && evt.every(function(item) {
        return "getFile" in item && typeof item.getFile === "function";
      })) {
        return [2, getFsHandleFiles(evt)];
      }
      return [2, []];
    });
  });
}
function isDataTransfer(value) {
  return isObject(value);
}
function isChangeEvt(value) {
  return isObject(value) && isObject(value.target);
}
function isObject(v) {
  return typeof v === "object" && v !== null;
}
function getInputFiles(evt) {
  return fromList(evt.target.files).map(function(file) {
    return toFileWithPath(file);
  });
}
function getFsHandleFiles(handles) {
  return __awaiter(this, void 0, void 0, function() {
    var files;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, Promise.all(handles.map(function(h) {
            return h.getFile();
          }))];
        case 1:
          files = _a.sent();
          return [2, files.map(function(file) {
            return toFileWithPath(file);
          })];
      }
    });
  });
}
function getDataTransferFiles(dt, type) {
  return __awaiter(this, void 0, void 0, function() {
    var items, files;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!dt.items)
            return [3, 2];
          items = fromList(dt.items).filter(function(item) {
            return item.kind === "file";
          });
          if (type !== "drop") {
            return [2, items];
          }
          return [4, Promise.all(items.map(toFilePromises))];
        case 1:
          files = _a.sent();
          return [2, noIgnoredFiles(flatten(files))];
        case 2:
          return [2, noIgnoredFiles(fromList(dt.files).map(function(file) {
            return toFileWithPath(file);
          }))];
      }
    });
  });
}
function noIgnoredFiles(files) {
  return files.filter(function(file) {
    return FILES_TO_IGNORE.indexOf(file.name) === -1;
  });
}
function fromList(items) {
  if (items === null) {
    return [];
  }
  var files = [];
  for (var i = 0; i < items.length; i++) {
    var file = items[i];
    files.push(file);
  }
  return files;
}
function toFilePromises(item) {
  if (typeof item.webkitGetAsEntry !== "function") {
    return fromDataTransferItem(item);
  }
  var entry = item.webkitGetAsEntry();
  if (entry && entry.isDirectory) {
    return fromDirEntry(entry);
  }
  return fromDataTransferItem(item);
}
function flatten(items) {
  return items.reduce(function(acc, files) {
    return __spreadArray(__spreadArray([], __read(acc), false), __read(Array.isArray(files) ? flatten(files) : [files]), false);
  }, []);
}
function fromDataTransferItem(item) {
  var file = item.getAsFile();
  if (!file) {
    return Promise.reject("".concat(item, " is not a File"));
  }
  var fwp = toFileWithPath(file);
  return Promise.resolve(fwp);
}
function fromEntry(entry) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry)];
    });
  });
}
function fromDirEntry(entry) {
  var reader = entry.createReader();
  return new Promise(function(resolve, reject) {
    var entries = [];
    function readEntries() {
      var _this = this;
      reader.readEntries(function(batch) {
        return __awaiter(_this, void 0, void 0, function() {
          var files, err_1, items;
          return __generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                if (!!batch.length)
                  return [3, 5];
                _a.label = 1;
              case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, Promise.all(entries)];
              case 2:
                files = _a.sent();
                resolve(files);
                return [3, 4];
              case 3:
                err_1 = _a.sent();
                reject(err_1);
                return [3, 4];
              case 4:
                return [3, 6];
              case 5:
                items = Promise.all(batch.map(fromEntry));
                entries.push(items);
                readEntries();
                _a.label = 6;
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, function(err) {
        reject(err);
      });
    }
    readEntries();
  });
}
function fromFileEntry(entry) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(_a) {
      return [2, new Promise(function(resolve, reject) {
        entry.file(function(file) {
          var fwp = toFileWithPath(file, entry.fullPath);
          resolve(fwp);
        }, function(err) {
          reject(err);
        });
      })];
    });
  });
}

// node_modules/react-dropzone/dist/es/utils/index.js
var import_attr_accept = __toESM(require_es());
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
var FILE_INVALID_TYPE = "file-invalid-type";
var FILE_TOO_LARGE = "file-too-large";
var FILE_TOO_SMALL = "file-too-small";
var TOO_MANY_FILES = "too-many-files";
var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr2(accept) {
  accept = Array.isArray(accept) && accept.length === 1 ? accept[0] : accept;
  var messageSuffix = Array.isArray(accept) ? "one of ".concat(accept.join(", ")) : accept;
  return {
    code: FILE_INVALID_TYPE,
    message: "File type must be ".concat(messageSuffix)
  };
};
var getTooLargeRejectionErr = function getTooLargeRejectionErr2(maxSize) {
  return {
    code: FILE_TOO_LARGE,
    message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
  };
};
var getTooSmallRejectionErr = function getTooSmallRejectionErr2(minSize) {
  return {
    code: FILE_TOO_SMALL,
    message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
  };
};
var TOO_MANY_FILES_REJECTION = {
  code: TOO_MANY_FILES,
  message: "Too many files"
};
function fileAccepted(file, accept) {
  var isAcceptable = file.type === "application/x-moz-file" || (0, import_attr_accept.default)(file, accept);
  return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
}
function fileMatchSize(file, minSize, maxSize) {
  if (isDefined(file.size)) {
    if (isDefined(minSize) && isDefined(maxSize)) {
      if (file.size > maxSize)
        return [false, getTooLargeRejectionErr(maxSize)];
      if (file.size < minSize)
        return [false, getTooSmallRejectionErr(minSize)];
    } else if (isDefined(minSize) && file.size < minSize)
      return [false, getTooSmallRejectionErr(minSize)];
    else if (isDefined(maxSize) && file.size > maxSize)
      return [false, getTooLargeRejectionErr(maxSize)];
  }
  return [true, null];
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function allFilesAccepted(_ref) {
  var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;
  if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
    return false;
  }
  return files.every(function(file) {
    var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];
    var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
    var customErrors = validator ? validator(file) : null;
    return accepted && sizeMatch && !customErrors;
  });
}
function isPropagationStopped(event) {
  if (typeof event.isPropagationStopped === "function") {
    return event.isPropagationStopped();
  } else if (typeof event.cancelBubble !== "undefined") {
    return event.cancelBubble;
  }
  return false;
}
function isEvtWithFiles(event) {
  if (!event.dataTransfer) {
    return !!event.target && !!event.target.files;
  }
  return Array.prototype.some.call(event.dataTransfer.types, function(type) {
    return type === "Files" || type === "application/x-moz-file";
  });
}
function onDocumentDragOver(event) {
  event.preventDefault();
}
function isIe(userAgent) {
  return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
}
function isEdge(userAgent) {
  return userAgent.indexOf("Edge/") !== -1;
}
function isIeOrEdge() {
  var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(event) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function(fn) {
      if (!isPropagationStopped(event) && fn) {
        fn.apply(void 0, [event].concat(args));
      }
      return isPropagationStopped(event);
    });
  };
}
function canUseFileSystemAccessAPI() {
  return "showOpenFilePicker" in window;
}
function pickerOptionsFromAccept(accept) {
  if (isDefined(accept)) {
    var acceptForPicker = Object.entries(accept).filter(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];
      var ok = true;
      if (!isMIMEType(mimeType)) {
        console.warn('Skipped "'.concat(mimeType, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));
        ok = false;
      }
      if (!Array.isArray(ext) || !ext.every(isExt)) {
        console.warn('Skipped "'.concat(mimeType, '" because an invalid file extension was provided.'));
        ok = false;
      }
      return ok;
    }).reduce(function(agg, _ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];
      return _objectSpread(_objectSpread({}, agg), {}, _defineProperty2({}, mimeType, ext));
    }, {});
    return [{
      // description is required due to https://crbug.com/1264708
      description: "Files",
      accept: acceptForPicker
    }];
  }
  return accept;
}
function acceptPropAsAcceptAttr(accept) {
  if (isDefined(accept)) {
    return Object.entries(accept).reduce(function(a, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];
      return [].concat(_toConsumableArray(a), [mimeType], _toConsumableArray(ext));
    }, []).filter(function(v) {
      return isMIMEType(v) || isExt(v);
    }).join(",");
  }
  return void 0;
}
function isAbort(v) {
  return v instanceof DOMException && (v.name === "AbortError" || v.code === v.ABORT_ERR);
}
function isSecurityError(v) {
  return v instanceof DOMException && (v.name === "SecurityError" || v.code === v.SECURITY_ERR);
}
function isMIMEType(v) {
  return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
  return /^.*\.[\w]+$/.test(v);
}

// node_modules/react-dropzone/dist/es/index.js
var _excluded = ["children"];
var _excluded2 = ["open"];
var _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"];
var _excluded4 = ["refKey", "onChange", "onClick"];
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray2(arr);
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Dropzone = (0, import_react21.forwardRef)(function(_ref, ref) {
  var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded);
  var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded2);
  (0, import_react21.useImperativeHandle)(ref, function() {
    return {
      open
    };
  }, [open]);
  return import_react21.default.createElement(import_react21.Fragment, null, children(_objectSpread3(_objectSpread3({}, props), {}, {
    open
  })));
});
Dropzone.displayName = "Dropzone";
var defaultProps = {
  disabled: false,
  getFilesFromEvent: fromEvent,
  maxSize: Infinity,
  minSize: 0,
  multiple: true,
  maxFiles: 0,
  preventDropOnDocument: true,
  noClick: false,
  noKeyboard: false,
  noDrag: false,
  noDragEventsBubbling: false,
  validator: null,
  useFsAccessApi: true,
  autoFocus: false
};
Dropzone.defaultProps = defaultProps;
Dropzone.propTypes = {
  /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
   */
  children: import_prop_types.default.func,
  /**
   * Set accepted file types.
   * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
   */
  accept: import_prop_types.default.objectOf(import_prop_types.default.arrayOf(import_prop_types.default.string)),
  /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */
  multiple: import_prop_types.default.bool,
  /**
   * If false, allow dropped items to take over the current browser window
   */
  preventDropOnDocument: import_prop_types.default.bool,
  /**
   * If true, disables click to open the native file selection dialog
   */
  noClick: import_prop_types.default.bool,
  /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */
  noKeyboard: import_prop_types.default.bool,
  /**
   * If true, disables drag 'n' drop
   */
  noDrag: import_prop_types.default.bool,
  /**
   * If true, stops drag event propagation to parents
   */
  noDragEventsBubbling: import_prop_types.default.bool,
  /**
   * Minimum file size (in bytes)
   */
  minSize: import_prop_types.default.number,
  /**
   * Maximum file size (in bytes)
   */
  maxSize: import_prop_types.default.number,
  /**
   * Maximum accepted number of files
   * The default value is 0 which means there is no limitation to how many files are accepted.
   */
  maxFiles: import_prop_types.default.number,
  /**
   * Enable/disable the dropzone
   */
  disabled: import_prop_types.default.bool,
  /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  getFilesFromEvent: import_prop_types.default.func,
  /**
   * Cb for when closing the file dialog with no selection
   */
  onFileDialogCancel: import_prop_types.default.func,
  /**
   * Cb for when opening the file dialog
   */
  onFileDialogOpen: import_prop_types.default.func,
  /**
   * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
   * to open the file picker instead of using an `<input type="file">` click event.
   */
  useFsAccessApi: import_prop_types.default.bool,
  /**
   * Set to true to focus the root element on render
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */
  onDragEnter: import_prop_types.default.func,
  /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */
  onDragLeave: import_prop_types.default.func,
  /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */
  onDragOver: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are dropped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  onDrop: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropAccepted: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event
   */
  onDropRejected: import_prop_types.default.func,
  /**
   * Cb for when there's some error from any of the promises.
   *
   * @param {Error} error
   */
  onError: import_prop_types.default.func,
  /**
   * Custom validation function. It must return null if there's no errors.
   * @param {File} file
   * @returns {FileError|FileError[]|null}
   */
  validator: import_prop_types.default.func
};
var initialState = {
  isFocused: false,
  isFileDialogActive: false,
  isDragActive: false,
  isDragAccept: false,
  isDragReject: false,
  acceptedFiles: [],
  fileRejections: []
};
function useDropzone() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _defaultProps$props = _objectSpread3(_objectSpread3({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError = _defaultProps$props.onError, validator = _defaultProps$props.validator;
  var acceptAttr = (0, import_react21.useMemo)(function() {
    return acceptPropAsAcceptAttr(accept);
  }, [accept]);
  var pickerTypes = (0, import_react21.useMemo)(function() {
    return pickerOptionsFromAccept(accept);
  }, [accept]);
  var onFileDialogOpenCb = (0, import_react21.useMemo)(function() {
    return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop;
  }, [onFileDialogOpen]);
  var onFileDialogCancelCb = (0, import_react21.useMemo)(function() {
    return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop;
  }, [onFileDialogCancel]);
  var rootRef = (0, import_react21.useRef)(null);
  var inputRef = (0, import_react21.useRef)(null);
  var _useReducer = (0, import_react21.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray2(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
  var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;
  var fsAccessApiWorksRef = (0, import_react21.useRef)(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI());
  var onWindowFocus = function onWindowFocus2() {
    if (!fsAccessApiWorksRef.current && isFileDialogActive) {
      setTimeout(function() {
        if (inputRef.current) {
          var files = inputRef.current.files;
          if (!files.length) {
            dispatch({
              type: "closeDialog"
            });
            onFileDialogCancelCb();
          }
        }
      }, 300);
    }
  };
  (0, import_react21.useEffect)(function() {
    window.addEventListener("focus", onWindowFocus, false);
    return function() {
      window.removeEventListener("focus", onWindowFocus, false);
    };
  }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
  var dragTargetsRef = (0, import_react21.useRef)([]);
  var onDocumentDrop = function onDocumentDrop2(event) {
    if (rootRef.current && rootRef.current.contains(event.target)) {
      return;
    }
    event.preventDefault();
    dragTargetsRef.current = [];
  };
  (0, import_react21.useEffect)(function() {
    if (preventDropOnDocument) {
      document.addEventListener("dragover", onDocumentDragOver, false);
      document.addEventListener("drop", onDocumentDrop, false);
    }
    return function() {
      if (preventDropOnDocument) {
        document.removeEventListener("dragover", onDocumentDragOver);
        document.removeEventListener("drop", onDocumentDrop);
      }
    };
  }, [rootRef, preventDropOnDocument]);
  (0, import_react21.useEffect)(function() {
    if (!disabled && autoFocus && rootRef.current) {
      rootRef.current.focus();
    }
    return function() {
    };
  }, [rootRef, autoFocus, disabled]);
  var onErrCb = (0, import_react21.useCallback)(function(e) {
    if (onError) {
      onError(e);
    } else {
      console.error(e);
    }
  }, [onError]);
  var onDragEnterCb = (0, import_react21.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [].concat(_toConsumableArray2(dragTargetsRef.current), [event.target]);
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        var fileCount = files.length;
        var isDragAccept = fileCount > 0 && allFilesAccepted({
          files,
          accept: acceptAttr,
          minSize,
          maxSize,
          multiple,
          maxFiles,
          validator
        });
        var isDragReject = fileCount > 0 && !isDragAccept;
        dispatch({
          isDragAccept,
          isDragReject,
          isDragActive: true,
          type: "setDraggedFiles"
        });
        if (onDragEnter) {
          onDragEnter(event);
        }
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
  }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
  var onDragOverCb = (0, import_react21.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var hasFiles = isEvtWithFiles(event);
    if (hasFiles && event.dataTransfer) {
      try {
        event.dataTransfer.dropEffect = "copy";
      } catch (_unused) {
      }
    }
    if (hasFiles && onDragOver) {
      onDragOver(event);
    }
    return false;
  }, [onDragOver, noDragEventsBubbling]);
  var onDragLeaveCb = (0, import_react21.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var targets = dragTargetsRef.current.filter(function(target) {
      return rootRef.current && rootRef.current.contains(target);
    });
    var targetIdx = targets.indexOf(event.target);
    if (targetIdx !== -1) {
      targets.splice(targetIdx, 1);
    }
    dragTargetsRef.current = targets;
    if (targets.length > 0) {
      return;
    }
    dispatch({
      type: "setDraggedFiles",
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false
    });
    if (isEvtWithFiles(event) && onDragLeave) {
      onDragLeave(event);
    }
  }, [rootRef, onDragLeave, noDragEventsBubbling]);
  var setFiles = (0, import_react21.useCallback)(function(files, event) {
    var acceptedFiles = [];
    var fileRejections = [];
    files.forEach(function(file) {
      var _fileAccepted = fileAccepted(file, acceptAttr), _fileAccepted2 = _slicedToArray2(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
      var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray2(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
      var customErrors = validator ? validator(file) : null;
      if (accepted && sizeMatch && !customErrors) {
        acceptedFiles.push(file);
      } else {
        var errors = [acceptError, sizeError];
        if (customErrors) {
          errors = errors.concat(customErrors);
        }
        fileRejections.push({
          file,
          errors: errors.filter(function(e) {
            return e;
          })
        });
      }
    });
    if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
      acceptedFiles.forEach(function(file) {
        fileRejections.push({
          file,
          errors: [TOO_MANY_FILES_REJECTION]
        });
      });
      acceptedFiles.splice(0);
    }
    dispatch({
      acceptedFiles,
      fileRejections,
      type: "setFiles"
    });
    if (onDrop) {
      onDrop(acceptedFiles, fileRejections, event);
    }
    if (fileRejections.length > 0 && onDropRejected) {
      onDropRejected(fileRejections, event);
    }
    if (acceptedFiles.length > 0 && onDropAccepted) {
      onDropAccepted(acceptedFiles, event);
    }
  }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
  var onDropCb = (0, import_react21.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [];
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        setFiles(files, event);
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
    dispatch({
      type: "reset"
    });
  }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]);
  var openFileDialog = (0, import_react21.useCallback)(function() {
    if (fsAccessApiWorksRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      var opts = {
        multiple,
        types: pickerTypes
      };
      window.showOpenFilePicker(opts).then(function(handles) {
        return getFilesFromEvent(handles);
      }).then(function(files) {
        setFiles(files, null);
        dispatch({
          type: "closeDialog"
        });
      }).catch(function(e) {
        if (isAbort(e)) {
          onFileDialogCancelCb(e);
          dispatch({
            type: "closeDialog"
          });
        } else if (isSecurityError(e)) {
          fsAccessApiWorksRef.current = false;
          if (inputRef.current) {
            inputRef.current.value = null;
            inputRef.current.click();
          } else {
            onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
          }
        } else {
          onErrCb(e);
        }
      });
      return;
    }
    if (inputRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      inputRef.current.value = null;
      inputRef.current.click();
    }
  }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]);
  var onKeyDownCb = (0, import_react21.useCallback)(function(event) {
    if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
      return;
    }
    if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
      event.preventDefault();
      openFileDialog();
    }
  }, [rootRef, openFileDialog]);
  var onFocusCb = (0, import_react21.useCallback)(function() {
    dispatch({
      type: "focus"
    });
  }, []);
  var onBlurCb = (0, import_react21.useCallback)(function() {
    dispatch({
      type: "blur"
    });
  }, []);
  var onClickCb = (0, import_react21.useCallback)(function() {
    if (noClick) {
      return;
    }
    if (isIeOrEdge()) {
      setTimeout(openFileDialog, 0);
    } else {
      openFileDialog();
    }
  }, [noClick, openFileDialog]);
  var composeHandler = function composeHandler2(fn) {
    return disabled ? null : fn;
  };
  var composeKeyboardHandler = function composeKeyboardHandler2(fn) {
    return noKeyboard ? null : composeHandler(fn);
  };
  var composeDragHandler = function composeDragHandler2(fn) {
    return noDrag ? null : composeHandler(fn);
  };
  var stopPropagation = function stopPropagation2(event) {
    if (noDragEventsBubbling) {
      event.stopPropagation();
    }
  };
  var getRootProps = (0, import_react21.useMemo)(function() {
    return function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter2 = _ref2.onDragEnter, onDragOver2 = _ref2.onDragOver, onDragLeave2 = _ref2.onDragLeave, onDrop2 = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded3);
      return _objectSpread3(_objectSpread3(_defineProperty3({
        onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
        onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
        onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
        onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter2, onDragEnterCb)),
        onDragOver: composeDragHandler(composeEventHandlers(onDragOver2, onDragOverCb)),
        onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave2, onDragLeaveCb)),
        onDrop: composeDragHandler(composeEventHandlers(onDrop2, onDropCb)),
        role: typeof role === "string" && role !== "" ? role : "presentation"
      }, refKey, rootRef), !disabled && !noKeyboard ? {
        tabIndex: 0
      } : {}), rest);
    };
  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
  var onInputElementClick = (0, import_react21.useCallback)(function(event) {
    event.stopPropagation();
  }, []);
  var getInputProps = (0, import_react21.useMemo)(function() {
    return function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);
      var inputProps = _defineProperty3({
        accept: acceptAttr,
        multiple,
        type: "file",
        style: {
          display: "none"
        },
        onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
        tabIndex: -1
      }, refKey, inputRef);
      return _objectSpread3(_objectSpread3({}, inputProps), rest);
    };
  }, [inputRef, accept, multiple, onDropCb, disabled]);
  return _objectSpread3(_objectSpread3({}, state), {}, {
    isFocused: isFocused && !disabled,
    getRootProps,
    getInputProps,
    rootRef,
    inputRef,
    open: composeHandler(openFileDialog)
  });
}
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFocused: true
      });
    case "blur":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFocused: false
      });
    case "openDialog":
      return _objectSpread3(_objectSpread3({}, initialState), {}, {
        isFileDialogActive: true
      });
    case "closeDialog":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isFileDialogActive: false
      });
    case "setDraggedFiles":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        isDragActive: action.isDragActive,
        isDragAccept: action.isDragAccept,
        isDragReject: action.isDragReject
      });
    case "setFiles":
      return _objectSpread3(_objectSpread3({}, state), {}, {
        acceptedFiles: action.acceptedFiles,
        fileRejections: action.fileRejections
      });
    case "reset":
      return _objectSpread3({}, initialState);
    default:
      return state;
  }
}
function noop() {
}

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUpload.js
var FileUpload = (_a) => {
  var { id, type, value = type === fileReaderType.text || type === fileReaderType.dataURL ? "" : null, filename = "", children = null, onFileInputChange = null, onReadStarted = () => {
  }, onReadFinished = () => {
  }, onReadFailed = () => {
  }, onClearClick, onClick = (event) => event.preventDefault(), onTextChange, onDataChange, dropzoneProps = {} } = _a, props = __rest(_a, ["id", "type", "value", "filename", "children", "onFileInputChange", "onReadStarted", "onReadFinished", "onReadFailed", "onClearClick", "onClick", "onTextChange", "onDataChange", "dropzoneProps"]);
  const onDropAccepted = (acceptedFiles, event) => {
    if (acceptedFiles.length > 0) {
      const fileHandle = acceptedFiles[0];
      onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(event, fileHandle);
      if (type === fileReaderType.text || type === fileReaderType.dataURL) {
        onReadStarted(event, fileHandle);
        readFile(fileHandle, type).then((data) => {
          onReadFinished(event, fileHandle);
          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(event, data);
        }).catch((error) => {
          onReadFailed(event, error, fileHandle);
          onReadFinished(event, fileHandle);
          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(event, "");
        });
      }
    }
    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);
  };
  const onDropRejected = (rejectedFiles, event) => {
    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);
  };
  const onClearButtonClick = (event) => {
    onClearClick === null || onClearClick === void 0 ? void 0 : onClearClick(event);
    setFileValue(null);
  };
  const { getRootProps, getInputProps, isDragActive, open, inputRef } = useDropzone(Object.assign(Object.assign({ noClick: true, multiple: false }, dropzoneProps), {
    onDropAccepted,
    onDropRejected
  }));
  const setFileValue = (filename2) => {
    inputRef.current.value = filename2;
  };
  const oldInputProps = getInputProps();
  const inputProps = Object.assign(Object.assign({}, oldInputProps), { onChange: (e) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    (_b = oldInputProps.onChange) === null || _b === void 0 ? void 0 : _b.call(oldInputProps, e);
    const files = yield fromEvent(e.nativeEvent);
    if (files.length === 1) {
      onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(e, files[0]);
    }
  }) });
  const rootProps = getRootProps(Object.assign(Object.assign({}, props), {
    tabIndex: null,
    // Omit the unwanted tabIndex from react-dropzone's getRootProps
    id,
    type,
    filename,
    value,
    isDragActive,
    onBrowseButtonClick: open,
    onClearButtonClick,
    onTextAreaClick: onClick,
    onTextChange,
    onClick,
    refKey: "containerRef"
  }));
  return React198.createElement(
    FileUploadField,
    Object.assign({}, rootProps),
    React198.createElement("input", Object.assign({}, inputProps)),
    children
  );
};
FileUpload.displayName = "FileUpload";

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelect.js
init_tslib_es6();
var React199 = __toESM(require_react());
var FormSelect = class _FormSelect extends React199.Component {
  constructor(props) {
    super(props);
    this.handleChange = (event) => {
      this.props.onChange(event, event.currentTarget.value);
    };
    if (!props.id && !props["aria-label"]) {
      console.error("FormSelect requires either an id or aria-label to be specified");
    }
    this.state = {
      ouiaStateId: getDefaultOUIAId(_FormSelect.displayName, props.validated)
    };
  }
  render() {
    const _a = this.props, { children, className, value, validated, isDisabled, isRequired, ouiaId, ouiaSafe } = _a, props = __rest(_a, ["children", "className", "value", "validated", "isDisabled", "isRequired", "ouiaId", "ouiaSafe"]);
    const selectedOption = React199.Children.toArray(children).find((option) => option.props.value === value);
    const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;
    const hasStatusIcon = ["success", "error", "warning"].includes(validated);
    return React199.createElement(
      "span",
      { className: css(form_control_default.formControl, isDisabled && form_control_default.modifiers.disabled, isSelectedPlaceholder && form_control_default.modifiers.placeholder, hasStatusIcon && form_control_default.modifiers[validated], className) },
      React199.createElement("select", Object.assign({}, props, { "aria-invalid": validated === ValidatedOptions.error }, getOUIAProps(_FormSelect.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), { onChange: this.handleChange, disabled: isDisabled, required: isRequired, value }), children),
      React199.createElement(
        "span",
        { className: css(form_control_default.formControlUtilities) },
        hasStatusIcon && React199.createElement(FormControlIcon, { status: validated }),
        React199.createElement(
          "span",
          { className: css(form_control_default.formControlToggleIcon) },
          React199.createElement(caret_down_icon_default, null)
        )
      )
    );
  }
};
FormSelect.displayName = "FormSelect";
FormSelect.defaultProps = {
  className: "",
  value: "",
  validated: "default",
  isDisabled: false,
  isRequired: false,
  onBlur: () => void 0,
  onFocus: () => void 0,
  onChange: () => void 0,
  ouiaSafe: true
};

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelectOption.js
init_tslib_es6();
var React200 = __toESM(require_react());
var FormSelectOption = (_a) => {
  var {
    className = "",
    value = "",
    isDisabled = false,
    label,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isPlaceholder = false
  } = _a, props = __rest(_a, ["className", "value", "isDisabled", "label", "isPlaceholder"]);
  return React200.createElement("option", Object.assign({}, props, { className, value, disabled: isDisabled }), label);
};
FormSelectOption.displayName = "FormSelectOption";

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelectOptionGroup.js
init_tslib_es6();
var React201 = __toESM(require_react());
var FormSelectOptionGroup = (_a) => {
  var { children = null, className = "", isDisabled = false, label } = _a, props = __rest(_a, ["children", "className", "isDisabled", "label"]);
  return React201.createElement("optgroup", Object.assign({}, props, { disabled: !!isDisabled, className, label }), children);
};
FormSelectOptionGroup.displayName = "FormSelectOptionGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Hint/Hint.js
init_tslib_es6();
var React202 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Hint/hint.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Hint/hint.css";
var hint_default = {
  "button": "pf-v5-c-button",
  "dropdown": "pf-v5-c-dropdown",
  "dropdownToggle": "pf-v5-c-dropdown__toggle",
  "hint": "pf-v5-c-hint",
  "hintActions": "pf-v5-c-hint__actions",
  "hintBody": "pf-v5-c-hint__body",
  "hintFooter": "pf-v5-c-hint__footer",
  "hintTitle": "pf-v5-c-hint__title",
  "modifiers": {
    "link": "pf-m-link",
    "inline": "pf-m-inline",
    "plain": "pf-m-plain"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Hint/Hint.js
var Hint = (_a) => {
  var { children, className, actions } = _a, props = __rest(_a, ["children", "className", "actions"]);
  return React202.createElement(
    "div",
    Object.assign({ className: css(hint_default.hint, className) }, props),
    React202.createElement("div", { className: css(hint_default.hintActions) }, actions),
    children
  );
};
Hint.displayName = "Hint";

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintBody.js
init_tslib_es6();
var React203 = __toESM(require_react());
var HintBody = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React203.createElement("div", Object.assign({ className: css(hint_default.hintBody, className) }, props), children);
};
HintBody.displayName = "HintBody";

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintFooter.js
init_tslib_es6();
var React204 = __toESM(require_react());
var HintFooter = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React204.createElement("div", Object.assign({ className: css(hint_default.hintFooter, className) }, props), children);
};
HintFooter.displayName = "HintFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintTitle.js
init_tslib_es6();
var React205 = __toESM(require_react());
var HintTitle = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React205.createElement("div", Object.assign({ className: css(hint_default.hintTitle, className) }, props), children);
};
HintTitle.displayName = "HintTitle";

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinks.js
init_tslib_es6();
var React208 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/JumpLinks/jump-links.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/JumpLinks/jump-links.css";
var jump_links_default = {
  "button": "pf-v5-c-button",
  "dirRtl": "pf-v5-m-dir-rtl",
  "jumpLinks": "pf-v5-c-jump-links",
  "jumpLinksItem": "pf-v5-c-jump-links__item",
  "jumpLinksLabel": "pf-v5-c-jump-links__label",
  "jumpLinksLink": "pf-v5-c-jump-links__link",
  "jumpLinksLinkText": "pf-v5-c-jump-links__link-text",
  "jumpLinksList": "pf-v5-c-jump-links__list",
  "jumpLinksMain": "pf-v5-c-jump-links__main",
  "jumpLinksToggle": "pf-v5-c-jump-links__toggle",
  "jumpLinksToggleIcon": "pf-v5-c-jump-links__toggle-icon",
  "jumpLinksToggleText": "pf-v5-c-jump-links__toggle-text",
  "modifiers": {
    "center": "pf-m-center",
    "vertical": "pf-m-vertical",
    "expandable": "pf-m-expandable",
    "nonExpandable": "pf-m-non-expandable",
    "expandableOnSm": "pf-m-expandable-on-sm",
    "nonExpandableOnSm": "pf-m-non-expandable-on-sm",
    "expandableOnMd": "pf-m-expandable-on-md",
    "nonExpandableOnMd": "pf-m-non-expandable-on-md",
    "expandableOnLg": "pf-m-expandable-on-lg",
    "nonExpandableOnLg": "pf-m-non-expandable-on-lg",
    "expandableOnXl": "pf-m-expandable-on-xl",
    "nonExpandableOnXl": "pf-m-non-expandable-on-xl",
    "expandableOn_2xl": "pf-m-expandable-on-2xl",
    "nonExpandableOn_2xl": "pf-m-non-expandable-on-2xl",
    "expanded": "pf-m-expanded",
    "current": "pf-m-current"
  }
};

// node_modules/@patternfly/react-styles/css/components/Sidebar/sidebar.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Sidebar/sidebar.css";
var sidebar_default = {
  "modifiers": {
    "gutter": "pf-m-gutter",
    "panelRight": "pf-m-panel-right",
    "stack": "pf-m-stack",
    "split": "pf-m-split",
    "border": "pf-m-border",
    "padding": "pf-m-padding",
    "sticky": "pf-m-sticky",
    "static": "pf-m-static",
    "noBackground": "pf-m-no-background",
    "widthDefault": "pf-m-width-default",
    "width_25": "pf-m-width-25",
    "width_33": "pf-m-width-33",
    "width_50": "pf-m-width-50",
    "width_66": "pf-m-width-66",
    "width_75": "pf-m-width-75",
    "width_100": "pf-m-width-100",
    "widthDefaultOnSm": "pf-m-width-default-on-sm",
    "width_25OnSm": "pf-m-width-25-on-sm",
    "width_33OnSm": "pf-m-width-33-on-sm",
    "width_50OnSm": "pf-m-width-50-on-sm",
    "width_66OnSm": "pf-m-width-66-on-sm",
    "width_75OnSm": "pf-m-width-75-on-sm",
    "width_100OnSm": "pf-m-width-100-on-sm",
    "widthDefaultOnMd": "pf-m-width-default-on-md",
    "width_25OnMd": "pf-m-width-25-on-md",
    "width_33OnMd": "pf-m-width-33-on-md",
    "width_50OnMd": "pf-m-width-50-on-md",
    "width_66OnMd": "pf-m-width-66-on-md",
    "width_75OnMd": "pf-m-width-75-on-md",
    "width_100OnMd": "pf-m-width-100-on-md",
    "widthDefaultOnLg": "pf-m-width-default-on-lg",
    "width_25OnLg": "pf-m-width-25-on-lg",
    "width_33OnLg": "pf-m-width-33-on-lg",
    "width_50OnLg": "pf-m-width-50-on-lg",
    "width_66OnLg": "pf-m-width-66-on-lg",
    "width_75OnLg": "pf-m-width-75-on-lg",
    "width_100OnLg": "pf-m-width-100-on-lg",
    "widthDefaultOnXl": "pf-m-width-default-on-xl",
    "width_25OnXl": "pf-m-width-25-on-xl",
    "width_33OnXl": "pf-m-width-33-on-xl",
    "width_50OnXl": "pf-m-width-50-on-xl",
    "width_66OnXl": "pf-m-width-66-on-xl",
    "width_75OnXl": "pf-m-width-75-on-xl",
    "width_100OnXl": "pf-m-width-100-on-xl",
    "widthDefaultOn_2xl": "pf-m-width-default-on-2xl",
    "width_25On_2xl": "pf-m-width-25-on-2xl",
    "width_33On_2xl": "pf-m-width-33-on-2xl",
    "width_50On_2xl": "pf-m-width-50-on-2xl",
    "width_66On_2xl": "pf-m-width-66-on-2xl",
    "width_75On_2xl": "pf-m-width-75-on-2xl",
    "width_100On_2xl": "pf-m-width-100-on-2xl"
  },
  "sidebar": "pf-v5-c-sidebar",
  "sidebarContent": "pf-v5-c-sidebar__content",
  "sidebarMain": "pf-v5-c-sidebar__main",
  "sidebarPanel": "pf-v5-c-sidebar__panel"
};

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksItem.js
init_tslib_es6();
var React207 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksList.js
init_tslib_es6();
var React206 = __toESM(require_react());
var JumpLinksList = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React206.createElement("ul", Object.assign({ className: css(jump_links_default.jumpLinksList, className), role: "list" }, props), children);
};
JumpLinksList.displayName = "JumpLinksList";

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksItem.js
var JumpLinksItem = (_a) => {
  var {
    isActive,
    href,
    // eslint-disable-next-line
    node,
    children,
    onClick,
    className
  } = _a, props = __rest(_a, ["isActive", "href", "node", "children", "onClick", "className"]);
  const childrenArr = React207.Children.toArray(children);
  const sublists = childrenArr.filter((child) => child.type === JumpLinksList);
  children = childrenArr.filter((child) => child.type !== JumpLinksList);
  return React207.createElement(
    "li",
    Object.assign({ className: css(jump_links_default.jumpLinksItem, isActive && jump_links_default.modifiers.current, className) }, isActive && { "aria-current": "location" }, props),
    React207.createElement(
      "a",
      { className: jump_links_default.jumpLinksLink, href, onClick },
      React207.createElement("span", { className: jump_links_default.jumpLinksLinkText }, children)
    ),
    sublists
  );
};
JumpLinksItem.displayName = "JumpLinksItem";

// node_modules/@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display.js
var c_jump_links__toggle_Display = {
  "name": "--pf-v5-c-jump-links__toggle--Display",
  "value": "none",
  "var": "var(--pf-v5-c-jump-links__toggle--Display)"
};
var c_jump_links_toggle_Display_default = c_jump_links__toggle_Display;

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinks.js
var getScrollItems = (children, res) => {
  React208.Children.forEach(children, (child) => {
    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {
      const scrollNode = child.props.node || child.props.href;
      if (typeof scrollNode === "string") {
        if (scrollNode.startsWith("#")) {
          res.push(document.getElementById(scrollNode.substr(1)));
        } else {
          res.push(document.querySelector(scrollNode));
        }
      } else if (scrollNode instanceof HTMLElement) {
        res.push(scrollNode);
      }
    }
    if ([React208.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {
      getScrollItems(child.props.children, res);
    }
  });
  return res;
};
function isResponsive(jumpLinks) {
  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(c_jump_links_toggle_Display_default.name).includes("block");
}
var JumpLinks = (_a) => {
  var { isCentered, isVertical, children, label, "aria-label": ariaLabel = typeof label === "string" ? label : null, scrollableSelector, activeIndex: activeIndexProp = 0, offset: offset2 = 0, expandable, isExpanded: isExpandedProp = false, alwaysShowLabel = true, toggleAriaLabel = "Toggle jump links", className } = _a, props = __rest(_a, ["isCentered", "isVertical", "children", "label", "aria-label", "scrollableSelector", "activeIndex", "offset", "expandable", "isExpanded", "alwaysShowLabel", "toggleAriaLabel", "className"]);
  const hasScrollSpy = Boolean(scrollableSelector);
  const [scrollItems, setScrollItems] = React208.useState(hasScrollSpy ? getScrollItems(children, []) : []);
  const [activeIndex, setActiveIndex] = React208.useState(activeIndexProp);
  const [isExpanded, setIsExpanded] = React208.useState(isExpandedProp);
  const isLinkClicked = React208.useRef(false);
  React208.useEffect(() => setIsExpanded(isExpandedProp), [isExpandedProp]);
  const navRef = React208.useRef();
  let scrollableElement;
  const scrollSpy = React208.useCallback(() => {
    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {
      return;
    }
    if (isLinkClicked.current) {
      isLinkClicked.current = false;
      return;
    }
    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset2);
    window.requestAnimationFrame(() => {
      let newScrollItems = scrollItems;
      const requiresRefresh = newScrollItems.every((e) => !(e === null || e === void 0 ? void 0 : e.offsetTop)) || !newScrollItems[0] || newScrollItems.includes(null);
      if (requiresRefresh) {
        newScrollItems = getScrollItems(children, []);
        setScrollItems(newScrollItems);
      }
      const scrollElements = newScrollItems.map((e, index) => ({
        y: e ? e.offsetTop : null,
        index
      })).filter(({ y }) => y !== null).sort((e1, e2) => e2.y - e1.y);
      for (const { y, index } of scrollElements) {
        if (scrollPosition >= y) {
          return setActiveIndex(index);
        }
      }
    });
  }, [scrollItems, hasScrollSpy, scrollableElement, offset2]);
  React208.useEffect(() => {
    scrollableElement = document.querySelector(scrollableSelector);
    if (!(scrollableElement instanceof HTMLElement)) {
      return;
    }
    scrollableElement.addEventListener("scroll", scrollSpy);
    return () => scrollableElement.removeEventListener("scroll", scrollSpy);
  }, [scrollableSelector, scrollSpy]);
  React208.useEffect(() => {
    scrollSpy();
  }, []);
  let jumpLinkIndex = 0;
  const cloneChildren = (children2) => !hasScrollSpy ? children2 : React208.Children.map(children2, (child) => {
    if (child.type === JumpLinksItem) {
      const { onClick: onClickProp, isActive: isActiveProp } = child.props;
      const itemIndex = jumpLinkIndex++;
      const scrollItem = scrollItems[itemIndex];
      return React208.cloneElement(child, {
        onClick(ev) {
          isLinkClicked.current = true;
          let newScrollItems;
          if (!scrollItem) {
            newScrollItems = getScrollItems(children2, []);
            setScrollItems(newScrollItems);
          }
          const newScrollItem = scrollItem || newScrollItems[itemIndex];
          if (newScrollItem) {
            const scrollableElement2 = document.querySelector(scrollableSelector);
            if (scrollableElement2 instanceof HTMLElement) {
              if (isResponsive(navRef.current)) {
                if (navRef.current) {
                  navRef.current.classList.remove(jump_links_default.modifiers.expanded);
                }
                let stickyParent = navRef.current && navRef.current.parentElement;
                while (stickyParent && !stickyParent.classList.contains(sidebar_default.modifiers.sticky)) {
                  stickyParent = stickyParent.parentElement;
                }
                setIsExpanded(false);
                if (stickyParent) {
                  offset2 += stickyParent.scrollHeight;
                }
              }
              scrollableElement2.scrollTo(0, newScrollItem.offsetTop - offset2);
            }
            newScrollItem.focus();
            window.history.pushState("", "", ev.currentTarget.href);
            ev.preventDefault();
            setActiveIndex(itemIndex);
          }
          if (onClickProp) {
            onClickProp(ev);
          }
        },
        isActive: isActiveProp || activeIndex === itemIndex,
        children: cloneChildren(child.props.children)
      });
    } else if (child.type === React208.Fragment) {
      return cloneChildren(child.props.children);
    } else if (child.type === JumpLinksList) {
      return React208.cloneElement(child, { children: cloneChildren(child.props.children) });
    }
    return child;
  });
  return React208.createElement(
    "nav",
    Object.assign({ className: css(jump_links_default.jumpLinks, isCentered && jump_links_default.modifiers.center, isVertical && jump_links_default.modifiers.vertical, formatBreakpointMods(expandable, jump_links_default), isExpanded && jump_links_default.modifiers.expanded, className), "aria-label": ariaLabel, ref: navRef }, props),
    React208.createElement(
      "div",
      { className: jump_links_default.jumpLinksMain },
      React208.createElement(
        "div",
        { className: css(`${jump_links_default.jumpLinks}__header`) },
        expandable && React208.createElement(
          "div",
          { className: jump_links_default.jumpLinksToggle },
          React208.createElement(
            Button,
            { variant: "plain", onClick: () => setIsExpanded(!isExpanded), "aria-label": toggleAriaLabel, "aria-expanded": isExpanded },
            React208.createElement(
              "span",
              { className: jump_links_default.jumpLinksToggleIcon },
              React208.createElement(angle_right_icon_default, null)
            ),
            label && React208.createElement(
              "span",
              { className: css(jump_links_default.jumpLinksToggleText) },
              " ",
              label,
              " "
            )
          )
        ),
        label && alwaysShowLabel && React208.createElement("div", { className: css(jump_links_default.jumpLinksLabel) }, label)
      ),
      React208.createElement("ul", { className: jump_links_default.jumpLinksList, role: "list" }, cloneChildren(children))
    )
  );
};
JumpLinks.displayName = "JumpLinks";

// node_modules/@patternfly/react-core/dist/esm/components/Label/Label.js
init_tslib_es6();
var React209 = __toESM(require_react());
var import_react22 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Label/label.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Label/label.css";
var label_default = {
  "button": "pf-v5-c-button",
  "label": "pf-v5-c-label",
  "labelActions": "pf-v5-c-label__actions",
  "labelContent": "pf-v5-c-label__content",
  "labelIcon": "pf-v5-c-label__icon",
  "labelText": "pf-v5-c-label__text",
  "modifiers": {
    "compact": "pf-m-compact",
    "blue": "pf-m-blue",
    "green": "pf-m-green",
    "orange": "pf-m-orange",
    "red": "pf-m-red",
    "purple": "pf-m-purple",
    "cyan": "pf-m-cyan",
    "gold": "pf-m-gold",
    "outline": "pf-m-outline",
    "overflow": "pf-m-overflow",
    "add": "pf-m-add",
    "editable": "pf-m-editable",
    "editableActive": "pf-m-editable-active"
  },
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-styles/css/components/Label/label-group.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Label/label-group.css";
var label_group_default = {
  "button": "pf-v5-c-button",
  "labelGroup": "pf-v5-c-label-group",
  "labelGroupClose": "pf-v5-c-label-group__close",
  "labelGroupLabel": "pf-v5-c-label-group__label",
  "labelGroupList": "pf-v5-c-label-group__list",
  "labelGroupListItem": "pf-v5-c-label-group__list-item",
  "labelGroupMain": "pf-v5-c-label-group__main",
  "labelGroupTextarea": "pf-v5-c-label-group__textarea",
  "modifiers": {
    "category": "pf-m-category",
    "vertical": "pf-m-vertical",
    "editable": "pf-m-editable",
    "textarea": "pf-m-textarea"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/c_label__text_MaxWidth.js
var c_label__text_MaxWidth = {
  "name": "--pf-v5-c-label__text--MaxWidth",
  "value": "100%",
  "var": "var(--pf-v5-c-label__text--MaxWidth)"
};
var c_label_text_MaxWidth_default = c_label__text_MaxWidth;

// node_modules/@patternfly/react-core/dist/esm/components/Label/Label.js
var colorStyles = {
  blue: label_default.modifiers.blue,
  cyan: label_default.modifiers.cyan,
  green: label_default.modifiers.green,
  orange: label_default.modifiers.orange,
  purple: label_default.modifiers.purple,
  red: label_default.modifiers.red,
  gold: label_default.modifiers.gold,
  grey: ""
};
var Label = (_a) => {
  var { children, className = "", color = "grey", variant = "filled", isCompact = false, isEditable = false, editableProps, textMaxWidth, tooltipPosition, icon, onClose, onClick: onLabelClick, onEditCancel, onEditComplete, closeBtn, closeBtnAriaLabel, closeBtnProps, href, isOverflowLabel, render } = _a, props = __rest(_a, ["children", "className", "color", "variant", "isCompact", "isEditable", "editableProps", "textMaxWidth", "tooltipPosition", "icon", "onClose", "onClick", "onEditCancel", "onEditComplete", "closeBtn", "closeBtnAriaLabel", "closeBtnProps", "href", "isOverflowLabel", "render"]);
  const [isEditableActive, setIsEditableActive] = (0, import_react22.useState)(false);
  const [currValue, setCurrValue] = (0, import_react22.useState)(children);
  const editableButtonRef = React209.useRef();
  const editableInputRef = React209.useRef();
  React209.useEffect(() => {
    document.addEventListener("mousedown", onDocMouseDown);
    document.addEventListener("keydown", onKeyDown);
    return () => {
      document.removeEventListener("mousedown", onDocMouseDown);
      document.removeEventListener("keydown", onKeyDown);
    };
  });
  React209.useEffect(() => {
    if (onLabelClick && href) {
      console.warn("Link labels cannot have onClick passed, this results in invalid HTML. Please remove either the href or onClick prop.");
    } else if (onLabelClick && isEditable) {
      console.warn("Editable labels cannot have onClick passed, clicking starts the label edit process. Please remove either the isEditable or onClick prop.");
    }
  }, [onLabelClick, href, isEditable]);
  const onDocMouseDown = (event) => {
    if (isEditableActive && editableInputRef && editableInputRef.current && !editableInputRef.current.contains(event.target)) {
      if (editableInputRef.current.value) {
        onEditComplete && onEditComplete(event, editableInputRef.current.value);
      }
      setIsEditableActive(false);
    }
  };
  const onKeyDown = (event) => {
    var _a2, _b;
    const key = event.key;
    if (!isEditableActive && (!editableButtonRef || !editableButtonRef.current || !editableButtonRef.current.contains(event.target)) || isEditableActive && (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target))) {
      return;
    }
    if (isEditableActive && (key === "Enter" || key === "Tab")) {
      event.preventDefault();
      event.stopImmediatePropagation();
      if (editableInputRef.current.value) {
        onEditComplete && onEditComplete(event, editableInputRef.current.value);
      }
      setIsEditableActive(false);
      (_a2 = editableButtonRef === null || editableButtonRef === void 0 ? void 0 : editableButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    }
    if (isEditableActive && key === "Escape") {
      event.preventDefault();
      event.stopImmediatePropagation();
      if (editableInputRef.current.value) {
        editableInputRef.current.value = children;
        onEditCancel && onEditCancel(event, children);
      }
      setIsEditableActive(false);
      (_b = editableButtonRef === null || editableButtonRef === void 0 ? void 0 : editableButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
    }
    if (!isEditableActive && key === "Enter") {
      event.preventDefault();
      event.stopImmediatePropagation();
      setIsEditableActive(true);
      const el = event.target;
      const range = document.createRange();
      const sel = window.getSelection();
      range.selectNodeContents(el);
      range.collapse(false);
      sel.removeAllRanges();
      sel.addRange(range);
    }
  };
  const LabelComponent = isOverflowLabel ? "button" : "span";
  const defaultButton = React209.createElement(
    Button,
    Object.assign({ type: "button", variant: "plain", onClick: onClose, "aria-label": closeBtnAriaLabel || `Close ${children}` }, closeBtnProps),
    React209.createElement(times_icon_default, null)
  );
  const button = React209.createElement("span", { className: css(label_default.labelActions) }, closeBtn || defaultButton);
  const textRef = React209.createRef();
  const componentRef = React209.useRef();
  const [isTooltipVisible, setIsTooltipVisible] = React209.useState(false);
  useIsomorphicLayoutEffect(() => {
    const currTextRef = isEditable ? editableButtonRef : textRef;
    if (!isEditableActive) {
      setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);
    }
  }, [isEditableActive]);
  const content = React209.createElement(
    React209.Fragment,
    null,
    icon && React209.createElement("span", { className: css(label_default.labelIcon) }, icon),
    React209.createElement("span", Object.assign({ ref: textRef, className: css(label_default.labelText) }, textMaxWidth && {
      style: {
        [c_label_text_MaxWidth_default.name]: textMaxWidth
      }
    }), children)
  );
  React209.useEffect(() => {
    if (isEditableActive && editableInputRef) {
      editableInputRef.current && editableInputRef.current.focus();
    }
  }, [editableInputRef, isEditableActive]);
  const updateVal = () => {
    setCurrValue(editableInputRef.current.value);
  };
  let LabelComponentChildElement = "span";
  if (href) {
    LabelComponentChildElement = "a";
  } else if (isEditable || onLabelClick && !isOverflowLabel) {
    LabelComponentChildElement = "button";
  }
  const clickableLabelProps = {
    type: "button",
    onClick: onLabelClick
  };
  const isButton = LabelComponentChildElement === "button";
  const labelComponentChildProps = Object.assign(Object.assign(Object.assign(Object.assign({ className: css(label_default.labelContent) }, isTooltipVisible && { tabIndex: 0 }), href && { href }), isButton && clickableLabelProps), isEditable && Object.assign({ ref: editableButtonRef, onClick: (e) => {
    setIsEditableActive(true);
    e.stopPropagation();
  } }, editableProps));
  let labelComponentChild = React209.createElement(LabelComponentChildElement, Object.assign({}, labelComponentChildProps), content);
  if (render) {
    labelComponentChild = React209.createElement(
      React209.Fragment,
      null,
      isTooltipVisible && React209.createElement(Tooltip, { triggerRef: componentRef, content: children, position: tooltipPosition }),
      render({
        className: label_default.labelContent,
        content,
        componentRef
      })
    );
  } else if (isTooltipVisible) {
    labelComponentChild = React209.createElement(Tooltip, { content: children, position: tooltipPosition }, labelComponentChild);
  }
  return React209.createElement(
    LabelComponent,
    Object.assign({}, props, { className: css(label_default.label, colorStyles[color], variant === "outline" && label_default.modifiers.outline, isOverflowLabel && label_default.modifiers.overflow, isCompact && label_default.modifiers.compact, isEditable && label_group_default.modifiers.editable, isEditableActive && label_default.modifiers.editableActive, className), onClick: isOverflowLabel ? onLabelClick : void 0 }),
    !isEditableActive && labelComponentChild,
    !isEditableActive && onClose && button,
    isEditableActive && React209.createElement("input", Object.assign({ className: css(label_default.labelContent), type: "text", id: "editable-input", ref: editableInputRef, value: currValue, onChange: updateVal }, editableProps))
  );
};
Label.displayName = "Label";

// node_modules/@patternfly/react-core/dist/esm/components/Label/LabelGroup.js
init_tslib_es6();
var React210 = __toESM(require_react());
var LabelGroup = class extends React210.Component {
  constructor(props) {
    super(props);
    this.headingRef = React210.createRef();
    this.toggleCollapse = () => {
      this.setState((prevState) => ({
        isOpen: !prevState.isOpen,
        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
      }));
    };
    this.state = {
      isOpen: this.props.defaultIsOpen,
      isTooltipVisible: false
    };
  }
  componentDidMount() {
    this.setState({
      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
    });
  }
  renderLabel(id) {
    const { categoryName, tooltipPosition } = this.props;
    const { isTooltipVisible } = this.state;
    return isTooltipVisible ? React210.createElement(
      Tooltip,
      { position: tooltipPosition, content: categoryName },
      React210.createElement(
        "span",
        { tabIndex: 0, ref: this.headingRef, className: css(label_group_default.labelGroupLabel) },
        React210.createElement("span", { "aria-hidden": "true", id }, categoryName)
      )
    ) : React210.createElement("span", { ref: this.headingRef, className: css(label_group_default.labelGroupLabel), "aria-hidden": "true", id }, categoryName);
  }
  render() {
    const _a = this.props, {
      categoryName,
      children,
      className,
      isClosable,
      isCompact,
      closeBtnAriaLabel,
      "aria-label": ariaLabel,
      onClick,
      numLabels,
      expandedText,
      collapsedText,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      defaultIsOpen,
      tooltipPosition,
      isVertical,
      isEditable,
      hasEditableTextArea,
      editableTextAreaProps,
      addLabelControl
    } = _a, rest = __rest(_a, ["categoryName", "children", "className", "isClosable", "isCompact", "closeBtnAriaLabel", "aria-label", "onClick", "numLabels", "expandedText", "collapsedText", "defaultIsOpen", "tooltipPosition", "isVertical", "isEditable", "hasEditableTextArea", "editableTextAreaProps", "addLabelControl"]);
    const { isOpen } = this.state;
    const renderedChildren = React210.Children.toArray(children);
    const numChildren = renderedChildren.length;
    const collapsedTextResult = fillTemplate(collapsedText, {
      remaining: numChildren - numLabels
    });
    const renderLabelGroup = (id) => {
      const labelArray = !isOpen ? renderedChildren.slice(0, numLabels) : renderedChildren;
      const content = React210.createElement(
        React210.Fragment,
        null,
        categoryName && this.renderLabel(id),
        React210.createElement(
          "ul",
          Object.assign({ className: css(label_group_default.labelGroupList) }, categoryName && { "aria-labelledby": id }, !categoryName && { "aria-label": ariaLabel }, { role: "list" }, rest),
          labelArray.map((child, i) => React210.createElement("li", { className: css(label_group_default.labelGroupListItem), key: i }, child)),
          numChildren > numLabels && React210.createElement(
            "li",
            { className: css(label_group_default.labelGroupListItem) },
            React210.createElement(Label, { isOverflowLabel: true, onClick: this.toggleCollapse, className: css(isCompact && label_default.modifiers.compact) }, isOpen ? expandedText : collapsedTextResult)
          ),
          addLabelControl && React210.createElement("li", { className: css(label_group_default.labelGroupListItem) }, addLabelControl),
          isEditable && hasEditableTextArea && React210.createElement(
            "li",
            { className: css(label_group_default.labelGroupListItem, label_group_default.modifiers.textarea) },
            React210.createElement("textarea", Object.assign({ className: css(label_group_default.labelGroupTextarea), rows: 1, tabIndex: 0 }, editableTextAreaProps))
          )
        )
      );
      const close = React210.createElement(
        "div",
        { className: css(label_group_default.labelGroupClose) },
        React210.createElement(
          Button,
          { variant: "plain", "aria-label": closeBtnAriaLabel, onClick, id: `remove_group_${id}`, "aria-labelledby": `remove_group_${id} ${id}` },
          React210.createElement(times_circle_icon_default, { "aria-hidden": "true" })
        )
      );
      return React210.createElement(
        "div",
        { className: css(label_group_default.labelGroup, className, categoryName && label_group_default.modifiers.category, isVertical && label_group_default.modifiers.vertical, isEditable && label_group_default.modifiers.editable) },
        React210.createElement("div", { className: css(label_group_default.labelGroupMain) }, content),
        isClosable && close
      );
    };
    return numChildren === 0 && addLabelControl === void 0 ? null : React210.createElement(GenerateId, null, (randomId) => renderLabelGroup(this.props.id || randomId));
  }
};
LabelGroup.displayName = "LabelGroup";
LabelGroup.defaultProps = {
  expandedText: "Show Less",
  collapsedText: "${remaining} more",
  categoryName: "",
  defaultIsOpen: false,
  numLabels: 3,
  isClosable: false,
  isCompact: false,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onClick: (_e) => void 0,
  closeBtnAriaLabel: "Close label group",
  tooltipPosition: "top",
  "aria-label": "Label group category",
  isVertical: false,
  isEditable: false,
  hasEditableTextArea: false
};

// node_modules/@patternfly/react-core/dist/esm/components/List/List.js
init_tslib_es6();
var React211 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/List/list.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/List/list.css";
var list_default = {
  "list": "pf-v5-c-list",
  "listItem": "pf-v5-c-list__item",
  "listItemIcon": "pf-v5-c-list__item-icon",
  "modifiers": {
    "iconLg": "pf-m-icon-lg",
    "plain": "pf-m-plain",
    "inline": "pf-m-inline",
    "bordered": "pf-m-bordered"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/List/List.js
var OrderType;
(function(OrderType2) {
  OrderType2["number"] = "1";
  OrderType2["lowercaseLetter"] = "a";
  OrderType2["uppercaseLetter"] = "A";
  OrderType2["lowercaseRomanNumber"] = "i";
  OrderType2["uppercaseRomanNumber"] = "I";
})(OrderType || (OrderType = {}));
var ListVariant;
(function(ListVariant2) {
  ListVariant2["inline"] = "inline";
})(ListVariant || (ListVariant = {}));
var ListComponent;
(function(ListComponent2) {
  ListComponent2["ol"] = "ol";
  ListComponent2["ul"] = "ul";
})(ListComponent || (ListComponent = {}));
var List = (_a) => {
  var { className = "", children = null, variant = null, isBordered = false, isPlain = false, iconSize = "default", type = OrderType.number, ref = null, component = ListComponent.ul } = _a, props = __rest(_a, ["className", "children", "variant", "isBordered", "isPlain", "iconSize", "type", "ref", "component"]);
  return component === ListComponent.ol ? React211.createElement("ol", Object.assign({ ref, type }, isPlain && { role: "list" }, props, { className: css(list_default.list, variant && list_default.modifiers[variant], isBordered && list_default.modifiers.bordered, isPlain && list_default.modifiers.plain, iconSize && iconSize === "large" && list_default.modifiers.iconLg, className) }), children) : React211.createElement("ul", Object.assign({ ref }, isPlain && { role: "list" }, props, { className: css(list_default.list, variant && list_default.modifiers[variant], isBordered && list_default.modifiers.bordered, isPlain && list_default.modifiers.plain, iconSize && iconSize === "large" && list_default.modifiers.iconLg, className) }), children);
};
List.displayName = "List";

// node_modules/@patternfly/react-core/dist/esm/components/List/ListItem.js
init_tslib_es6();
var React212 = __toESM(require_react());
var ListItem = (_a) => {
  var { icon = null, children = null } = _a, props = __rest(_a, ["icon", "children"]);
  return React212.createElement(
    "li",
    Object.assign({ className: css(icon && list_default.listItem) }, props),
    icon && React212.createElement("span", { className: css(list_default.listItemIcon) }, icon),
    children
  );
};
ListItem.displayName = "ListItem";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginPage.js
init_tslib_es6();
var React219 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/Login.js
init_tslib_es6();
var React213 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Login/login.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Login/login.css";
var login_default = {
  "brand": "pf-v5-c-brand",
  "button": "pf-v5-c-button",
  "dropdown": "pf-v5-c-dropdown",
  "list": "pf-v5-c-list",
  "login": "pf-v5-c-login",
  "loginContainer": "pf-v5-c-login__container",
  "loginFooter": "pf-v5-c-login__footer",
  "loginHeader": "pf-v5-c-login__header",
  "loginMain": "pf-v5-c-login__main",
  "loginMainBody": "pf-v5-c-login__main-body",
  "loginMainFooter": "pf-v5-c-login__main-footer",
  "loginMainFooterBand": "pf-v5-c-login__main-footer-band",
  "loginMainFooterLinks": "pf-v5-c-login__main-footer-links",
  "loginMainFooterLinksItem": "pf-v5-c-login__main-footer-links-item",
  "loginMainFooterLinksItemLink": "pf-v5-c-login__main-footer-links-item-link",
  "loginMainHeader": "pf-v5-c-login__main-header",
  "loginMainHeaderDesc": "pf-v5-c-login__main-header-desc",
  "loginMainHeaderUtilities": "pf-v5-c-login__main-header-utilities",
  "themeDark": "pf-v5-theme-dark",
  "title": "pf-v5-c-title"
};

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/Login.js
var Login = (_a) => {
  var { className = "", children = null, footer = null, header = null } = _a, props = __rest(_a, ["className", "children", "footer", "header"]);
  return React213.createElement(
    "div",
    Object.assign({}, props, { className: css(login_default.login, className) }),
    React213.createElement(
      "div",
      { className: css(login_default.loginContainer) },
      header,
      React213.createElement("main", { className: css(login_default.loginMain) }, children),
      footer
    )
  );
};
Login.displayName = "Login";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginHeader.js
init_tslib_es6();
var React214 = __toESM(require_react());
var LoginHeader = (_a) => {
  var { className = "", children = null, headerBrand = null } = _a, props = __rest(_a, ["className", "children", "headerBrand"]);
  return React214.createElement(
    "header",
    Object.assign({ className: css(login_default.loginHeader, className) }, props),
    headerBrand,
    children
  );
};
LoginHeader.displayName = "LoginHeader";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginFooter.js
init_tslib_es6();
var React215 = __toESM(require_react());
var LoginFooter = (_a) => {
  var { className = "", children = null } = _a, props = __rest(_a, ["className", "children"]);
  return React215.createElement("footer", Object.assign({ className: css(login_default.loginFooter, className) }, props), children);
};
LoginFooter.displayName = "LoginFooter";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainHeader.js
init_tslib_es6();
var React216 = __toESM(require_react());
var LoginMainHeader = (_a) => {
  var { children = null, className = "", title = "", subtitle = "", headerUtilities = null } = _a, props = __rest(_a, ["children", "className", "title", "subtitle", "headerUtilities"]);
  return React216.createElement(
    "header",
    Object.assign({ className: css(login_default.loginMainHeader, className) }, props),
    title && React216.createElement(Title, { headingLevel: "h2", size: TitleSizes["3xl"] }, title),
    subtitle && React216.createElement("p", { className: css(login_default.loginMainHeaderDesc) }, subtitle),
    headerUtilities && React216.createElement("div", { className: css(login_default.loginMainHeaderUtilities) }, headerUtilities),
    children
  );
};
LoginMainHeader.displayName = "LoginMainHeader";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainBody.js
init_tslib_es6();
var React217 = __toESM(require_react());
var LoginMainBody = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React217.createElement("div", Object.assign({ className: css(login_default.loginMainBody, className) }, props), children);
};
LoginMainBody.displayName = "LoginMainBody";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooter.js
init_tslib_es6();
var React218 = __toESM(require_react());
var LoginMainFooter = (_a) => {
  var { children = null, socialMediaLoginContent = null, signUpForAccountMessage = null, forgotCredentials = null, className = "", socialMediaLoginAriaLabel } = _a, props = __rest(_a, ["children", "socialMediaLoginContent", "signUpForAccountMessage", "forgotCredentials", "className", "socialMediaLoginAriaLabel"]);
  return React218.createElement(
    "div",
    Object.assign({ className: css(login_default.loginMainFooter, className) }, props),
    children,
    socialMediaLoginContent && React218.createElement("ul", { className: css(login_default.loginMainFooterLinks), "aria-label": socialMediaLoginAriaLabel, role: "list" }, socialMediaLoginContent),
    (signUpForAccountMessage || forgotCredentials) && React218.createElement(
      "div",
      { className: css(login_default.loginMainFooterBand) },
      signUpForAccountMessage,
      forgotCredentials
    )
  );
};
LoginMainFooter.displayName = "LoginMainFooter";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginPage.js
var LoginPage = (_a) => {
  var { children = null, className = "", brandImgSrc = "", brandImgAlt = "", backgroundImgSrc = "", footerListItems = null, textContent = "", footerListVariants, loginTitle, loginSubtitle, headerUtilities, signUpForAccountMessage = null, forgotCredentials = null, socialMediaLoginContent = null, socialMediaLoginAriaLabel } = _a, props = __rest(_a, ["children", "className", "brandImgSrc", "brandImgAlt", "backgroundImgSrc", "footerListItems", "textContent", "footerListVariants", "loginTitle", "loginSubtitle", "headerUtilities", "signUpForAccountMessage", "forgotCredentials", "socialMediaLoginContent", "socialMediaLoginAriaLabel"]);
  const HeaderBrand = React219.createElement(
    React219.Fragment,
    null,
    React219.createElement(Brand, { src: brandImgSrc, alt: brandImgAlt })
  );
  const Header = React219.createElement(LoginHeader, { headerBrand: HeaderBrand });
  const Footer = React219.createElement(
    LoginFooter,
    null,
    React219.createElement("p", null, textContent),
    React219.createElement(List, { variant: footerListVariants }, footerListItems)
  );
  return React219.createElement(
    React219.Fragment,
    null,
    backgroundImgSrc && React219.createElement(BackgroundImage, { src: backgroundImgSrc }),
    React219.createElement(
      Login,
      Object.assign({ header: Header, footer: Footer, className: css(className) }, props),
      React219.createElement(LoginMainHeader, { title: loginTitle, subtitle: loginSubtitle, headerUtilities }),
      React219.createElement(LoginMainBody, null, children),
      (socialMediaLoginContent || forgotCredentials || signUpForAccountMessage) && React219.createElement(LoginMainFooter, { socialMediaLoginContent, socialMediaLoginAriaLabel, forgotCredentials, signUpForAccountMessage })
    )
  );
};
LoginPage.displayName = "LoginPage";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginForm.js
init_tslib_es6();
var React220 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/eye-slash-icon.js
var EyeSlashIconConfig = {
  name: "EyeSlashIcon",
  height: 512,
  width: 640,
  svgPath: "M320 400c-75.85 0-137.25-58.71-142.9-133.11L72.2 185.82c-13.79 17.3-26.48 35.59-36.72 55.59a32.35 32.35 0 0 0 0 29.19C89.71 376.41 197.07 448 320 448c26.91 0 52.87-4 77.89-10.46L346 397.39a144.13 144.13 0 0 1-26 2.61zm313.82 58.1l-110.55-85.44a331.25 331.25 0 0 0 81.25-102.07 32.35 32.35 0 0 0 0-29.19C550.29 135.59 442.93 64 320 64a308.15 308.15 0 0 0-147.32 37.7L45.46 3.37A16 16 0 0 0 23 6.18L3.37 31.45A16 16 0 0 0 6.18 53.9l588.36 454.73a16 16 0 0 0 22.46-2.81l19.64-25.27a16 16 0 0 0-2.82-22.45zm-183.72-142l-39.3-30.38A94.75 94.75 0 0 0 416 256a94.76 94.76 0 0 0-121.31-92.21A47.65 47.65 0 0 1 304 192a46.64 46.64 0 0 1-1.54 10l-73.61-56.89A142.31 142.31 0 0 1 320 112a143.92 143.92 0 0 1 144 144c0 21.63-5.29 41.79-13.9 60.11z",
  yOffset: 0,
  xOffset: 0
};
var EyeSlashIcon = createIcon(EyeSlashIconConfig);
var eye_slash_icon_default = EyeSlashIcon;

// node_modules/@patternfly/react-icons/dist/esm/icons/eye-icon.js
var EyeIconConfig = {
  name: "EyeIcon",
  height: 512,
  width: 576,
  svgPath: "M572.52 241.4C518.29 135.59 410.93 64 288 64S57.68 135.64 3.48 241.41a32.35 32.35 0 0 0 0 29.19C57.71 376.41 165.07 448 288 448s230.32-71.64 284.52-177.41a32.35 32.35 0 0 0 0-29.19zM288 400a144 144 0 1 1 144-144 143.93 143.93 0 0 1-144 144zm0-240a95.31 95.31 0 0 0-25.31 3.79 47.85 47.85 0 0 1-66.9 66.9A95.78 95.78 0 1 0 288 160z",
  yOffset: 0,
  xOffset: 0
};
var EyeIcon = createIcon(EyeIconConfig);
var eye_icon_default = EyeIcon;

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginForm.js
var LoginForm = (_a) => {
  var { noAutoFocus = false, className = "", showHelperText = false, helperText = null, helperTextIcon = null, usernameLabel = "Username", usernameValue = "", onChangeUsername = () => void 0, isValidUsername = true, passwordLabel = "Password", passwordValue = "", onChangePassword = () => void 0, isShowPasswordEnabled = false, hidePasswordAriaLabel = "Hide password", showPasswordAriaLabel = "Show password", isValidPassword = true, loginButtonLabel = "Log In", isLoginButtonDisabled = false, onLoginButtonClick = () => void 0, rememberMeLabel = "", isRememberMeChecked = false, onChangeRememberMe = () => void 0 } = _a, props = __rest(_a, ["noAutoFocus", "className", "showHelperText", "helperText", "helperTextIcon", "usernameLabel", "usernameValue", "onChangeUsername", "isValidUsername", "passwordLabel", "passwordValue", "onChangePassword", "isShowPasswordEnabled", "hidePasswordAriaLabel", "showPasswordAriaLabel", "isValidPassword", "loginButtonLabel", "isLoginButtonDisabled", "onLoginButtonClick", "rememberMeLabel", "isRememberMeChecked", "onChangeRememberMe"]);
  const [passwordHidden, setPasswordHidden] = React220.useState(true);
  const passwordInput = React220.createElement(TextInput, { isRequired: true, type: passwordHidden ? "password" : "text", id: "pf-login-password-id", name: "pf-login-password-id", validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error, value: passwordValue, onChange: onChangePassword });
  return React220.createElement(
    Form,
    Object.assign({ className }, props),
    showHelperText && React220.createElement(
      FormHelperText,
      null,
      React220.createElement(
        HelperText,
        null,
        React220.createElement(HelperTextItem, { variant: !isValidUsername || !isValidPassword ? "error" : "default", icon: helperTextIcon }, helperText)
      )
    ),
    React220.createElement(
      FormGroup,
      { label: usernameLabel, isRequired: true, fieldId: "pf-login-username-id" },
      React220.createElement(TextInput, { autoFocus: !noAutoFocus, id: "pf-login-username-id", isRequired: true, validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error, type: "text", name: "pf-login-username-id", value: usernameValue, onChange: onChangeUsername })
    ),
    React220.createElement(
      FormGroup,
      { label: passwordLabel, isRequired: true, fieldId: "pf-login-password-id" },
      isShowPasswordEnabled && React220.createElement(
        InputGroup,
        null,
        React220.createElement(InputGroupItem, { isFill: true }, passwordInput),
        React220.createElement(
          InputGroupItem,
          null,
          React220.createElement(Button, { variant: "control", onClick: () => setPasswordHidden(!passwordHidden), "aria-label": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel }, passwordHidden ? React220.createElement(eye_icon_default, null) : React220.createElement(eye_slash_icon_default, null))
        )
      ),
      !isShowPasswordEnabled && passwordInput
    ),
    rememberMeLabel.length > 0 && React220.createElement(
      FormGroup,
      { fieldId: "pf-login-remember-me-id" },
      React220.createElement(Checkbox, { id: "pf-login-remember-me-id", label: rememberMeLabel, isChecked: isRememberMeChecked, onChange: onChangeRememberMe })
    ),
    React220.createElement(
      ActionGroup,
      null,
      React220.createElement(Button, { variant: "primary", type: "submit", onClick: onLoginButtonClick, isBlock: true, isDisabled: isLoginButtonDisabled }, loginButtonLabel)
    )
  );
};
LoginForm.displayName = "LoginForm";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginFooterItem.js
init_tslib_es6();
var React221 = __toESM(require_react());
var LoginFooterItem = (_a) => {
  var { children = null, href = "#", target = "_blank" } = _a, props = __rest(_a, ["children", "href", "target"]);
  return React221.isValidElement(children) ? children : React221.createElement("a", Object.assign({ target, href }, props), children);
};
LoginFooterItem.displayName = "LoginFooterItem";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooterBandItem.js
init_tslib_es6();
var React222 = __toESM(require_react());
var LoginMainFooterBandItem = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React222.createElement("p", Object.assign({ className: css(`${login_default.loginMainFooterBand}-item`, className) }, props), children);
};
LoginMainFooterBandItem.displayName = "LoginMainFooterBandItem";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooterLinksItem.js
init_tslib_es6();
var React223 = __toESM(require_react());
var LoginMainFooterLinksItem = (_a) => {
  var { children = null, href = "", target, className = "", linkComponent = "a", linkComponentProps } = _a, props = __rest(_a, ["children", "href", "target", "className", "linkComponent", "linkComponentProps"]);
  const LinkComponent = linkComponent;
  return React223.createElement(
    "li",
    Object.assign({ className: css(login_default.loginMainFooterLinksItem, className) }, props),
    React223.createElement(LinkComponent, Object.assign({ className: css(login_default.loginMainFooterLinksItemLink), href, target }, linkComponentProps), children)
  );
};
LoginMainFooterLinksItem.displayName = "LoginMainFooterLinksItem";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/Masthead.js
init_tslib_es6();
var React225 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Masthead/masthead.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Masthead/masthead.css";
var masthead_default = {
  "button": "pf-v5-c-button",
  "contextSelector": "pf-v5-c-context-selector",
  "dropdown": "pf-v5-c-dropdown",
  "masthead": "pf-v5-c-masthead",
  "mastheadBrand": "pf-v5-c-masthead__brand",
  "mastheadContent": "pf-v5-c-masthead__content",
  "mastheadMain": "pf-v5-c-masthead__main",
  "mastheadToggle": "pf-v5-c-masthead__toggle",
  "menuToggle": "pf-v5-c-menu-toggle",
  "modifiers": {
    "light_200": "pf-m-light-200",
    "light": "pf-m-light",
    "plain": "pf-m-plain",
    "resizeObserver": "pf-m-resize-observer",
    "fullHeight": "pf-m-full-height",
    "horizontal": "pf-m-horizontal",
    "displayStack": "pf-m-display-stack",
    "displayInline": "pf-m-display-inline",
    "insetNone": "pf-m-inset-none",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "displayStackOnSm": "pf-m-display-stack-on-sm",
    "displayInlineOnSm": "pf-m-display-inline-on-sm",
    "insetNoneOnSm": "pf-m-inset-none-on-sm",
    "insetSmOnSm": "pf-m-inset-sm-on-sm",
    "insetMdOnSm": "pf-m-inset-md-on-sm",
    "insetLgOnSm": "pf-m-inset-lg-on-sm",
    "insetXlOnSm": "pf-m-inset-xl-on-sm",
    "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
    "displayStackOnMd": "pf-m-display-stack-on-md",
    "displayInlineOnMd": "pf-m-display-inline-on-md",
    "insetNoneOnMd": "pf-m-inset-none-on-md",
    "insetSmOnMd": "pf-m-inset-sm-on-md",
    "insetMdOnMd": "pf-m-inset-md-on-md",
    "insetLgOnMd": "pf-m-inset-lg-on-md",
    "insetXlOnMd": "pf-m-inset-xl-on-md",
    "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
    "displayStackOnLg": "pf-m-display-stack-on-lg",
    "displayInlineOnLg": "pf-m-display-inline-on-lg",
    "insetNoneOnLg": "pf-m-inset-none-on-lg",
    "insetSmOnLg": "pf-m-inset-sm-on-lg",
    "insetMdOnLg": "pf-m-inset-md-on-lg",
    "insetLgOnLg": "pf-m-inset-lg-on-lg",
    "insetXlOnLg": "pf-m-inset-xl-on-lg",
    "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
    "displayStackOnXl": "pf-m-display-stack-on-xl",
    "displayInlineOnXl": "pf-m-display-inline-on-xl",
    "insetNoneOnXl": "pf-m-inset-none-on-xl",
    "insetSmOnXl": "pf-m-inset-sm-on-xl",
    "insetMdOnXl": "pf-m-inset-md-on-xl",
    "insetLgOnXl": "pf-m-inset-lg-on-xl",
    "insetXlOnXl": "pf-m-inset-xl-on-xl",
    "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
    "displayStackOn_2xl": "pf-m-display-stack-on-2xl",
    "displayInlineOn_2xl": "pf-m-display-inline-on-2xl",
    "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
    "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
    "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
    "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
    "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
    "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
  },
  "nav": "pf-v5-c-nav",
  "page": "pf-v5-c-page",
  "themeDark": "pf-v5-theme-dark",
  "toolbar": "pf-v5-c-toolbar",
  "toolbarContentSection": "pf-v5-c-toolbar__content-section",
  "toolbarExpandableContent": "pf-v5-c-toolbar__expandable-content"
};

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageContext.js
var React224 = __toESM(require_react());
var pageContextDefaults = {
  isManagedSidebar: false,
  isSidebarOpen: false,
  onSidebarToggle: () => null,
  width: null,
  height: null,
  getBreakpoint,
  getVerticalBreakpoint
};
var PageContext = React224.createContext(pageContextDefaults);
var PageContextProvider = PageContext.Provider;
var PageContextConsumer = PageContext.Consumer;

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/Masthead.js
var Masthead = (_a) => {
  var { children, className, backgroundColor = "dark", display = {
    md: "inline"
  }, inset } = _a, props = __rest(_a, ["children", "className", "backgroundColor", "display", "inset"]);
  const { width, getBreakpoint: getBreakpoint2 } = React225.useContext(PageContext);
  return React225.createElement("header", Object.assign({ className: css(masthead_default.masthead, formatBreakpointMods(display, masthead_default, "display-", getBreakpoint2(width)), formatBreakpointMods(inset, masthead_default, "", getBreakpoint2(width)), backgroundColor === "light" && masthead_default.modifiers.light, backgroundColor === "light200" && masthead_default.modifiers.light_200, className) }, props), children);
};
Masthead.displayName = "Masthead";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadBrand.js
init_tslib_es6();
var React226 = __toESM(require_react());
var MastheadBrand = (_a) => {
  var { children, className, component } = _a, props = __rest(_a, ["children", "className", "component"]);
  let Component44 = component;
  if (!component) {
    if ((props === null || props === void 0 ? void 0 : props.href) !== void 0) {
      Component44 = "a";
    } else {
      Component44 = "span";
    }
  }
  return React226.createElement(Component44, Object.assign({ className: css(masthead_default.mastheadBrand, className) }, Component44 === "a" && { tabIndex: 0 }, props), children);
};
MastheadBrand.displayName = "MastheadBrand";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadContent.js
init_tslib_es6();
var React227 = __toESM(require_react());
var MastheadContent = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React227.createElement("div", Object.assign({ className: css(masthead_default.mastheadContent, className) }, props), children);
};
MastheadContent.displayName = "MastheadContent";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadMain.js
init_tslib_es6();
var React228 = __toESM(require_react());
var MastheadMain = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React228.createElement("div", Object.assign({ className: css(masthead_default.mastheadMain, className) }, props), children);
};
MastheadMain.displayName = "MastheadMain";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadToggle.js
init_tslib_es6();
var React229 = __toESM(require_react());
var MastheadToggle = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React229.createElement("span", Object.assign({ className: css(masthead_default.mastheadToggle, className) }, props), children);
};
MastheadToggle.displayName = "MastheadToggle";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUpload.js
init_tslib_es6();
var React230 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload.css";
var multiple_file_upload_default = {
  "modifiers": {
    "horizontal": "pf-m-horizontal",
    "dragOver": "pf-m-drag-over"
  },
  "multipleFileUpload": "pf-v5-c-multiple-file-upload",
  "multipleFileUploadInfo": "pf-v5-c-multiple-file-upload__info",
  "multipleFileUploadMain": "pf-v5-c-multiple-file-upload__main",
  "multipleFileUploadStatus": "pf-v5-c-multiple-file-upload__status",
  "multipleFileUploadStatusItem": "pf-v5-c-multiple-file-upload__status-item",
  "multipleFileUploadStatusItemClose": "pf-v5-c-multiple-file-upload__status-item-close",
  "multipleFileUploadStatusItemIcon": "pf-v5-c-multiple-file-upload__status-item-icon",
  "multipleFileUploadStatusItemMain": "pf-v5-c-multiple-file-upload__status-item-main",
  "multipleFileUploadStatusItemProgress": "pf-v5-c-multiple-file-upload__status-item-progress",
  "multipleFileUploadStatusItemProgressSize": "pf-v5-c-multiple-file-upload__status-item-progress-size",
  "multipleFileUploadStatusItemProgressText": "pf-v5-c-multiple-file-upload__status-item-progress-text",
  "multipleFileUploadStatusProgress": "pf-v5-c-multiple-file-upload__status-progress",
  "multipleFileUploadStatusProgressIcon": "pf-v5-c-multiple-file-upload__status-progress-icon",
  "multipleFileUploadTitle": "pf-v5-c-multiple-file-upload__title",
  "multipleFileUploadTitleIcon": "pf-v5-c-multiple-file-upload__title-icon",
  "multipleFileUploadTitleText": "pf-v5-c-multiple-file-upload__title-text",
  "multipleFileUploadTitleTextSeparator": "pf-v5-c-multiple-file-upload__title-text-separator",
  "multipleFileUploadUpload": "pf-v5-c-multiple-file-upload__upload"
};

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUpload.js
var MultipleFileUploadContext = React230.createContext({
  open: () => {
  }
});
var MultipleFileUpload = (_a) => {
  var { className, children, dropzoneProps = {}, isHorizontal, onFileDrop = () => {
  } } = _a, props = __rest(_a, ["className", "children", "dropzoneProps", "isHorizontal", "onFileDrop"]);
  const onDropAccepted = (acceptedFiles, event) => {
    onFileDrop(event, acceptedFiles);
    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);
  };
  const { getRootProps, getInputProps, isDragActive, open } = useDropzone(Object.assign(Object.assign({ multiple: true }, dropzoneProps), { onDropAccepted }));
  const rootProps = getRootProps(Object.assign(Object.assign({}, props), {
    onClick: (event) => event.stopPropagation()
    // Prevents clicking TextArea from opening file dialog
  }));
  return React230.createElement(
    MultipleFileUploadContext.Provider,
    { value: { open } },
    React230.createElement(
      "div",
      Object.assign({ className: css(multiple_file_upload_default.multipleFileUpload, isDragActive && multiple_file_upload_default.modifiers.dragOver, isHorizontal && multiple_file_upload_default.modifiers.horizontal, className) }, rootProps, props),
      React230.createElement("input", Object.assign({}, getInputProps())),
      children
    )
  );
};
MultipleFileUpload.displayName = "MultipleFileUpload";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadMain.js
init_tslib_es6();
var React237 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitle.js
init_tslib_es6();
var React234 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleIcon.js
init_tslib_es6();
var React231 = __toESM(require_react());
var MultipleFileUploadTitleIcon = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React231.createElement("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleIcon, className) }, props), children);
};
MultipleFileUploadTitleIcon.displayName = "MultipleFileUploadTitleIcon";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleText.js
init_tslib_es6();
var React232 = __toESM(require_react());
var MultipleFileUploadTitleText = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return React232.createElement("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleText, className) }, props), children);
};
MultipleFileUploadTitleText.displayName = "MultipleFileUploadTitleText";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleTextSeparator.js
init_tslib_es6();
var React233 = __toESM(require_react());
var MultipleFileUploadTitleTextSeparator = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return React233.createElement("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleTextSeparator, className) }, props), children);
};
MultipleFileUploadTitleTextSeparator.displayName = "MultipleFileUploadTitleTextSeparator";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitle.js
var MultipleFileUploadTitle = (_a) => {
  var { className, icon, text = "", textSeparator = "" } = _a, props = __rest(_a, ["className", "icon", "text", "textSeparator"]);
  return React234.createElement(
    "div",
    Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitle, className) }, props),
    icon && React234.createElement(MultipleFileUploadTitleIcon, null, icon),
    text && React234.createElement(
      MultipleFileUploadTitleText,
      null,
      `${text} `,
      textSeparator && React234.createElement(MultipleFileUploadTitleTextSeparator, null, textSeparator)
    )
  );
};
MultipleFileUploadTitle.displayName = "MultipleFileUploadTitle";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadButton.js
init_tslib_es6();
var React235 = __toESM(require_react());
var MultipleFileUploadButton = (_a) => {
  var { className, "aria-label": ariaLabel, browseButtonText = "Upload" } = _a, props = __rest(_a, ["className", "aria-label", "browseButtonText"]);
  if (!ariaLabel && !browseButtonText) {
    console.warn("For accessibility reasons an aria-label should be specified on MultipleFileUploadButton if a browseButtonText isn't");
  }
  const { open } = React235.useContext(MultipleFileUploadContext);
  return React235.createElement(
    "div",
    Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadUpload, className) }, props),
    React235.createElement(Button, { variant: "secondary", "aria-label": ariaLabel, onClick: open }, browseButtonText)
  );
};
MultipleFileUploadButton.displayName = "MultipleFileUploadButton";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadInfo.js
init_tslib_es6();
var React236 = __toESM(require_react());
var MultipleFileUploadInfo = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return React236.createElement("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadInfo, className) }, props), children);
};
MultipleFileUploadInfo.displayName = "MultipleFileUploadInfo";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadMain.js
var MultipleFileUploadMain = (_a) => {
  var { className, titleIcon, titleText, titleTextSeparator, infoText, isUploadButtonHidden, browseButtonText = "Upload" } = _a, props = __rest(_a, ["className", "titleIcon", "titleText", "titleTextSeparator", "infoText", "isUploadButtonHidden", "browseButtonText"]);
  const showTitle = !!titleIcon || !!titleText || !!titleTextSeparator;
  return React237.createElement(
    "div",
    Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadMain, className) }, props),
    showTitle && React237.createElement(MultipleFileUploadTitle, { icon: titleIcon, text: titleText, textSeparator: titleTextSeparator }),
    isUploadButtonHidden || React237.createElement(MultipleFileUploadButton, { browseButtonText }),
    !!infoText && React237.createElement(MultipleFileUploadInfo, null, infoText)
  );
};
MultipleFileUploadMain.displayName = "MultipleFileUploadMain";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatus.js
init_tslib_es6();
var React238 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/in-progress-icon.js
var InProgressIconConfig = {
  name: "InProgressIcon",
  height: 1024,
  width: 1024,
  svgPath: "M513.417211,16.013668 L513.417211,112.013668 C513.406007,120.539653 520.082422,127.576718 528.597211,128.013668 C732.697211,136.513668 896.147211,305.013668 896.147211,511.343668 C896.147211,723.013668 724.007211,895.163668 512.417211,895.163668 C437.186239,895.277345 363.602574,873.135095 300.927211,831.523668 C294.58293,827.2982 286.138663,828.135095 280.747211,833.523668 L211.807211,902.353668 C208.502935,905.676185 206.82123,910.280199 207.20607,914.950237 C207.590911,919.620275 210.00361,923.886884 213.807211,926.623668 C300.709573,989.398037 405.213535,1023.13146 512.417211,1023.01398 C794.537211,1023.01398 1023.91724,793.433668 1023.91724,511.413668 C1024.00721,235.103668 804.007211,9.22366802 529.897211,0.00645736761 C525.571205,-0.116171039 521.377128,1.51204372 518.271915,4.52681369 C515.166702,7.54158367 513.415263,11.6857144 513.417211,16.013668 M97.1272107,212.923668 C64.2190689,258.479443 39.0698895,309.162997 22.6972107,362.923668 C21.2705092,367.756559 22.2039184,372.979173 25.2163356,377.018685 C28.2287528,381.058197 32.9681443,383.442545 38.0072107,383.453683 L139.407211,383.453683 C145.970195,383.46249 151.873012,379.462528 154.297211,373.363668 C164.307669,347.593304 177.068112,322.977652 192.357211,299.943668 C196.579666,293.633658 195.741339,285.216847 190.357211,279.863668 L121.497211,211.013668 C118.186635,207.662531 113.567544,205.940538 108.871166,206.30669 C104.174788,206.672841 99.8783994,209.089927 97.1272107,212.913668 M112.907211,511.433663 L17.0072107,511.433663 C12.679257,511.433663 8.5351263,513.183159 5.52035633,516.288373 C2.50558635,519.393586 0.877371594,523.587662 1.00721065,527.913668 C4.13104542,629.408217 37.6085847,727.635936 97.1172107,809.913668 C99.8539943,813.717268 104.120603,816.129968 108.790642,816.514809 C113.46068,816.899649 118.064693,815.217944 121.387211,811.913668 L190.217211,743.073668 C195.605784,737.682216 196.442679,729.237949 192.217211,722.893668 C153.520825,664.580171 131.611534,596.745437 128.887211,526.813668 C128.553964,518.220138 121.487197,511.427209 112.887211,511.433663",
  yOffset: 0,
  xOffset: 0
};
var InProgressIcon = createIcon(InProgressIconConfig);
var in_progress_icon_default = InProgressIcon;

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatus.js
var MultipleFileUploadStatus = (_a) => {
  var { children, className, statusToggleText, statusToggleIcon, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "statusToggleText", "statusToggleIcon", "aria-label"]);
  const [icon, setIcon] = React238.useState();
  const [isOpen, setIsOpen] = React238.useState(true);
  React238.useEffect(() => {
    switch (statusToggleIcon) {
      case "danger":
        setIcon(React238.createElement(times_circle_icon_default, null));
        break;
      case "success":
        setIcon(React238.createElement(check_circle_icon_default, null));
        break;
      case "inProgress":
        setIcon(React238.createElement(in_progress_icon_default, null));
        break;
      default:
        setIcon(statusToggleIcon);
    }
  }, [statusToggleIcon]);
  const toggle = React238.createElement(
    "div",
    { className: multiple_file_upload_default.multipleFileUploadStatusProgress },
    React238.createElement("div", { className: multiple_file_upload_default.multipleFileUploadStatusProgressIcon }, icon),
    React238.createElement("div", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgressText }, statusToggleText)
  );
  const toggleExpandableSection = () => {
    setIsOpen(!isOpen);
  };
  return React238.createElement(
    "div",
    Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadStatus, className) }, props),
    React238.createElement(GenerateId, { prefix: "pf-expandable-section-" }, (expandableSectionId) => React238.createElement(
      ExpandableSection,
      { contentId: `${expandableSectionId}-content`, toggleId: `${expandableSectionId}-toggle`, toggleContent: toggle, isExpanded: isOpen, onToggle: toggleExpandableSection },
      React238.createElement("ul", { className: `${multiple_file_upload_default.multipleFileUploadStatus}-list`, role: "list", "aria-label": ariaLabel }, children)
    ))
  );
};
MultipleFileUploadStatus.displayName = "MultipleFileUploadStatus";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatusItem.js
init_tslib_es6();
var React243 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Progress/Progress.js
init_tslib_es6();
var React242 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Progress/progress.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Progress/progress.css";
var progress_default = {
  "modifiers": {
    "sm": "pf-m-sm",
    "lg": "pf-m-lg",
    "inside": "pf-m-inside",
    "outside": "pf-m-outside",
    "staticWidth": "pf-m-static-width",
    "singleline": "pf-m-singleline",
    "success": "pf-m-success",
    "warning": "pf-m-warning",
    "danger": "pf-m-danger",
    "truncate": "pf-m-truncate"
  },
  "progress": "pf-v5-c-progress",
  "progressBar": "pf-v5-c-progress__bar",
  "progressDescription": "pf-v5-c-progress__description",
  "progressHelperText": "pf-v5-c-progress__helper-text",
  "progressIndicator": "pf-v5-c-progress__indicator",
  "progressMeasure": "pf-v5-c-progress__measure",
  "progressStatus": "pf-v5-c-progress__status",
  "progressStatusIcon": "pf-v5-c-progress__status-icon",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressContainer.js
var React241 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressBar.js
init_tslib_es6();
var React239 = __toESM(require_react());
var ProgressBar = (_a) => {
  var { progressBarAriaProps, className = "", children = null, value } = _a, props = __rest(_a, ["progressBarAriaProps", "className", "children", "value"]);
  return React239.createElement(
    "div",
    Object.assign({}, props, { className: css(progress_default.progressBar, className) }, progressBarAriaProps),
    React239.createElement(
      "div",
      { className: css(progress_default.progressIndicator), style: { width: `${value}%` } },
      React239.createElement("span", { className: css(progress_default.progressMeasure) }, children)
    )
  );
};
ProgressBar.displayName = "ProgressBar";

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressHelperText.js
init_tslib_es6();
var React240 = __toESM(require_react());
var ProgressHelperText = (_a) => {
  var { children } = _a, props = __rest(_a, ["children"]);
  return React240.createElement("div", Object.assign({ className: progress_default.progressHelperText }, props), children);
};
ProgressHelperText.displayName = "ProgressHelperText";

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressContainer.js
var ProgressMeasureLocation;
(function(ProgressMeasureLocation2) {
  ProgressMeasureLocation2["outside"] = "outside";
  ProgressMeasureLocation2["inside"] = "inside";
  ProgressMeasureLocation2["top"] = "top";
  ProgressMeasureLocation2["none"] = "none";
})(ProgressMeasureLocation || (ProgressMeasureLocation = {}));
var ProgressVariant;
(function(ProgressVariant2) {
  ProgressVariant2["danger"] = "danger";
  ProgressVariant2["success"] = "success";
  ProgressVariant2["warning"] = "warning";
})(ProgressVariant || (ProgressVariant = {}));
var variantToIcon = {
  danger: times_circle_icon_default,
  success: check_circle_icon_default,
  warning: exclamation_triangle_icon_default
};
var ProgressContainer = ({ progressBarAriaProps, value, title = "", parentId, label = null, variant = null, measureLocation = ProgressMeasureLocation.top, isTitleTruncated = false, tooltipPosition, helperText }) => {
  const StatusIcon = variantToIcon.hasOwnProperty(variant) && variantToIcon[variant];
  const [tooltip, setTooltip] = React241.useState("");
  const onMouseEnter = (event) => {
    if (event.target.offsetWidth < event.target.scrollWidth) {
      setTooltip(title || event.target.innerHTML);
    } else {
      setTooltip("");
    }
  };
  const Title2 = React241.createElement("div", { className: css(progress_default.progressDescription, isTitleTruncated && typeof title === "string" && progress_default.modifiers.truncate), id: `${parentId}-description`, "aria-hidden": "true", onMouseEnter: isTitleTruncated && typeof title === "string" ? onMouseEnter : null }, title);
  return React241.createElement(
    React241.Fragment,
    null,
    title && (tooltip ? React241.createElement(Tooltip, { position: tooltipPosition, content: tooltip, isVisible: true }, Title2) : Title2),
    (measureLocation !== ProgressMeasureLocation.none || StatusIcon) && React241.createElement(
      "div",
      { className: css(progress_default.progressStatus), "aria-hidden": "true" },
      (measureLocation === ProgressMeasureLocation.top || measureLocation === ProgressMeasureLocation.outside) && React241.createElement("span", { className: css(progress_default.progressMeasure) }, label || `${value}%`),
      StatusIcon && React241.createElement(
        "span",
        { className: css(progress_default.progressStatusIcon) },
        React241.createElement(StatusIcon, null)
      )
    ),
    React241.createElement(ProgressBar, { role: "progressbar", progressBarAriaProps, value }, measureLocation === ProgressMeasureLocation.inside && `${value}%`),
    helperText && React241.createElement(ProgressHelperText, null, helperText)
  );
};
ProgressContainer.displayName = "ProgressContainer";

// node_modules/@patternfly/react-core/dist/esm/components/Progress/Progress.js
var ProgressSize;
(function(ProgressSize2) {
  ProgressSize2["sm"] = "sm";
  ProgressSize2["md"] = "md";
  ProgressSize2["lg"] = "lg";
})(ProgressSize || (ProgressSize = {}));
var Progress = class extends React242.Component {
  constructor() {
    super(...arguments);
    this.id = this.props.id || getUniqueId();
  }
  render() {
    const _a = this.props, {
      /* eslint-disable @typescript-eslint/no-unused-vars */
      id,
      size,
      /* eslint-enable @typescript-eslint/no-unused-vars */
      className,
      value,
      title,
      label,
      variant,
      measureLocation,
      min,
      max,
      valueText,
      isTitleTruncated,
      tooltipPosition,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      helperText
    } = _a, props = __rest(_a, ["id", "size", "className", "value", "title", "label", "variant", "measureLocation", "min", "max", "valueText", "isTitleTruncated", "tooltipPosition", "aria-label", "aria-labelledby", "helperText"]);
    const progressBarAriaProps = {
      "aria-valuemin": min,
      "aria-valuenow": value,
      "aria-valuemax": max
    };
    if (title || ariaLabelledBy) {
      progressBarAriaProps["aria-labelledby"] = title ? `${this.id}-description` : ariaLabelledBy;
    }
    if (ariaLabel) {
      progressBarAriaProps["aria-label"] = ariaLabel;
    }
    if (valueText) {
      progressBarAriaProps["aria-valuetext"] = valueText;
    }
    if (!title && !ariaLabelledBy && !ariaLabel) {
      console.warn("One of aria-label or aria-labelledby properties should be passed when using the progress component without a title.");
    }
    const scaledValue = Math.min(100, Math.max(0, Math.floor((value - min) / (max - min) * 100))) || 0;
    return React242.createElement(
      "div",
      Object.assign({}, props, { className: css(progress_default.progress, progress_default.modifiers[variant], ["inside", "outside"].includes(measureLocation) && progress_default.modifiers[measureLocation], measureLocation === "inside" ? progress_default.modifiers[ProgressSize.lg] : progress_default.modifiers[size], !title && progress_default.modifiers.singleline, className), id: this.id }),
      React242.createElement(ProgressContainer, { parentId: this.id, value: scaledValue, title, label, variant, measureLocation, progressBarAriaProps, isTitleTruncated, tooltipPosition, helperText })
    );
  }
};
Progress.displayName = "Progress";
Progress.defaultProps = {
  className: "",
  measureLocation: ProgressMeasureLocation.top,
  variant: null,
  id: "",
  title: "",
  min: 0,
  max: 100,
  size: null,
  label: null,
  value: 0,
  valueText: null,
  isTitleTruncated: false,
  tooltipPosition: "top",
  "aria-label": null,
  "aria-labelledby": null
};

// node_modules/@patternfly/react-icons/dist/esm/icons/file-icon.js
var FileIconConfig = {
  name: "FileIcon",
  height: 512,
  width: 384,
  svgPath: "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm160-14.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z",
  yOffset: 0,
  xOffset: 0
};
var FileIcon = createIcon(FileIconConfig);
var file_icon_default = FileIcon;

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatusItem.js
var MultipleFileUploadStatusItem = (_a) => {
  var { className, file, fileIcon, onReadStarted = () => {
  }, onReadFinished = () => {
  }, onReadSuccess = () => {
  }, onReadFail = () => {
  }, onClearClick = () => {
  }, customFileHandler, fileName, fileSize, progressValue, progressVariant, progressAriaLabel, progressAriaLabelledBy, progressId, progressAriaLiveMessage, buttonAriaLabel = "Remove from list", progressHelperText } = _a, props = __rest(_a, ["className", "file", "fileIcon", "onReadStarted", "onReadFinished", "onReadSuccess", "onReadFail", "onClearClick", "customFileHandler", "fileName", "fileSize", "progressValue", "progressVariant", "progressAriaLabel", "progressAriaLabelledBy", "progressId", "progressAriaLiveMessage", "buttonAriaLabel", "progressHelperText"]);
  const [loadPercentage, setLoadPercentage] = React243.useState(0);
  const [loadResult, setLoadResult] = React243.useState();
  function readFile2(file2) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = () => reject(reader.error);
      reader.onprogress = (data) => {
        if (data.lengthComputable) {
          setLoadPercentage(data.loaded / data.total * 100);
        }
      };
      reader.readAsDataURL(file2);
    });
  }
  React243.useEffect(() => {
    if (customFileHandler) {
      customFileHandler(file);
    } else {
      onReadStarted(file);
      readFile2(file).then((data) => {
        setLoadResult("success");
        setLoadPercentage(100);
        onReadFinished(file);
        onReadSuccess(data, file);
      }).catch((error) => {
        onReadFinished(file);
        onReadFail(error, file);
        setLoadResult("danger");
      });
    }
  }, []);
  const getHumanReadableFileSize = (size) => {
    const prefixes = ["", "K", "M", "G", "T"];
    let prefixUnit = 0;
    while (size >= 1e3) {
      prefixUnit += 1;
      size = size / 1e3;
    }
    if (prefixUnit >= prefixes.length) {
      return "File size too large";
    }
    return `${Math.round(size)}${prefixes[prefixUnit]}B`;
  };
  const value = progressValue || loadPercentage;
  const variant = progressVariant || loadResult;
  const title = React243.createElement(
    "span",
    { className: multiple_file_upload_default.multipleFileUploadStatusItemProgress },
    React243.createElement("span", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgressText }, fileName || (file === null || file === void 0 ? void 0 : file.name) || ""),
    React243.createElement("span", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgressSize }, fileSize || getHumanReadableFileSize((file === null || file === void 0 ? void 0 : file.size) || 0))
  );
  return React243.createElement(
    "li",
    Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadStatusItem, className) }, props),
    React243.createElement("div", { className: multiple_file_upload_default.multipleFileUploadStatusItemIcon }, fileIcon || React243.createElement(file_icon_default, null)),
    React243.createElement(
      "div",
      { className: multiple_file_upload_default.multipleFileUploadStatusItemMain },
      React243.createElement(
        "div",
        { className: "pf-v5-screen-reader", "aria-live": "polite" },
        progressAriaLiveMessage && typeof progressAriaLiveMessage === "function" && progressAriaLiveMessage(+loadPercentage.toFixed(2)),
        progressAriaLiveMessage && typeof progressAriaLiveMessage === "string" && progressAriaLiveMessage,
        !progressAriaLiveMessage && `Progress value is ${progressValue || Math.floor(loadPercentage)}%.`
      ),
      React243.createElement(Progress, { title, value, variant, "aria-label": progressAriaLabel, "aria-labelledby": progressAriaLabelledBy, id: progressId, helperText: progressHelperText })
    ),
    React243.createElement(
      "div",
      { className: multiple_file_upload_default.multipleFileUploadStatusItemClose },
      React243.createElement(
        Button,
        { variant: "plain", "aria-label": buttonAriaLabel, onClick: onClearClick },
        React243.createElement(times_circle_icon_default, null)
      )
    )
  );
};
MultipleFileUploadStatusItem.displayName = "MultipleFileUploadStatusItem";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/Nav.js
init_tslib_es6();
var React244 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Nav/nav.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Nav/nav.css";
var nav_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "divider": "pf-v5-c-divider",
  "menu": "pf-v5-c-menu",
  "menuContent": "pf-v5-c-menu__content",
  "menuItem": "pf-v5-c-menu__item",
  "menuItemToggleIcon": "pf-v5-c-menu__item-toggle-icon",
  "menuListItem": "pf-v5-c-menu__list-item",
  "modifiers": {
    "flyout": "pf-m-flyout",
    "top": "pf-m-top",
    "left": "pf-m-left",
    "current": "pf-m-current",
    "drillUp": "pf-m-drill-up",
    "horizontal": "pf-m-horizontal",
    "tertiary": "pf-m-tertiary",
    "horizontalSubnav": "pf-m-horizontal-subnav",
    "light": "pf-m-light",
    "scrollable": "pf-m-scrollable",
    "overflowHidden": "pf-m-overflow-hidden",
    "expandable": "pf-m-expandable",
    "expanded": "pf-m-expanded",
    "drilldown": "pf-m-drilldown",
    "hover": "pf-m-hover",
    "start": "pf-m-start"
  },
  "nav": "pf-v5-c-nav",
  "navItem": "pf-v5-c-nav__item",
  "navLink": "pf-v5-c-nav__link",
  "navList": "pf-v5-c-nav__list",
  "navScrollButton": "pf-v5-c-nav__scroll-button",
  "navSection": "pf-v5-c-nav__section",
  "navSectionTitle": "pf-v5-c-nav__section-title",
  "navSubnav": "pf-v5-c-nav__subnav",
  "navToggle": "pf-v5-c-nav__toggle",
  "navToggleIcon": "pf-v5-c-nav__toggle-icon",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Nav/Nav.js
var navContextDefaults = {};
var NavContext = React244.createContext(navContextDefaults);
var Nav = class _Nav extends React244.Component {
  constructor() {
    super(...arguments);
    this.state = {
      isScrollable: false,
      ouiaStateId: getDefaultOUIAId(_Nav.displayName, this.props.variant),
      flyoutRef: null
    };
    this.navRef = React244.createRef();
  }
  // Callback from NavItem
  onSelect(event, groupId, itemId, to, preventDefault, onClick) {
    if (preventDefault) {
      event.preventDefault();
    }
    this.props.onSelect(event, { groupId, itemId, to });
    if (onClick) {
      onClick(event, itemId, groupId, to);
    }
  }
  // Callback from NavExpandable
  onToggle(event, groupId, toggleValue) {
    this.props.onToggle(event, {
      groupId,
      isExpanded: toggleValue
    });
  }
  render() {
    const _a = this.props, {
      "aria-label": ariaLabel,
      children,
      className,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onSelect,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onToggle,
      theme,
      ouiaId,
      ouiaSafe,
      variant
    } = _a, props = __rest(_a, ["aria-label", "children", "className", "onSelect", "onToggle", "theme", "ouiaId", "ouiaSafe", "variant"]);
    const isHorizontal = ["horizontal", "tertiary"].includes(variant);
    return React244.createElement(
      NavContext.Provider,
      { value: {
        onSelect: (event, groupId, itemId, to, preventDefault, onClick) => this.onSelect(event, groupId, itemId, to, preventDefault, onClick),
        onToggle: (event, groupId, expanded) => this.onToggle(event, groupId, expanded),
        updateIsScrollable: (isScrollable) => this.setState({ isScrollable }),
        isHorizontal: ["horizontal", "tertiary", "horizontal-subnav"].includes(variant),
        flyoutRef: this.state.flyoutRef,
        setFlyoutRef: (flyoutRef) => this.setState({ flyoutRef }),
        navRef: this.navRef
      } },
      React244.createElement("nav", Object.assign({ className: css(nav_default.nav, theme === "light" && nav_default.modifiers.light, isHorizontal && nav_default.modifiers.horizontal, variant === "tertiary" && nav_default.modifiers.tertiary, variant === "horizontal-subnav" && nav_default.modifiers.horizontalSubnav, this.state.isScrollable && nav_default.modifiers.scrollable, className), "aria-label": ariaLabel || (["tertiary", "horizontal-subnav"].includes(variant) ? "Local" : "Global"), ref: this.navRef }, getOUIAProps(_Nav.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props), children)
    );
  }
};
Nav.displayName = "Nav";
Nav.defaultProps = {
  onSelect: () => void 0,
  onToggle: () => void 0,
  theme: "dark",
  ouiaSafe: true
};

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavList.js
init_tslib_es6();
var React246 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebar.js
init_tslib_es6();
var React245 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Page/page.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Page/page.css";
var page_default = {
  "avatar": "pf-v5-c-avatar",
  "brand": "pf-v5-c-brand",
  "button": "pf-v5-c-button",
  "contextSelector": "pf-v5-c-context-selector",
  "dirRtl": "pf-v5-m-dir-rtl",
  "drawer": "pf-v5-c-drawer",
  "masthead": "pf-v5-c-masthead",
  "modifiers": {
    "light": "pf-m-light",
    "menu": "pf-m-menu",
    "hidden": "pf-m-hidden",
    "hiddenOnSm": "pf-m-hidden-on-sm",
    "visibleOnSm": "pf-m-visible-on-sm",
    "hiddenOnMd": "pf-m-hidden-on-md",
    "visibleOnMd": "pf-m-visible-on-md",
    "hiddenOnLg": "pf-m-hidden-on-lg",
    "visibleOnLg": "pf-m-visible-on-lg",
    "hiddenOnXl": "pf-m-hidden-on-xl",
    "visibleOnXl": "pf-m-visible-on-xl",
    "hiddenOn_2xl": "pf-m-hidden-on-2xl",
    "visibleOn_2xl": "pf-m-visible-on-2xl",
    "read": "pf-m-read",
    "selected": "pf-m-selected",
    "unread": "pf-m-unread",
    "attention": "pf-m-attention",
    "expanded": "pf-m-expanded",
    "collapsed": "pf-m-collapsed",
    "pageInsets": "pf-m-page-insets",
    "insetNone": "pf-m-inset-none",
    "fill": "pf-m-fill",
    "noFill": "pf-m-no-fill",
    "limitWidth": "pf-m-limit-width",
    "alignCenter": "pf-m-align-center",
    "overflowScroll": "pf-m-overflow-scroll",
    "shadowBottom": "pf-m-shadow-bottom",
    "shadowTop": "pf-m-shadow-top",
    "stickyTop": "pf-m-sticky-top",
    "stickyBottom": "pf-m-sticky-bottom",
    "stickyTopOnSmHeight": "pf-m-sticky-top-on-sm-height",
    "stickyBottomOnSmHeight": "pf-m-sticky-bottom-on-sm-height",
    "stickyTopOnMdHeight": "pf-m-sticky-top-on-md-height",
    "stickyBottomOnMdHeight": "pf-m-sticky-bottom-on-md-height",
    "stickyTopOnLgHeight": "pf-m-sticky-top-on-lg-height",
    "stickyBottomOnLgHeight": "pf-m-sticky-bottom-on-lg-height",
    "stickyTopOnXlHeight": "pf-m-sticky-top-on-xl-height",
    "stickyBottomOnXlHeight": "pf-m-sticky-bottom-on-xl-height",
    "stickyTopOn_2xlHeight": "pf-m-sticky-top-on-2xl-height",
    "stickyBottomOn_2xlHeight": "pf-m-sticky-bottom-on-2xl-height",
    "light_100": "pf-m-light-100",
    "dark_100": "pf-m-dark-100",
    "dark_200": "pf-m-dark-200",
    "padding": "pf-m-padding",
    "noPadding": "pf-m-no-padding",
    "paddingOnSm": "pf-m-padding-on-sm",
    "noPaddingOnSm": "pf-m-no-padding-on-sm",
    "paddingOnMd": "pf-m-padding-on-md",
    "noPaddingOnMd": "pf-m-no-padding-on-md",
    "paddingOnLg": "pf-m-padding-on-lg",
    "noPaddingOnLg": "pf-m-no-padding-on-lg",
    "paddingOnXl": "pf-m-padding-on-xl",
    "noPaddingOnXl": "pf-m-no-padding-on-xl",
    "paddingOn_2xl": "pf-m-padding-on-2xl",
    "noPaddingOn_2xl": "pf-m-no-padding-on-2xl",
    "light_200": "pf-m-light-200"
  },
  "nav": "pf-v5-c-nav",
  "notificationBadge": "pf-v5-c-notification-badge",
  "page": "pf-v5-c-page",
  "pageDrawer": "pf-v5-c-page__drawer",
  "pageHeader": "pf-v5-c-page__header",
  "pageHeaderBrand": "pf-v5-c-page__header-brand",
  "pageHeaderBrandLink": "pf-v5-c-page__header-brand-link",
  "pageHeaderBrandToggle": "pf-v5-c-page__header-brand-toggle",
  "pageHeaderNav": "pf-v5-c-page__header-nav",
  "pageHeaderTools": "pf-v5-c-page__header-tools",
  "pageHeaderToolsGroup": "pf-v5-c-page__header-tools-group",
  "pageHeaderToolsItem": "pf-v5-c-page__header-tools-item",
  "pageMain": "pf-v5-c-page__main",
  "pageMainBody": "pf-v5-c-page__main-body",
  "pageMainBreadcrumb": "pf-v5-c-page__main-breadcrumb",
  "pageMainDrawer": "pf-v5-c-page__main-drawer",
  "pageMainGroup": "pf-v5-c-page__main-group",
  "pageMainNav": "pf-v5-c-page__main-nav",
  "pageMainSection": "pf-v5-c-page__main-section",
  "pageMainSubnav": "pf-v5-c-page__main-subnav",
  "pageMainTabs": "pf-v5-c-page__main-tabs",
  "pageMainWizard": "pf-v5-c-page__main-wizard",
  "pageSidebar": "pf-v5-c-page__sidebar",
  "pageSidebarBody": "pf-v5-c-page__sidebar-body",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebar.js
var pageSidebarContextDefaults = {
  isSidebarOpen: true
};
var PageSidebarContext = React245.createContext(pageSidebarContextDefaults);
var PageSidebar = (_a) => {
  var { className = "", children, isSidebarOpen = true, theme = "dark", id = "page-sidebar" } = _a, props = __rest(_a, ["className", "children", "isSidebarOpen", "theme", "id"]);
  return React245.createElement(PageContextConsumer, null, ({ isManagedSidebar, isSidebarOpen: managedIsNavOpen }) => {
    const sidebarOpen = isManagedSidebar ? managedIsNavOpen : isSidebarOpen;
    return React245.createElement(
      "div",
      Object.assign({ id, className: css(page_default.pageSidebar, theme === "light" && page_default.modifiers.light, sidebarOpen && page_default.modifiers.expanded, !sidebarOpen && page_default.modifiers.collapsed, className), "aria-hidden": !sidebarOpen }, props),
      React245.createElement(PageSidebarContext.Provider, { value: { isSidebarOpen: sidebarOpen } }, children)
    );
  });
};
PageSidebar.displayName = "PageSidebar";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavList.js
var NavList = class extends React246.Component {
  constructor() {
    super(...arguments);
    this.direction = "ltr";
    this.state = {
      scrollViewAtStart: false,
      scrollViewAtEnd: false
    };
    this.navList = React246.createRef();
    this.observer = () => {
    };
    this.handleScrollButtons = () => {
      const container = this.navList.current;
      if (container) {
        const scrollViewAtStart = isElementInView(container, container.firstChild, false);
        const scrollViewAtEnd = isElementInView(container, container.lastChild, false);
        this.setState({
          scrollViewAtStart,
          scrollViewAtEnd
        });
        this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);
      }
    };
    this.scrollBack = () => {
      const container = this.navList.current;
      if (container) {
        const childrenArr = Array.from(container.children);
        let firstElementInView;
        let lastElementOutOfView;
        for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {
          if (isElementInView(container, childrenArr[i], false)) {
            firstElementInView = childrenArr[i];
            lastElementOutOfView = childrenArr[i - 1];
          }
        }
        if (lastElementOutOfView) {
          if (this.direction === "ltr") {
            container.scrollLeft -= lastElementOutOfView.scrollWidth;
          } else {
            container.scrollLeft += lastElementOutOfView.scrollWidth;
          }
        }
        this.handleScrollButtons();
      }
    };
    this.scrollForward = () => {
      const container = this.navList.current;
      if (container) {
        const childrenArr = Array.from(container.children);
        let lastElementInView;
        let firstElementOutOfView;
        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {
          if (isElementInView(container, childrenArr[i], false)) {
            lastElementInView = childrenArr[i];
            firstElementOutOfView = childrenArr[i + 1];
          }
        }
        if (firstElementOutOfView) {
          if (this.direction === "ltr") {
            container.scrollLeft += firstElementOutOfView.scrollWidth;
          } else {
            container.scrollLeft -= firstElementOutOfView.scrollWidth;
          }
        }
        this.handleScrollButtons();
      }
    };
  }
  componentDidMount() {
    this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons, true);
    this.direction = getLanguageDirection(this.navList.current);
    this.handleScrollButtons();
  }
  componentWillUnmount() {
    this.observer();
  }
  componentDidUpdate() {
    this.direction = getLanguageDirection(this.navList.current);
  }
  render() {
    const _a = this.props, { children, className, ariaLeftScroll, ariaRightScroll, backScrollAriaLabel, forwardScrollAriaLabel } = _a, props = __rest(_a, ["children", "className", "ariaLeftScroll", "ariaRightScroll", "backScrollAriaLabel", "forwardScrollAriaLabel"]);
    const { scrollViewAtStart, scrollViewAtEnd } = this.state;
    return React246.createElement(NavContext.Consumer, null, ({ isHorizontal }) => React246.createElement(PageSidebarContext.Consumer, null, ({ isSidebarOpen }) => React246.createElement(
      React246.Fragment,
      null,
      isHorizontal && React246.createElement(
        "button",
        { className: css(nav_default.navScrollButton), "aria-label": backScrollAriaLabel || ariaLeftScroll, onClick: this.scrollBack, disabled: scrollViewAtStart, tabIndex: isSidebarOpen ? null : -1 },
        React246.createElement(angle_left_icon_default, null)
      ),
      React246.createElement("ul", Object.assign({ ref: this.navList, className: css(nav_default.navList, className), onScroll: this.handleScrollButtons, role: "list" }, props), children),
      isHorizontal && React246.createElement(
        "button",
        { className: css(nav_default.navScrollButton), "aria-label": forwardScrollAriaLabel || ariaRightScroll, onClick: this.scrollForward, disabled: scrollViewAtEnd, tabIndex: isSidebarOpen ? null : -1 },
        React246.createElement(angle_right_icon_default, null)
      )
    )));
  }
};
NavList.displayName = "NavList";
NavList.contextType = NavContext;
NavList.defaultProps = {
  ariaLeftScroll: "Scroll left",
  backScrollAriaLabel: "Scroll back",
  ariaRightScroll: "Scroll right",
  forwardScrollAriaLabel: "Scroll foward"
};

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavGroup.js
init_tslib_es6();
var React247 = __toESM(require_react());
var NavGroup = (_a) => {
  var { title, children = null, className = "", id = getUniqueId() } = _a, props = __rest(_a, ["title", "children", "className", "id"]);
  if (!title && !props["aria-label"]) {
    console.warn("For accessibility reasons an aria-label should be specified on nav groups if a title isn't");
  }
  const labelledBy = title ? id : void 0;
  return React247.createElement(
    "section",
    Object.assign({ className: css(nav_default.navSection, className), "aria-labelledby": labelledBy }, props),
    title && React247.createElement("h2", { className: css(nav_default.navSectionTitle), id }, title),
    React247.createElement("ul", { className: css(nav_default.navList, className), role: "list" }, children)
  );
};
NavGroup.displayName = "NavGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItem.js
init_tslib_es6();
var React248 = __toESM(require_react());
var NavItem = (_a) => {
  var { children, styleChildren = true, className, to, isActive = false, groupId = null, itemId = null, preventDefault = false, onClick, component = "a", flyout, onShowFlyout, ouiaId, ouiaSafe, zIndex = 9999, hasNavLinkWrapper } = _a, props = __rest(_a, ["children", "styleChildren", "className", "to", "isActive", "groupId", "itemId", "preventDefault", "onClick", "component", "flyout", "onShowFlyout", "ouiaId", "ouiaSafe", "zIndex", "hasNavLinkWrapper"]);
  const { flyoutRef, setFlyoutRef, navRef } = React248.useContext(NavContext);
  const { isSidebarOpen } = React248.useContext(PageSidebarContext);
  const [flyoutTarget, setFlyoutTarget] = React248.useState(null);
  const [isHovered, setIsHovered] = React248.useState(false);
  const ref = React248.useRef();
  const flyoutVisible = ref === flyoutRef;
  const popperRef = React248.useRef();
  const hasFlyout = flyout !== void 0;
  const Component44 = hasFlyout ? "button" : component;
  if (to && hasFlyout) {
    console.error('NavItem cannot have both "to" and "flyout" props.');
  }
  const showFlyout = (show, override) => {
    if ((!flyoutVisible || override) && show) {
      setFlyoutRef(ref);
    } else if ((flyoutVisible || override) && !show) {
      setFlyoutRef(null);
    }
    onShowFlyout && show && onShowFlyout();
  };
  const onMouseOver = (event) => {
    const evtContainedInFlyout = event.target.closest(`.${nav_default.navItem}.pf-m-flyout`);
    if (hasFlyout && !flyoutVisible) {
      showFlyout(true);
    } else if (flyoutRef !== null && !evtContainedInFlyout) {
      setFlyoutRef(null);
    }
  };
  const onFlyoutClick = (event) => {
    const target = event.target;
    const closestItem = target.closest(".pf-m-flyout");
    if (!closestItem) {
      if (hasFlyout) {
        showFlyout(false, true);
      } else if (flyoutRef !== null) {
        setFlyoutRef(null);
      }
    }
  };
  const handleFlyout = (event) => {
    var _a2, _b;
    const key = event.key;
    const target = event.target;
    if ((key === " " || key === "Enter" || key === "ArrowRight") && hasFlyout && ((_a2 = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a2 === void 0 ? void 0 : _a2.contains(target))) {
      event.stopPropagation();
      event.preventDefault();
      if (!flyoutVisible) {
        showFlyout(true);
        setFlyoutTarget(target);
      }
    }
    if ((key === "Escape" || key === "ArrowLeft") && ((_b = popperRef === null || popperRef === void 0 ? void 0 : popperRef.current) === null || _b === void 0 ? void 0 : _b.querySelectorAll(`.${nav_default.menu}`).length) === 1) {
      if (flyoutVisible) {
        event.stopPropagation();
        event.preventDefault();
        showFlyout(false);
      }
    }
  };
  React248.useEffect(() => {
    if (hasFlyout) {
      window.addEventListener("click", onFlyoutClick);
    }
    return () => {
      if (hasFlyout) {
        window.removeEventListener("click", onFlyoutClick);
      }
    };
  }, []);
  React248.useEffect(() => {
    if (flyoutTarget) {
      if (flyoutVisible) {
        const flyoutItems = Array.from(popperRef.current.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(nav_default.divider)));
        flyoutItems[0].firstChild.focus();
      } else {
        flyoutTarget.focus();
      }
    }
  }, [flyoutVisible, flyoutTarget]);
  const flyoutButton = React248.createElement(
    "span",
    { className: css(nav_default.navToggle) },
    React248.createElement(
      "span",
      { className: css(nav_default.navToggleIcon) },
      React248.createElement(angle_right_icon_default, { "aria-hidden": true })
    )
  );
  const ariaFlyoutProps = {
    "aria-haspopup": "menu",
    "aria-expanded": flyoutVisible
  };
  const tabIndex = isSidebarOpen ? null : -1;
  const renderDefaultLink = (context) => {
    const preventLinkDefault = preventDefault || !to;
    return React248.createElement(
      Component44,
      Object.assign({ href: to, onClick: (e) => context.onSelect(e, groupId, itemId, to, preventLinkDefault, onClick), className: css(nav_default.navLink, isActive && nav_default.modifiers.current, isHovered && nav_default.modifiers.hover, className), "aria-current": isActive ? "page" : null, tabIndex }, hasFlyout && Object.assign({}, ariaFlyoutProps), props),
      hasNavLinkWrapper ? React248.createElement("span", { className: css(`${nav_default.nav}__link-text`) }, children) : children,
      flyout && flyoutButton
    );
  };
  const renderClonedChild = (context, child) => React248.cloneElement(child, Object.assign(Object.assign({ onClick: (e) => context.onSelect(e, groupId, itemId, to, preventDefault, onClick), "aria-current": isActive ? "page" : null }, styleChildren && {
    className: css(nav_default.navLink, isActive && nav_default.modifiers.current, child.props && child.props.className)
  }), { tabIndex: child.props.tabIndex || tabIndex, children: hasFlyout ? React248.createElement(
    React248.Fragment,
    null,
    child.props.children,
    flyoutButton
  ) : child.props.children }));
  const ouiaProps = useOUIAProps(NavItem.displayName, ouiaId, ouiaSafe);
  const handleMouseEnter = () => {
    setIsHovered(true);
  };
  const handleMouseLeave = () => {
    setIsHovered(false);
  };
  const flyoutPopper = React248.createElement(Popper, { triggerRef: ref, popper: React248.createElement("div", { ref: popperRef, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave }, flyout), popperRef, placement: "right-start", isVisible: flyoutVisible, onDocumentKeyDown: handleFlyout, zIndex, appendTo: navRef === null || navRef === void 0 ? void 0 : navRef.current });
  const navItem = React248.createElement(
    React248.Fragment,
    null,
    React248.createElement(
      "li",
      Object.assign({ onMouseOver, className: css(nav_default.navItem, hasFlyout && nav_default.modifiers.flyout, className), ref }, ouiaProps),
      React248.createElement(NavContext.Consumer, null, (context) => React248.isValidElement(children) ? renderClonedChild(context, children) : renderDefaultLink(context))
    ),
    flyout && flyoutPopper
  );
  return navItem;
};
NavItem.displayName = "NavItem";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItemSeparator.js
init_tslib_es6();
var React249 = __toESM(require_react());
var NavItemSeparator = (_a) => {
  var { component = "li" } = _a, props = __rest(_a, ["component"]);
  return React249.createElement(Divider, Object.assign({ component }, props));
};
NavItemSeparator.displayName = "NavItemSeparator";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavExpandable.js
init_tslib_es6();
var React250 = __toESM(require_react());
var NavExpandable = class _NavExpandable extends React250.Component {
  constructor() {
    super(...arguments);
    this.id = this.props.id || getUniqueId();
    this.state = {
      expandedState: this.props.isExpanded,
      ouiaStateId: getDefaultOUIAId(_NavExpandable.displayName)
    };
    this.onExpand = (event, onToggle) => {
      const { expandedState } = this.state;
      if (this.props.onExpand) {
        this.props.onExpand(event, !expandedState);
      } else {
        this.setState((prevState) => ({ expandedState: !prevState.expandedState }));
        const { groupId } = this.props;
        onToggle(event, groupId, !expandedState);
      }
    };
  }
  componentDidMount() {
    this.setState({ expandedState: this.props.isExpanded });
  }
  componentDidUpdate(prevProps) {
    if (this.props.isExpanded !== prevProps.isExpanded) {
      this.setState({ expandedState: this.props.isExpanded });
    }
  }
  render() {
    const _a = this.props, {
      title,
      srText,
      children,
      className,
      isActive,
      ouiaId,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      groupId,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      id,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      isExpanded,
      buttonProps,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onExpand
    } = _a, props = __rest(_a, ["title", "srText", "children", "className", "isActive", "ouiaId", "groupId", "id", "isExpanded", "buttonProps", "onExpand"]);
    const { expandedState, ouiaStateId } = this.state;
    return React250.createElement(NavContext.Consumer, null, (context) => React250.createElement(
      "li",
      Object.assign({ className: css(nav_default.navItem, nav_default.modifiers.expandable, expandedState && nav_default.modifiers.expanded, isActive && nav_default.modifiers.current, className) }, getOUIAProps(_NavExpandable.displayName, ouiaId !== void 0 ? ouiaId : ouiaStateId), props),
      React250.createElement(PageSidebarContext.Consumer, null, ({ isSidebarOpen }) => React250.createElement(
        "button",
        Object.assign({ className: css(nav_default.navLink), id: srText ? null : this.id, onClick: (event) => this.onExpand(event, context.onToggle), "aria-expanded": expandedState, tabIndex: isSidebarOpen ? null : -1 }, buttonProps),
        typeof title !== "string" ? React250.createElement("span", { className: css(`${nav_default.nav}__link-text`) }, title) : title,
        React250.createElement(
          "span",
          { className: css(nav_default.navToggle) },
          React250.createElement(
            "span",
            { className: css(nav_default.navToggleIcon) },
            React250.createElement(angle_right_icon_default, { "aria-hidden": "true" })
          )
        )
      )),
      React250.createElement(
        "section",
        { className: css(nav_default.navSubnav), "aria-labelledby": this.id, hidden: expandedState ? null : true },
        srText && React250.createElement("h2", { className: "pf-v5-screen-reader", id: this.id }, srText),
        React250.createElement("ul", { className: css(nav_default.navList), role: "list" }, children)
      )
    ));
  }
};
NavExpandable.displayName = "NavExpandable";
NavExpandable.defaultProps = {
  srText: "",
  isExpanded: false,
  children: "",
  className: "",
  groupId: null,
  isActive: false,
  id: ""
};

// node_modules/@patternfly/react-core/dist/esm/components/NotificationBadge/NotificationBadge.js
init_tslib_es6();
var React251 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/NotificationBadge/notification-badge.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/NotificationBadge/notification-badge.css";
var notification_badge_default = {
  "iconAttentionBell": "pf-v5-c-icon-attention-bell",
  "iconBell": "pf-v5-c-icon-bell",
  "modifiers": {
    "read": "pf-m-read",
    "unread": "pf-m-unread",
    "attention": "pf-m-attention",
    "expanded": "pf-m-expanded"
  },
  "notificationBadge": "pf-v5-c-notification-badge",
  "notificationBadgeCount": "pf-v5-c-notification-badge__count",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-icons/dist/esm/icons/attention-bell-icon.js
var AttentionBellIconConfig = {
  name: "AttentionBellIcon",
  height: 1024,
  width: 896,
  svgPath: "M448,0 C465.333333,0 480.333333,6.33333333 493,19 C505.666667,31.6666667 512,46.6666667 512,64 L512,106 L514.23,106.45 C587.89,121.39 648.48,157.24 696,214 C744,271.333333 768,338.666667 768,416 C768,500 780,568.666667 804,622 C818.666667,652.666667 841.333333,684 872,716 C873.773676,718.829136 875.780658,721.505113 878,724 C890,737.333333 896,752.333333 896,769 C896,785.666667 890,800.333333 878,813 C866,825.666667 850.666667,832 832,832 L63.3,832 C44.9533333,831.84 29.8533333,825.506667 18,813 C6,800.333333 0,785.666667 0,769 C0,752.333333 6,737.333333 18,724 L24,716 L25.06,714.9 C55.1933333,683.28 77.5066667,652.313333 92,622 C116,568.666667 128,500 128,416 C128,338.666667 152,271.333333 200,214 C248,156.666667 309.333333,120.666667 384,106 L384,63.31 C384.166667,46.27 390.5,31.5 403,19 C415.666667,6.33333333 430.666667,0 448,0 Z M576,896 L576,897.08 C575.74,932.6 563.073333,962.573333 538,987 C512.666667,1011.66667 482.666667,1024 448,1024 C413.333333,1024 383.333333,1011.66667 358,987 C332.666667,962.333333 320,932 320,896 L576,896 Z M475,192 L421,192 C400.565464,192 384,208.565464 384,229 L384,539 C384,559.434536 400.565464,576 421,576 L475,576 C495.434536,576 512,559.434536 512,539 L512,229 C512,208.565464 495.434536,192 475,192 Z M448,640 C412.653776,640 384,668.653776 384,704 C384,739.346224 412.653776,768 448,768 C483.346224,768 512,739.346224 512,704 C512,668.653776 483.346224,640 448,640 Z",
  yOffset: 0,
  xOffset: 0
};
var AttentionBellIcon = createIcon(AttentionBellIconConfig);
var attention_bell_icon_default = AttentionBellIcon;

// node_modules/@patternfly/react-core/dist/esm/components/NotificationBadge/NotificationBadge.js
var NotificationBadgeVariant;
(function(NotificationBadgeVariant2) {
  NotificationBadgeVariant2["read"] = "read";
  NotificationBadgeVariant2["unread"] = "unread";
  NotificationBadgeVariant2["attention"] = "attention";
})(NotificationBadgeVariant || (NotificationBadgeVariant = {}));
var NotificationBadge = (_a) => {
  var { children, variant = NotificationBadgeVariant.read, count = 0, attentionIcon = React251.createElement(attention_bell_icon_default, null), icon = React251.createElement(bell_icon_default, null), className, isExpanded = false } = _a, props = __rest(_a, ["children", "variant", "count", "attentionIcon", "icon", "className", "isExpanded"]);
  let notificationChild = icon;
  if (children !== void 0) {
    notificationChild = children;
  } else if (variant === NotificationBadgeVariant.attention) {
    notificationChild = attentionIcon;
  }
  return React251.createElement(
    Button,
    Object.assign({ variant: ButtonVariant.plain, className, "aria-expanded": isExpanded }, props),
    React251.createElement(
      "span",
      { className: css(notification_badge_default.notificationBadge, notification_badge_default.modifiers[variant], isExpanded && notification_badge_default.modifiers.expanded) },
      notificationChild,
      count > 0 && React251.createElement("span", { className: css(notification_badge_default.notificationBadgeCount) }, count)
    )
  );
};
NotificationBadge.displayName = "NotificationBadge";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawer.js
init_tslib_es6();
var React252 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer.css";
var notification_drawer_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "read": "pf-m-read",
    "info": "pf-m-info",
    "warning": "pf-m-warning",
    "danger": "pf-m-danger",
    "success": "pf-m-success",
    "custom": "pf-m-custom",
    "hoverable": "pf-m-hoverable",
    "truncate": "pf-m-truncate",
    "expanded": "pf-m-expanded"
  },
  "notificationDrawer": "pf-v5-c-notification-drawer",
  "notificationDrawerBody": "pf-v5-c-notification-drawer__body",
  "notificationDrawerGroup": "pf-v5-c-notification-drawer__group",
  "notificationDrawerGroupList": "pf-v5-c-notification-drawer__group-list",
  "notificationDrawerGroupToggle": "pf-v5-c-notification-drawer__group-toggle",
  "notificationDrawerGroupToggleCount": "pf-v5-c-notification-drawer__group-toggle-count",
  "notificationDrawerGroupToggleIcon": "pf-v5-c-notification-drawer__group-toggle-icon",
  "notificationDrawerGroupToggleTitle": "pf-v5-c-notification-drawer__group-toggle-title",
  "notificationDrawerHeader": "pf-v5-c-notification-drawer__header",
  "notificationDrawerHeaderAction": "pf-v5-c-notification-drawer__header-action",
  "notificationDrawerHeaderStatus": "pf-v5-c-notification-drawer__header-status",
  "notificationDrawerHeaderTitle": "pf-v5-c-notification-drawer__header-title",
  "notificationDrawerListItem": "pf-v5-c-notification-drawer__list-item",
  "notificationDrawerListItemAction": "pf-v5-c-notification-drawer__list-item-action",
  "notificationDrawerListItemDescription": "pf-v5-c-notification-drawer__list-item-description",
  "notificationDrawerListItemHeader": "pf-v5-c-notification-drawer__list-item-header",
  "notificationDrawerListItemHeaderIcon": "pf-v5-c-notification-drawer__list-item-header-icon",
  "notificationDrawerListItemHeaderTitle": "pf-v5-c-notification-drawer__list-item-header-title",
  "notificationDrawerListItemTimestamp": "pf-v5-c-notification-drawer__list-item-timestamp",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawer.js
var NotificationDrawerBase = (_a) => {
  var { children, className = "", innerRef } = _a, props = __rest(_a, ["children", "className", "innerRef"]);
  return React252.createElement("div", Object.assign({ ref: innerRef }, props, { className: css(notification_drawer_default.notificationDrawer, className) }), children);
};
var NotificationDrawer = React252.forwardRef((props, ref) => React252.createElement(NotificationDrawerBase, Object.assign({ innerRef: ref }, props)));
NotificationDrawer.displayName = "NotificationDrawer";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerBody.js
init_tslib_es6();
var React253 = __toESM(require_react());
var NotificationDrawerBody = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React253.createElement("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerBody, className) }), children);
};
NotificationDrawerBody.displayName = "NotificationDrawerBody";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroup.js
init_tslib_es6();
var React254 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines.js
var c_notification_drawer__group_toggle_title_max_lines = {
  "name": "--pf-v5-c-notification-drawer__group-toggle-title--max-lines",
  "value": "1",
  "var": "var(--pf-v5-c-notification-drawer__group-toggle-title--max-lines)"
};
var c_notification_drawer_group_toggle_title_max_lines_default = c_notification_drawer__group_toggle_title_max_lines;

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroup.js
var NotificationDrawerGroup = (_a) => {
  var {
    children,
    className = "",
    count,
    isExpanded,
    isRead = false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onExpand = (event, expanded) => void 0,
    title,
    truncateTitle = 0,
    tooltipPosition,
    headingLevel: HeadingLevel = "h1"
  } = _a, props = __rest(_a, ["children", "className", "count", "isExpanded", "isRead", "onExpand", "title", "truncateTitle", "tooltipPosition", "headingLevel"]);
  const titleRef = React254.useRef(null);
  const [isTooltipVisible, setIsTooltipVisible] = React254.useState(false);
  React254.useEffect(() => {
    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
    if (isTooltipVisible !== showTooltip) {
      setIsTooltipVisible(showTooltip);
    }
    if (!titleRef.current || !truncateTitle) {
      return;
    }
    titleRef.current.style.setProperty(c_notification_drawer_group_toggle_title_max_lines_default.name, truncateTitle.toString());
  }, [titleRef, truncateTitle, isTooltipVisible]);
  const Title2 = React254.createElement("div", Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(notification_drawer_default.notificationDrawerGroupToggleTitle) }), title);
  return React254.createElement(
    "section",
    Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerGroup, isExpanded && notification_drawer_default.modifiers.expanded, className) }),
    React254.createElement(
      HeadingLevel,
      null,
      React254.createElement(
        "button",
        { className: css(notification_drawer_default.notificationDrawerGroupToggle), "aria-expanded": isExpanded, onClick: (e) => onExpand(e, !isExpanded), onKeyDown: (e) => {
          if (e.key === "Enter" || e.key === " ") {
            e.preventDefault();
            onExpand(e, !isExpanded);
          }
        } },
        isTooltipVisible ? React254.createElement(Tooltip, { content: title, position: tooltipPosition }, Title2) : Title2,
        React254.createElement(
          "div",
          { className: css(notification_drawer_default.notificationDrawerGroupToggleCount) },
          React254.createElement(Badge, { isRead }, count)
        ),
        React254.createElement(
          "span",
          { className: notification_drawer_default.notificationDrawerGroupToggleIcon },
          React254.createElement(angle_right_icon_default, null)
        )
      )
    ),
    children
  );
};
NotificationDrawerGroup.displayName = "NotificationDrawerGroup";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroupList.js
init_tslib_es6();
var React255 = __toESM(require_react());
var NotificationDrawerGroupList = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React255.createElement("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerGroupList, className) }), children);
};
NotificationDrawerGroupList.displayName = "NotificationDrawerGroupList";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerHeader.js
init_tslib_es6();
var React260 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Text/TextContent.js
init_tslib_es6();
var React256 = __toESM(require_react());
var TextContent = (_a) => {
  var { children, className = "", isVisited = false } = _a, props = __rest(_a, ["children", "className", "isVisited"]);
  return React256.createElement("div", Object.assign({}, props, { className: css(content_default.content, isVisited && content_default.modifiers.visited, className) }), children);
};
TextContent.displayName = "TextContent";

// node_modules/@patternfly/react-core/dist/esm/components/Text/Text.js
init_tslib_es6();
var React257 = __toESM(require_react());
var TextVariants;
(function(TextVariants2) {
  TextVariants2["h1"] = "h1";
  TextVariants2["h2"] = "h2";
  TextVariants2["h3"] = "h3";
  TextVariants2["h4"] = "h4";
  TextVariants2["h5"] = "h5";
  TextVariants2["h6"] = "h6";
  TextVariants2["p"] = "p";
  TextVariants2["a"] = "a";
  TextVariants2["small"] = "small";
  TextVariants2["blockquote"] = "blockquote";
  TextVariants2["pre"] = "pre";
})(TextVariants || (TextVariants = {}));
var Text = (_a) => {
  var { children = null, className = "", component = TextVariants.p, isVisitedLink = false, ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["children", "className", "component", "isVisitedLink", "ouiaId", "ouiaSafe"]);
  const Component44 = component;
  const ouiaProps = useOUIAProps(Text.displayName, ouiaId, ouiaSafe);
  return React257.createElement(Component44, Object.assign({}, ouiaProps, props, { "data-pf-content": true, className: css(isVisitedLink && component === TextVariants.a && content_default.modifiers.visited, className) }), children);
};
Text.displayName = "Text";

// node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js
init_tslib_es6();
var React258 = __toESM(require_react());
var TextListVariants;
(function(TextListVariants2) {
  TextListVariants2["ul"] = "ul";
  TextListVariants2["ol"] = "ol";
  TextListVariants2["dl"] = "dl";
})(TextListVariants || (TextListVariants = {}));
var TextList = (_a) => {
  var { children = null, className = "", component = TextListVariants.ul, isPlain = false } = _a, props = __rest(_a, ["children", "className", "component", "isPlain"]);
  const Component44 = component;
  return React258.createElement(Component44, Object.assign({}, props, { className: css(isPlain && content_default.modifiers.plain, className) }), children);
};
TextList.displayName = "TextList";

// node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js
init_tslib_es6();
var React259 = __toESM(require_react());
var TextListItemVariants;
(function(TextListItemVariants2) {
  TextListItemVariants2["li"] = "li";
  TextListItemVariants2["dt"] = "dt";
  TextListItemVariants2["dd"] = "dd";
})(TextListItemVariants || (TextListItemVariants = {}));
var TextListItem = (_a) => {
  var { children = null, className = "", component = TextListItemVariants.li } = _a, props = __rest(_a, ["children", "className", "component"]);
  const Component44 = component;
  return React259.createElement(Component44, Object.assign({}, props, { className: css(className) }), children);
};
TextListItem.displayName = "TextListItem";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerHeader.js
var NotificationDrawerHeader = (_a) => {
  var { children, className = "", count, closeButtonAriaLabel = "Close", customText, onClose, title = "Notifications", unreadText = "unread" } = _a, props = __rest(_a, ["children", "className", "count", "closeButtonAriaLabel", "customText", "onClose", "title", "unreadText"]);
  return React260.createElement(
    "div",
    Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerHeader, className) }),
    React260.createElement(Text, { component: TextVariants.h1, className: css(notification_drawer_default.notificationDrawerHeaderTitle) }, title),
    (customText !== void 0 || count !== void 0) && React260.createElement("span", { className: css(notification_drawer_default.notificationDrawerHeaderStatus), "aria-live": "polite" }, customText || `${count} ${unreadText}`),
    (children || onClose) && React260.createElement(
      "div",
      { className: css(notification_drawer_default.notificationDrawerHeaderAction) },
      children,
      onClose && React260.createElement(
        "div",
        null,
        React260.createElement(
          Button,
          { variant: ButtonVariant.plain, "aria-label": closeButtonAriaLabel, onClick: (event) => onClose(event) },
          React260.createElement(times_icon_default, { "aria-hidden": "true" })
        )
      )
    )
  );
};
NotificationDrawerHeader.displayName = "NotificationDrawerHeader";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerList.js
init_tslib_es6();
var React261 = __toESM(require_react());
var NotificationDrawerList = (_a) => {
  var { children, className = "", isHidden: isHidden3 = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isHidden", "aria-label"]);
  return React261.createElement("ul", Object.assign({}, props, { className: css(`${notification_drawer_default.notificationDrawer}__list`, className), hidden: isHidden3, role: "list", "aria-label": ariaLabel }), children);
};
NotificationDrawerList.displayName = "NotificationDrawerList";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItem.js
init_tslib_es6();
var React262 = __toESM(require_react());
var NotificationDrawerListItem = (_a) => {
  var {
    children = null,
    className = "",
    isHoverable = true,
    isRead = false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onClick = (event) => void 0,
    readStateScreenReaderText,
    tabIndex = 0,
    variant = "custom"
  } = _a, props = __rest(_a, ["children", "className", "isHoverable", "isRead", "onClick", "readStateScreenReaderText", "tabIndex", "variant"]);
  const onKeyDown = (event) => {
    if (!event.target.parentElement.classList.contains(notification_drawer_default.notificationDrawerListItemAction)) {
      if (event.key === "Enter" || event.key === " ") {
        event.target.click();
      }
    }
  };
  let readStateSRText;
  if (readStateScreenReaderText) {
    readStateSRText = readStateScreenReaderText;
  } else {
    readStateSRText = isRead ? "read" : "unread";
  }
  return React262.createElement(
    "li",
    Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItem, isHoverable && notification_drawer_default.modifiers.hoverable, notification_drawer_default.modifiers[variant], isRead && notification_drawer_default.modifiers.read, className), tabIndex, onClick: (e) => onClick(e), onKeyDown }),
    React262.createElement("span", { className: "pf-v5-screen-reader" }, readStateSRText),
    children
  );
};
NotificationDrawerListItem.displayName = "NotificationDrawerListItem";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemBody.js
init_tslib_es6();
var React263 = __toESM(require_react());
var NotificationDrawerListItemBody = (_a) => {
  var { children, className = "", timestamp } = _a, props = __rest(_a, ["children", "className", "timestamp"]);
  return React263.createElement(
    React263.Fragment,
    null,
    React263.createElement("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItemDescription, className) }), children),
    timestamp && React263.createElement("div", { className: css(notification_drawer_default.notificationDrawerListItemTimestamp, className) }, timestamp)
  );
};
NotificationDrawerListItemBody.displayName = "NotificationDrawerListItemBody";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemHeader.js
init_tslib_es6();
var React264 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines.js
var c_notification_drawer__list_item_header_title_max_lines = {
  "name": "--pf-v5-c-notification-drawer__list-item-header-title--max-lines",
  "value": "1",
  "var": "var(--pf-v5-c-notification-drawer__list-item-header-title--max-lines)"
};
var c_notification_drawer_list_item_header_title_max_lines_default = c_notification_drawer__list_item_header_title_max_lines;

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemHeader.js
var variantIcons2 = {
  success: check_circle_icon_default,
  danger: exclamation_circle_icon_default,
  warning: exclamation_triangle_icon_default,
  info: info_circle_icon_default,
  custom: bell_icon_default
};
var NotificationDrawerListItemHeader = (_a) => {
  var { children, className = "", icon = null, srTitle, title, variant = "custom", truncateTitle = 0, tooltipPosition, headingLevel: HeadingLevel = "h2" } = _a, props = __rest(_a, ["children", "className", "icon", "srTitle", "title", "variant", "truncateTitle", "tooltipPosition", "headingLevel"]);
  const titleRef = React264.useRef(null);
  const [isTooltipVisible, setIsTooltipVisible] = React264.useState(false);
  React264.useEffect(() => {
    if (!titleRef.current || !truncateTitle) {
      return;
    }
    titleRef.current.style.setProperty(c_notification_drawer_list_item_header_title_max_lines_default.name, truncateTitle.toString());
    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
    if (isTooltipVisible !== showTooltip) {
      setIsTooltipVisible(showTooltip);
    }
  }, [titleRef, truncateTitle, isTooltipVisible]);
  const Icon2 = variantIcons2[variant];
  const Title2 = React264.createElement(
    HeadingLevel,
    Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(notification_drawer_default.notificationDrawerListItemHeaderTitle, truncateTitle && notification_drawer_default.modifiers.truncate) }),
    srTitle && React264.createElement("span", { className: "pf-v5-screen-reader" }, srTitle),
    title
  );
  return React264.createElement(
    React264.Fragment,
    null,
    React264.createElement(
      "div",
      Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItemHeader, className) }),
      React264.createElement("span", { className: css(notification_drawer_default.notificationDrawerListItemHeaderIcon) }, icon ? icon : React264.createElement(Icon2, null)),
      isTooltipVisible ? React264.createElement(Tooltip, { content: title, position: tooltipPosition }, Title2) : Title2
    ),
    children && React264.createElement("div", { className: css(notification_drawer_default.notificationDrawerListItemAction) }, children)
  );
};
NotificationDrawerListItemHeader.displayName = "NotificationDrawerListItemHeader";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenu.js
init_tslib_es6();
var React266 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/OverflowMenu/overflow-menu.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/OverflowMenu/overflow-menu.css";
var overflow_menu_default = {
  "divider": "pf-v5-c-divider",
  "modifiers": {
    "buttonGroup": "pf-m-button-group",
    "iconButtonGroup": "pf-m-icon-button-group",
    "vertical": "pf-m-vertical"
  },
  "overflowMenu": "pf-v5-c-overflow-menu",
  "overflowMenuContent": "pf-v5-c-overflow-menu__content",
  "overflowMenuControl": "pf-v5-c-overflow-menu__control",
  "overflowMenuGroup": "pf-v5-c-overflow-menu__group",
  "overflowMenuItem": "pf-v5-c-overflow-menu__item"
};

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuContext.js
var React265 = __toESM(require_react());
var OverflowMenuContext = React265.createContext({
  isBelowBreakpoint: false
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenu.js
var OverflowMenu = class extends React266.Component {
  constructor(props) {
    super(props);
    this.observer = () => {
    };
    this.handleResize = () => {
      const breakpointWidth = globalWidthBreakpoints[this.props.breakpoint];
      if (!breakpointWidth) {
        console.error("OverflowMenu will not be visible without a valid breakpoint.");
        return;
      }
      const relativeWidth = this.state.breakpointRef ? this.state.breakpointRef.clientWidth : window.innerWidth;
      const isBelowBreakpoint = relativeWidth < breakpointWidth;
      if (this.state.isBelowBreakpoint !== isBelowBreakpoint) {
        this.setState({ isBelowBreakpoint });
      }
    };
    this.handleResizeWithDelay = debounce(this.handleResize, 250);
    this.state = {
      isBelowBreakpoint: false,
      breakpointRef: void 0
    };
  }
  getBreakpointRef() {
    const { breakpointReference } = this.props;
    if (breakpointReference.current) {
      return breakpointReference.current;
    } else if (typeof breakpointReference === "function") {
      return breakpointReference();
    }
  }
  componentDidMount() {
    const reference2 = this.props.breakpointReference ? this.getBreakpointRef() : void 0;
    this.setState({ breakpointRef: reference2 });
    this.observer = getResizeObserver(reference2, this.handleResizeWithDelay);
    this.handleResize();
  }
  componentDidUpdate(prevProps, prevState) {
    const reference2 = this.props.breakpointReference ? this.getBreakpointRef() : void 0;
    if (prevState.breakpointRef !== reference2) {
      this.observer();
      this.setState({ breakpointRef: reference2 });
      this.observer = getResizeObserver(reference2, this.handleResizeWithDelay);
      this.handleResize();
    }
  }
  componentWillUnmount() {
    this.observer();
  }
  render() {
    const _a = this.props, { className, breakpoint, children, breakpointReference } = _a, props = __rest(_a, ["className", "breakpoint", "children", "breakpointReference"]);
    return React266.createElement(
      "div",
      Object.assign({}, props, { className: css(overflow_menu_default.overflowMenu, className) }),
      React266.createElement(OverflowMenuContext.Provider, { value: { isBelowBreakpoint: this.state.isBelowBreakpoint } }, children)
    );
  }
};
OverflowMenu.displayName = "OverflowMenu";
OverflowMenu.contextType = OverflowMenuContext;

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuControl.js
init_tslib_es6();
var React267 = __toESM(require_react());
var OverflowMenuControl = (_a) => {
  var { className, children, hasAdditionalOptions } = _a, props = __rest(_a, ["className", "children", "hasAdditionalOptions"]);
  return React267.createElement(OverflowMenuContext.Consumer, null, (value) => (value.isBelowBreakpoint || hasAdditionalOptions) && React267.createElement(
    "div",
    Object.assign({ className: css(overflow_menu_default.overflowMenuControl, className) }, props),
    " ",
    children,
    " "
  ));
};
OverflowMenuControl.displayName = "OverflowMenuControl";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuContent.js
var React268 = __toESM(require_react());
var OverflowMenuContent = ({ className, children, isPersistent }) => React268.createElement(OverflowMenuContext.Consumer, null, (value) => (!value.isBelowBreakpoint || isPersistent) && React268.createElement("div", { className: css(overflow_menu_default.overflowMenuContent, className) }, children));
OverflowMenuContent.displayName = "OverflowMenuContent";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuGroup.js
init_tslib_es6();
var React269 = __toESM(require_react());
var OverflowMenuGroup = (_a) => {
  var { className, children, isPersistent = false, groupType } = _a, props = __rest(_a, ["className", "children", "isPersistent", "groupType"]);
  return React269.createElement(OverflowMenuContext.Consumer, null, (value) => (isPersistent || !value.isBelowBreakpoint) && React269.createElement("div", Object.assign({ className: css(overflow_menu_default.overflowMenuGroup, groupType === "button" && overflow_menu_default.modifiers.buttonGroup, groupType === "icon" && overflow_menu_default.modifiers.iconButtonGroup, className) }, props), children));
};
OverflowMenuGroup.displayName = "OverflowMenuGroup";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuItem.js
var React270 = __toESM(require_react());
var OverflowMenuItem = ({ className, children, isPersistent = false }) => React270.createElement(OverflowMenuContext.Consumer, null, (value) => (isPersistent || !value.isBelowBreakpoint) && React270.createElement(
  "div",
  { className: css(overflow_menu_default.overflowMenuItem, className) },
  " ",
  children,
  " "
));
OverflowMenuItem.displayName = "OverflowMenuItem";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuDropdownItem.js
init_tslib_es6();
var React271 = __toESM(require_react());
var OverflowMenuDropdownItem = (_a) => {
  var { children, isShared = false, itemId } = _a, additionalProps = __rest(_a, ["children", "isShared", "itemId"]);
  return React271.createElement(OverflowMenuContext.Consumer, null, (value) => (!isShared || value.isBelowBreakpoint) && React271.createElement(DropdownItem, Object.assign({ component: "button", value: itemId }, additionalProps), children));
};
OverflowMenuDropdownItem.displayName = "OverflowMenuDropdownItem";

// node_modules/@patternfly/react-core/dist/esm/components/Page/Page.js
init_tslib_es6();
var React273 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageGroup.js
init_tslib_es6();
var React272 = __toESM(require_react());
var PageGroup = (_a) => {
  var { className = "", children, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label"]);
  const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = React272.useContext(PageContext);
  React272.useEffect(() => {
    if (hasOverflowScroll && !ariaLabel) {
      console.warn("PageGroup: An accessible aria-label is required when hasOverflowScroll is set to true.");
    }
  }, [hasOverflowScroll, ariaLabel]);
  return React272.createElement("div", Object.assign({}, props, { className: css(page_default.pageMainGroup, formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0, role: "region", "aria-label": ariaLabel }), children);
};
PageGroup.displayName = "PageGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Page/Page.js
var PageLayouts;
(function(PageLayouts2) {
  PageLayouts2["vertical"] = "vertical";
  PageLayouts2["horizontal"] = "horizontal";
})(PageLayouts || (PageLayouts = {}));
var Page = class extends React273.Component {
  constructor(props) {
    super(props);
    this.mainRef = React273.createRef();
    this.pageRef = React273.createRef();
    this.observer = () => {
    };
    this.getWindowWidth = () => {
      if (canUseDOM) {
        return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;
      } else {
        return 1200;
      }
    };
    this.isMobile = () => (
      // eslint-disable-next-line radix
      this.getWindowWidth() < Number.parseInt(global_breakpoint_xl_default.value, 10)
    );
    this.resize = (_event) => {
      var _a;
      const { onPageResize } = this.props;
      const mobileView = this.isMobile();
      if (onPageResize) {
        onPageResize(_event, { mobileView, windowSize: this.getWindowWidth() });
      }
      if (mobileView !== this.state.mobileView) {
        this.setState({ mobileView });
      }
      if ((_a = this.pageRef) === null || _a === void 0 ? void 0 : _a.current) {
        const currentWidth = this.pageRef.current.clientWidth;
        const currentHeight = this.pageRef.current.clientHeight;
        if (this.state.width !== currentWidth) {
          this.setState({ width: currentWidth });
        }
        if (this.state.height !== currentHeight) {
          this.setState({ height: currentHeight });
        }
      }
    };
    this.handleResize = debounce(this.resize, 250);
    this.handleMainClick = () => {
      if (this.isMobile() && this.state.mobileIsSidebarOpen && this.mainRef.current) {
        this.setState({ mobileIsSidebarOpen: false });
      }
    };
    this.onSidebarToggleMobile = () => {
      this.setState((prevState) => ({
        mobileIsSidebarOpen: !prevState.mobileIsSidebarOpen
      }));
    };
    this.onSidebarToggleDesktop = () => {
      this.setState((prevState) => ({
        desktopIsSidebarOpen: !prevState.desktopIsSidebarOpen
      }));
    };
    const { isManagedSidebar, defaultManagedSidebarIsOpen } = props;
    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;
    this.state = {
      desktopIsSidebarOpen: managedSidebarOpen,
      mobileIsSidebarOpen: false,
      mobileView: false,
      width: null,
      height: null
    };
  }
  componentDidMount() {
    const { isManagedSidebar, onPageResize } = this.props;
    if (isManagedSidebar || onPageResize) {
      this.observer = getResizeObserver(this.pageRef.current, this.handleResize);
      const currentRef = this.mainRef.current;
      if (currentRef) {
        currentRef.addEventListener("mousedown", this.handleMainClick);
        currentRef.addEventListener("touchstart", this.handleMainClick);
      }
      this.resize();
    }
  }
  componentWillUnmount() {
    const { isManagedSidebar, onPageResize } = this.props;
    if (isManagedSidebar || onPageResize) {
      this.observer();
      const currentRef = this.mainRef.current;
      if (currentRef) {
        currentRef.removeEventListener("mousedown", this.handleMainClick);
        currentRef.removeEventListener("touchstart", this.handleMainClick);
      }
    }
  }
  render() {
    const _a = this.props, {
      breadcrumb,
      isBreadcrumbWidthLimited,
      className,
      children,
      header,
      sidebar,
      notificationDrawer,
      isNotificationDrawerExpanded,
      onNotificationDrawerExpand,
      isTertiaryNavWidthLimited,
      skipToContent,
      role,
      mainContainerId,
      isManagedSidebar,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      defaultManagedSidebarIsOpen,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onPageResize,
      getBreakpoint: getBreakpoint2,
      getVerticalBreakpoint: getVerticalBreakpoint2,
      mainAriaLabel,
      mainTabIndex,
      mainComponent,
      tertiaryNav,
      isTertiaryNavGrouped,
      isBreadcrumbGrouped,
      additionalGroupedContent,
      groupProps,
      breadcrumbProps
    } = _a, rest = __rest(_a, ["breadcrumb", "isBreadcrumbWidthLimited", "className", "children", "header", "sidebar", "notificationDrawer", "isNotificationDrawerExpanded", "onNotificationDrawerExpand", "isTertiaryNavWidthLimited", "skipToContent", "role", "mainContainerId", "isManagedSidebar", "defaultManagedSidebarIsOpen", "onPageResize", "getBreakpoint", "getVerticalBreakpoint", "mainAriaLabel", "mainTabIndex", "mainComponent", "tertiaryNav", "isTertiaryNavGrouped", "isBreadcrumbGrouped", "additionalGroupedContent", "groupProps", "breadcrumbProps"]);
    const { mobileView, mobileIsSidebarOpen, desktopIsSidebarOpen, width, height } = this.state;
    const context = {
      isManagedSidebar,
      onSidebarToggle: mobileView ? this.onSidebarToggleMobile : this.onSidebarToggleDesktop,
      isSidebarOpen: mobileView ? mobileIsSidebarOpen : desktopIsSidebarOpen,
      width,
      height,
      getBreakpoint: getBreakpoint2,
      getVerticalBreakpoint: getVerticalBreakpoint2
    };
    let nav = null;
    if (tertiaryNav && isTertiaryNavWidthLimited) {
      nav = React273.createElement(
        "div",
        { className: css(page_default.pageMainNav, page_default.modifiers.limitWidth) },
        React273.createElement("div", { className: css(page_default.pageMainBody) }, tertiaryNav)
      );
    } else if (tertiaryNav) {
      nav = React273.createElement("div", { className: css(page_default.pageMainNav) }, tertiaryNav);
    }
    const crumb = breadcrumb ? React273.createElement("section", { className: css(page_default.pageMainBreadcrumb, isBreadcrumbWidthLimited && page_default.modifiers.limitWidth, formatBreakpointMods(breadcrumbProps === null || breadcrumbProps === void 0 ? void 0 : breadcrumbProps.stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true)) }, isBreadcrumbWidthLimited ? React273.createElement("div", { className: css(page_default.pageMainBody) }, breadcrumb) : breadcrumb) : null;
    const isGrouped = isTertiaryNavGrouped || isBreadcrumbGrouped || additionalGroupedContent;
    const group = isGrouped ? React273.createElement(
      PageGroup,
      Object.assign({}, groupProps),
      isTertiaryNavGrouped && nav,
      isBreadcrumbGrouped && crumb,
      additionalGroupedContent
    ) : null;
    const Component44 = mainComponent;
    const main2 = React273.createElement(
      Component44,
      { ref: this.mainRef, role, id: mainContainerId, className: css(page_default.pageMain), tabIndex: mainTabIndex, "aria-label": mainAriaLabel },
      group,
      !isTertiaryNavGrouped && nav,
      !isBreadcrumbGrouped && crumb,
      children
    );
    const panelContent = React273.createElement(DrawerPanelContent, null, notificationDrawer);
    return React273.createElement(
      PageContextProvider,
      { value: context },
      React273.createElement(
        "div",
        Object.assign({ ref: this.pageRef }, rest, { className: css(page_default.page, width !== null && height !== null && "pf-m-resize-observer", width !== null && `pf-m-breakpoint-${getBreakpoint2(width)}`, height !== null && `pf-m-height-breakpoint-${getVerticalBreakpoint2(height)}`, className) }),
        skipToContent,
        header,
        sidebar,
        notificationDrawer && React273.createElement(
          "div",
          { className: css(page_default.pageDrawer) },
          React273.createElement(
            Drawer,
            { isExpanded: isNotificationDrawerExpanded, onExpand: (event) => onNotificationDrawerExpand(event) },
            React273.createElement(
              DrawerContent,
              { panelContent },
              React273.createElement(DrawerContentBody, null, main2)
            )
          )
        ),
        !notificationDrawer && main2
      )
    );
  }
};
Page.displayName = "Page";
Page.defaultProps = {
  isManagedSidebar: false,
  isBreadcrumbWidthLimited: false,
  defaultManagedSidebarIsOpen: true,
  mainTabIndex: -1,
  isNotificationDrawerExpanded: false,
  onNotificationDrawerExpand: () => null,
  mainComponent: "main",
  getBreakpoint,
  getVerticalBreakpoint
};

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageBreadcrumb.js
init_tslib_es6();
var React274 = __toESM(require_react());
var PageBreadcrumb = (_a) => {
  var { className = "", children, isWidthLimited, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "isWidthLimited", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label"]);
  const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = React274.useContext(PageContext);
  React274.useEffect(() => {
    if (hasOverflowScroll && !ariaLabel) {
      console.warn("PageBreadcrumb: An accessible aria-label is required when hasOverflowScroll is set to true.");
    }
  }, [hasOverflowScroll, ariaLabel]);
  return React274.createElement(
    "section",
    Object.assign({ className: css(page_default.pageMainBreadcrumb, formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), isWidthLimited && page_default.modifiers.limitWidth, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0 }, { "aria-label": ariaLabel }, props),
    isWidthLimited && React274.createElement("div", { className: css(page_default.pageMainBody) }, children),
    !isWidthLimited && children
  );
};
PageBreadcrumb.displayName = "PageBreadcrumb";

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebarBody.js
init_tslib_es6();
var React275 = __toESM(require_react());
var PageSidebarBody = (_a) => {
  var { children, className, usePageInsets, isFilled } = _a, props = __rest(_a, ["children", "className", "usePageInsets", "isFilled"]);
  return React275.createElement("div", Object.assign({ className: css(page_default.pageSidebarBody, usePageInsets && page_default.modifiers.pageInsets, isFilled === false && page_default.modifiers.noFill, isFilled === true && page_default.modifiers.fill, className) }, props), children);
};
PageSidebarBody.displayName = "PageSidebarBody";

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSection.js
init_tslib_es6();
var React276 = __toESM(require_react());
var PageSectionVariants;
(function(PageSectionVariants2) {
  PageSectionVariants2["default"] = "default";
  PageSectionVariants2["light"] = "light";
  PageSectionVariants2["dark"] = "dark";
  PageSectionVariants2["darker"] = "darker";
})(PageSectionVariants || (PageSectionVariants = {}));
var PageSectionTypes;
(function(PageSectionTypes2) {
  PageSectionTypes2["default"] = "default";
  PageSectionTypes2["nav"] = "nav";
  PageSectionTypes2["subNav"] = "subnav";
  PageSectionTypes2["breadcrumb"] = "breadcrumb";
  PageSectionTypes2["tabs"] = "tabs";
  PageSectionTypes2["wizard"] = "wizard";
})(PageSectionTypes || (PageSectionTypes = {}));
var variantType = {
  [PageSectionTypes.default]: page_default.pageMainSection,
  [PageSectionTypes.nav]: page_default.pageMainNav,
  [PageSectionTypes.subNav]: page_default.pageMainSubnav,
  [PageSectionTypes.breadcrumb]: page_default.pageMainBreadcrumb,
  [PageSectionTypes.tabs]: page_default.pageMainTabs,
  [PageSectionTypes.wizard]: page_default.pageMainWizard
};
var variantStyle2 = {
  [PageSectionVariants.default]: "",
  [PageSectionVariants.light]: page_default.modifiers.light,
  [PageSectionVariants.dark]: page_default.modifiers.dark_200,
  [PageSectionVariants.darker]: page_default.modifiers.dark_100
};
var PageSection = (_a) => {
  var { className = "", children, variant = "default", type = "default", padding, isFilled, isWidthLimited = false, isCenterAligned = false, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel, component = "section" } = _a, props = __rest(_a, ["className", "children", "variant", "type", "padding", "isFilled", "isWidthLimited", "isCenterAligned", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label", "component"]);
  const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = React276.useContext(PageContext);
  React276.useEffect(() => {
    if (hasOverflowScroll && !ariaLabel) {
      console.warn("PageSection: An accessible aria-label is required when hasOverflowScroll is set to true.");
    }
  }, [hasOverflowScroll, ariaLabel]);
  const Component44 = component;
  return React276.createElement(
    Component44,
    Object.assign({}, props, { className: css(variantType[type], formatBreakpointMods(padding, page_default), formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), variantStyle2[variant], isFilled === false && page_default.modifiers.noFill, isFilled === true && page_default.modifiers.fill, isWidthLimited && page_default.modifiers.limitWidth, isWidthLimited && isCenterAligned && type !== PageSectionTypes.subNav && page_default.modifiers.alignCenter, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0 }, { "aria-label": ariaLabel }),
    isWidthLimited && React276.createElement("div", { className: css(page_default.pageMainBody) }, children),
    !isWidthLimited && children
  );
};
PageSection.displayName = "PageSection";

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageNavigation.js
init_tslib_es6();
var React277 = __toESM(require_react());
var PageNavigation = (_a) => {
  var { className = "", children, isWidthLimited, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "isWidthLimited", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label"]);
  const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = React277.useContext(PageContext);
  React277.useEffect(() => {
    if (hasOverflowScroll && !ariaLabel) {
      console.warn("PageNavigation: An accessible aria-label is required when hasOverflowScroll is set to true.");
    }
  }, [hasOverflowScroll, ariaLabel]);
  return React277.createElement(
    "div",
    Object.assign({ className: css(page_default.pageMainNav, formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), isWidthLimited && page_default.modifiers.limitWidth, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0, role: "region", "aria-label": ariaLabel }, props),
    isWidthLimited && React277.createElement("div", { className: css(page_default.pageMainBody) }, children),
    !isWidthLimited && children
  );
};
PageNavigation.displayName = "PageNavigation";

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageToggleButton.js
init_tslib_es6();
var React278 = __toESM(require_react());
var PageToggleButton = (_a) => {
  var { children, isSidebarOpen = true, onSidebarToggle = () => void 0, id = "nav-toggle" } = _a, props = __rest(_a, ["children", "isSidebarOpen", "onSidebarToggle", "id"]);
  return React278.createElement(PageContextConsumer, null, ({ isManagedSidebar, onSidebarToggle: managedOnSidebarToggle, isSidebarOpen: managedIsSidebarOpen }) => {
    const sidebarToggle = isManagedSidebar ? managedOnSidebarToggle : onSidebarToggle;
    const sidebarOpen = isManagedSidebar ? managedIsSidebarOpen : isSidebarOpen;
    return React278.createElement(Button, Object.assign({ id, onClick: sidebarToggle, "aria-label": "Side navigation toggle", "aria-expanded": sidebarOpen ? "true" : "false", variant: ButtonVariant.plain }, props), children);
  });
};
PageToggleButton.displayName = "PageToggleButton";

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/Pagination.js
init_tslib_es6();
var React282 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/ToggleTemplate.js
var React279 = __toESM(require_react());
var ToggleTemplate = ({ firstIndex = 0, lastIndex = 0, itemCount = 0, itemsTitle = "items", ofWord = "of" }) => React279.createElement(
  React279.Fragment,
  null,
  React279.createElement(
    "b",
    null,
    firstIndex,
    " - ",
    lastIndex
  ),
  " ",
  ofWord,
  " ",
  React279.createElement("b", null, itemCount),
  " ",
  itemsTitle
);
ToggleTemplate.displayName = "ToggleTemplate";

// node_modules/@patternfly/react-styles/css/components/Pagination/pagination.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Pagination/pagination.css";
var pagination_default = {
  "button": "pf-v5-c-button",
  "dirRtl": "pf-v5-m-dir-rtl",
  "formControl": "pf-v5-c-form-control",
  "menuToggle": "pf-v5-c-menu-toggle",
  "modifiers": {
    "bottom": "pf-m-bottom",
    "static": "pf-m-static",
    "first": "pf-m-first",
    "last": "pf-m-last",
    "sticky": "pf-m-sticky",
    "compact": "pf-m-compact",
    "pageInsets": "pf-m-page-insets",
    "displaySummary": "pf-m-display-summary",
    "displayFull": "pf-m-display-full",
    "insetNone": "pf-m-inset-none",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "displaySummaryOnSm": "pf-m-display-summary-on-sm",
    "displayFullOnSm": "pf-m-display-full-on-sm",
    "insetNoneOnSm": "pf-m-inset-none-on-sm",
    "insetSmOnSm": "pf-m-inset-sm-on-sm",
    "insetMdOnSm": "pf-m-inset-md-on-sm",
    "insetLgOnSm": "pf-m-inset-lg-on-sm",
    "insetXlOnSm": "pf-m-inset-xl-on-sm",
    "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
    "displaySummaryOnMd": "pf-m-display-summary-on-md",
    "displayFullOnMd": "pf-m-display-full-on-md",
    "insetNoneOnMd": "pf-m-inset-none-on-md",
    "insetSmOnMd": "pf-m-inset-sm-on-md",
    "insetMdOnMd": "pf-m-inset-md-on-md",
    "insetLgOnMd": "pf-m-inset-lg-on-md",
    "insetXlOnMd": "pf-m-inset-xl-on-md",
    "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
    "displaySummaryOnLg": "pf-m-display-summary-on-lg",
    "displayFullOnLg": "pf-m-display-full-on-lg",
    "insetNoneOnLg": "pf-m-inset-none-on-lg",
    "insetSmOnLg": "pf-m-inset-sm-on-lg",
    "insetMdOnLg": "pf-m-inset-md-on-lg",
    "insetLgOnLg": "pf-m-inset-lg-on-lg",
    "insetXlOnLg": "pf-m-inset-xl-on-lg",
    "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
    "displaySummaryOnXl": "pf-m-display-summary-on-xl",
    "displayFullOnXl": "pf-m-display-full-on-xl",
    "insetNoneOnXl": "pf-m-inset-none-on-xl",
    "insetSmOnXl": "pf-m-inset-sm-on-xl",
    "insetMdOnXl": "pf-m-inset-md-on-xl",
    "insetLgOnXl": "pf-m-inset-lg-on-xl",
    "insetXlOnXl": "pf-m-inset-xl-on-xl",
    "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
    "displaySummaryOn_2xl": "pf-m-display-summary-on-2xl",
    "displayFullOn_2xl": "pf-m-display-full-on-2xl",
    "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
    "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
    "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
    "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
    "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
    "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
  },
  "pagination": "pf-v5-c-pagination",
  "paginationNav": "pf-v5-c-pagination__nav",
  "paginationNavControl": "pf-v5-c-pagination__nav-control",
  "paginationNavPageSelect": "pf-v5-c-pagination__nav-page-select",
  "paginationTotalItems": "pf-v5-c-pagination__total-items",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/Navigation.js
init_tslib_es6();
var React280 = __toESM(require_react());
var Navigation = class _Navigation extends React280.Component {
  constructor(props) {
    super(props);
    this.handleNewPage = (_evt, newPage) => {
      const { perPage, onSetPage } = this.props;
      const startIdx = (newPage - 1) * perPage;
      const endIdx = newPage * perPage;
      return onSetPage(_evt, newPage, perPage, startIdx, endIdx);
    };
    this.state = { userInputPage: this.props.page };
  }
  static parseInteger(input, lastPage) {
    let inputPage = Number.parseInt(input, 10);
    if (!Number.isNaN(inputPage)) {
      inputPage = inputPage > lastPage ? lastPage : inputPage;
      inputPage = inputPage < 1 ? 1 : inputPage;
    }
    return inputPage;
  }
  onChange(event, lastPage) {
    const inputPage = _Navigation.parseInteger(event.currentTarget.value, lastPage);
    this.setState({ userInputPage: Number.isNaN(inputPage) ? event.currentTarget.value : inputPage });
  }
  onKeyDown(event, page, lastPage, onPageInput) {
    const allowedKeys = [
      "Tab",
      "Backspace",
      "Delete",
      "ArrowLeft",
      "ArrowRight",
      "Home",
      "End",
      "ArrowUp",
      "ArrowDown"
    ];
    if (event.key === KeyTypes.Enter) {
      const inputPage = _Navigation.parseInteger(this.state.userInputPage, lastPage);
      onPageInput(event, Number.isNaN(inputPage) ? page : inputPage);
      this.handleNewPage(event, Number.isNaN(inputPage) ? page : inputPage);
    } else if (!/^\d*$/.test(event.key) && !allowedKeys.includes(event.key)) {
      event.preventDefault();
    }
  }
  componentDidUpdate(lastState) {
    if (this.props.page !== lastState.page && this.props.page <= this.props.lastPage && this.state.userInputPage !== this.props.page) {
      this.setState({ userInputPage: this.props.page });
    }
  }
  render() {
    const _a = this.props, {
      page,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      perPage,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onSetPage,
      isDisabled,
      itemCount,
      lastPage,
      firstPage,
      pagesTitle,
      pagesTitlePlural,
      toLastPageAriaLabel,
      toNextPageAriaLabel,
      toFirstPageAriaLabel,
      toPreviousPageAriaLabel,
      currPageAriaLabel,
      paginationAriaLabel,
      ofWord,
      onNextClick,
      onPreviousClick,
      onFirstClick,
      onLastClick,
      onPageInput,
      className,
      isCompact
    } = _a, props = __rest(_a, ["page", "perPage", "onSetPage", "isDisabled", "itemCount", "lastPage", "firstPage", "pagesTitle", "pagesTitlePlural", "toLastPageAriaLabel", "toNextPageAriaLabel", "toFirstPageAriaLabel", "toPreviousPageAriaLabel", "currPageAriaLabel", "paginationAriaLabel", "ofWord", "onNextClick", "onPreviousClick", "onFirstClick", "onLastClick", "onPageInput", "className", "isCompact"]);
    const { userInputPage } = this.state;
    return React280.createElement(
      "nav",
      Object.assign({ className: css(pagination_default.paginationNav, className), "aria-label": paginationAriaLabel }, props),
      !isCompact && React280.createElement(
        "div",
        { className: css(pagination_default.paginationNavControl, pagination_default.modifiers.first) },
        React280.createElement(
          Button,
          { variant: ButtonVariant.plain, isDisabled: isDisabled || page === firstPage || page === 0, "aria-label": toFirstPageAriaLabel, "data-action": "first", onClick: (event) => {
            onFirstClick(event, 1);
            this.handleNewPage(event, 1);
            this.setState({ userInputPage: 1 });
          } },
          React280.createElement(angle_double_left_icon_default, null)
        )
      ),
      React280.createElement(
        "div",
        { className: pagination_default.paginationNavControl },
        React280.createElement(
          Button,
          { variant: ButtonVariant.plain, isDisabled: isDisabled || page === firstPage || page === 0, "data-action": "previous", onClick: (event) => {
            const newPage = page - 1 >= 1 ? page - 1 : 1;
            onPreviousClick(event, newPage);
            this.handleNewPage(event, newPage);
            this.setState({ userInputPage: newPage });
          }, "aria-label": toPreviousPageAriaLabel },
          React280.createElement(angle_left_icon_default, null)
        )
      ),
      !isCompact && React280.createElement(
        "div",
        { className: pagination_default.paginationNavPageSelect },
        React280.createElement(TextInput, { "aria-label": currPageAriaLabel, type: "number", isDisabled: isDisabled || itemCount && page === firstPage && page === lastPage && itemCount >= 0 || page === 0, min: lastPage <= 0 && firstPage <= 0 ? 0 : 1, max: lastPage, value: userInputPage, onKeyDown: (event) => this.onKeyDown(event, page, lastPage, onPageInput), onChange: (event) => this.onChange(event, lastPage) }),
        (itemCount || itemCount === 0) && React280.createElement(
          "span",
          { "aria-hidden": "true" },
          ofWord,
          " ",
          pagesTitle ? pluralize(lastPage, pagesTitle, pagesTitlePlural) : lastPage
        )
      ),
      React280.createElement(
        "div",
        { className: pagination_default.paginationNavControl },
        React280.createElement(
          Button,
          { variant: ButtonVariant.plain, isDisabled: isDisabled || page === lastPage, "aria-label": toNextPageAriaLabel, "data-action": "next", onClick: (event) => {
            const newPage = page + 1 <= lastPage ? page + 1 : lastPage;
            onNextClick(event, newPage);
            this.handleNewPage(event, newPage);
            this.setState({ userInputPage: newPage });
          } },
          React280.createElement(angle_right_icon_default, null)
        )
      ),
      !isCompact && React280.createElement(
        "div",
        { className: css(pagination_default.paginationNavControl, pagination_default.modifiers.last) },
        React280.createElement(
          Button,
          { variant: ButtonVariant.plain, isDisabled: isDisabled || page === lastPage, "aria-label": toLastPageAriaLabel, "data-action": "last", onClick: (event) => {
            onLastClick(event, lastPage);
            this.handleNewPage(event, lastPage);
            this.setState({ userInputPage: lastPage });
          } },
          React280.createElement(angle_double_right_icon_default, null)
        )
      )
    );
  }
};
Navigation.displayName = "Navigation";
Navigation.defaultProps = {
  className: "",
  isDisabled: false,
  isCompact: false,
  lastPage: 0,
  firstPage: 0,
  pagesTitle: "",
  pagesTitlePlural: "",
  toLastPageAriaLabel: "Go to last page",
  toNextPageAriaLabel: "Go to next page",
  toFirstPageAriaLabel: "Go to first page",
  toPreviousPageAriaLabel: "Go to previous page",
  currPageAriaLabel: "Current page",
  paginationAriaLabel: "Pagination",
  ofWord: "of",
  onNextClick: () => void 0,
  onPreviousClick: () => void 0,
  onFirstClick: () => void 0,
  onLastClick: () => void 0,
  onPageInput: () => void 0
};

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/PaginationOptionsMenu.js
var React281 = __toESM(require_react());
var PaginationOptionsMenu = ({
  className,
  widgetId,
  page: pageProp,
  itemCount,
  isDisabled = false,
  minWidth,
  dropDirection = "down",
  perPageOptions = [],
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  itemsPerPageTitle = "Items per page",
  perPageSuffix = "per page",
  optionsToggleAriaLabel,
  ofWord = "of",
  perPage = 0,
  firstIndex = 0,
  lastIndex = 0,
  isLastFullPageShown = false,
  itemsTitle = "items",
  toggleTemplate,
  onPerPageSelect = () => null
}) => {
  const [isOpen, setIsOpen] = React281.useState(false);
  const toggleRef = React281.useRef(null);
  const menuRef = React281.useRef(null);
  const containerRef = React281.useRef(null);
  const onToggle = () => {
    setIsOpen((prevState) => !prevState);
  };
  const onSelect = () => {
    var _a;
    setIsOpen((prevState) => !prevState);
    (_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.focus();
  };
  const handleNewPerPage = (_evt, newPerPage) => {
    let newPage = pageProp;
    while (Math.ceil(itemCount / newPerPage) < newPage) {
      newPage--;
    }
    if (isLastFullPageShown) {
      if (itemCount / newPerPage !== newPage) {
        while (newPage > 1 && itemCount - newPerPage * newPage < 0) {
          newPage--;
        }
      }
    }
    const startIdx = (newPage - 1) * newPerPage;
    const endIdx = newPage * newPerPage;
    return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);
  };
  React281.useEffect(() => {
    const handleMenuKeys = (event) => {
      var _a, _b, _c;
      if (isOpen && ((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
        if (event.key === "Escape" || event.key === "Tab") {
          setIsOpen(false);
          (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
        }
      }
    };
    const handleClick = (event) => {
      var _a, _b, _c;
      if (event.detail === 0 && isOpen && ((_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
        setTimeout(() => {
          var _a2;
          const firstElement = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector("li button:not(:disabled)");
          firstElement && firstElement.focus();
        }, 0);
      }
      if (isOpen && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
        setIsOpen(false);
      }
    };
    window.addEventListener("keydown", handleMenuKeys);
    window.addEventListener("click", handleClick);
    return () => {
      window.removeEventListener("keydown", handleMenuKeys);
      window.removeEventListener("click", handleClick);
    };
  }, [isOpen, menuRef]);
  const renderItems = () => perPageOptions.map(({ value, title }) => React281.createElement(
    MenuItem,
    { key: value, "data-action": `per-page-${value}`, isSelected: perPage === value, onClick: (event) => handleNewPerPage(event, value) },
    title,
    ` ${perPageSuffix}`
  ));
  const toggle = React281.createElement(
    MenuToggle,
    Object.assign({ ref: toggleRef, onClick: onToggle }, optionsToggleAriaLabel && { "aria-label": optionsToggleAriaLabel }, { isDisabled: isDisabled || itemCount && itemCount <= 0, isExpanded: isOpen }, widgetId && { id: `${widgetId}-toggle` }, { variant: "plainText", "aria-haspopup": "listbox" }),
    toggleTemplate && typeof toggleTemplate === "string" && fillTemplate(toggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle }),
    toggleTemplate && typeof toggleTemplate !== "string" && toggleTemplate({
      firstIndex,
      lastIndex,
      ofWord,
      itemCount,
      itemsTitle
    }),
    !toggleTemplate && React281.createElement(ToggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle })
  );
  const menu = React281.createElement(
    Menu,
    { className: css(className), onSelect, ref: menuRef },
    React281.createElement(
      MenuContent,
      null,
      React281.createElement(MenuList, null, renderItems())
    )
  );
  return React281.createElement(
    "div",
    { ref: containerRef },
    React281.createElement(Popper, { trigger: toggle, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, direction: dropDirection, appendTo: containerRef.current || void 0, minWidth: minWidth !== void 0 ? minWidth : "revert" })
  );
};
PaginationOptionsMenu.displayName = "PaginationOptionsMenu";

// node_modules/@patternfly/react-tokens/dist/esm/c_pagination__nav_page_select_c_form_control_width_chars.js
var c_pagination__nav_page_select_c_form_control_width_chars = {
  "name": "--pf-v5-c-pagination__nav-page-select--c-form-control--width-chars",
  "value": "2",
  "var": "var(--pf-v5-c-pagination__nav-page-select--c-form-control--width-chars)"
};
var c_pagination_nav_page_select_c_form_control_width_chars_default = c_pagination__nav_page_select_c_form_control_width_chars;

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/Pagination.js
var PaginationVariant;
(function(PaginationVariant2) {
  PaginationVariant2["bottom"] = "bottom";
  PaginationVariant2["top"] = "top";
})(PaginationVariant || (PaginationVariant = {}));
var defaultPerPageOptions = [
  {
    title: "10",
    value: 10
  },
  {
    title: "20",
    value: 20
  },
  {
    title: "50",
    value: 50
  },
  {
    title: "100",
    value: 100
  }
];
var handleInputWidth = (lastPage, node) => {
  if (!node) {
    return;
  }
  const len = String(lastPage).length;
  if (len >= 3) {
    node.style.setProperty(c_pagination_nav_page_select_c_form_control_width_chars_default.name, `${len}`);
  } else {
    node.style.setProperty(c_pagination_nav_page_select_c_form_control_width_chars_default.name, "2");
  }
};
var Pagination = (_a) => {
  var { children, className = "", variant = PaginationVariant.top, isDisabled = false, isCompact = false, isSticky = false, isStatic = false, dropDirection: dropDirectionProp, toggleTemplate, perPage = defaultPerPageOptions[0].value, titles = {
    items: "",
    page: "",
    pages: "",
    itemsPerPage: "Items per page",
    perPageSuffix: "per page",
    toFirstPageAriaLabel: "Go to first page",
    toPreviousPageAriaLabel: "Go to previous page",
    toLastPageAriaLabel: "Go to last page",
    toNextPageAriaLabel: "Go to next page",
    optionsToggleAriaLabel: "",
    currPageAriaLabel: "Current page",
    paginationAriaLabel: "Pagination",
    ofWord: "of"
  }, firstPage = 1, page: pageProp = 1, offset: offset2 = null, isLastFullPageShown = false, itemsStart = null, itemsEnd = null, itemCount, perPageOptions = defaultPerPageOptions, widgetId = "options-menu", onSetPage = () => void 0, onPerPageSelect = () => void 0, onFirstClick = () => void 0, onPreviousClick = () => void 0, onNextClick = () => void 0, onPageInput = () => void 0, onLastClick = () => void 0, ouiaId, ouiaSafe = true, usePageInsets, inset } = _a, props = __rest(_a, ["children", "className", "variant", "isDisabled", "isCompact", "isSticky", "isStatic", "dropDirection", "toggleTemplate", "perPage", "titles", "firstPage", "page", "offset", "isLastFullPageShown", "itemsStart", "itemsEnd", "itemCount", "perPageOptions", "widgetId", "onSetPage", "onPerPageSelect", "onFirstClick", "onPreviousClick", "onNextClick", "onPageInput", "onLastClick", "ouiaId", "ouiaSafe", "usePageInsets", "inset"]);
  const paginationRef = React282.useRef(null);
  const getLastPage = () => (
    // when itemCount is not known let's set lastPage as page+1 as we don't know the total count
    itemCount || itemCount === 0 ? Math.ceil(itemCount / perPage) || 0 : page + 1
  );
  React282.useEffect(() => {
    const node = paginationRef.current;
    handleInputWidth(getLastPage(), node);
  }, [perPage, itemCount]);
  const dropDirection = dropDirectionProp || (variant === "bottom" && !isStatic ? "up" : "down");
  let page = pageProp;
  if (offset2 !== null) {
    itemsStart = offset2 + 1;
    page = Math.max(Math.ceil(itemsStart / perPage), 1);
    itemsEnd = offset2 + perPage;
  }
  const lastPage = getLastPage();
  let firstIndex = (page - 1) * perPage + 1;
  let lastIndex = page * perPage;
  if (itemCount || itemCount === 0) {
    firstIndex = itemCount <= 0 ? 0 : (page - 1) * perPage + 1;
    if (page < firstPage && itemCount > 0) {
      page = firstPage;
    } else if (page > lastPage) {
      page = lastPage;
    }
    if (itemCount >= 0) {
      lastIndex = page === lastPage || itemCount === 0 ? itemCount : page * perPage;
    }
  }
  const PaginationToggleTemplateProps = {
    firstIndex,
    lastIndex,
    itemCount,
    itemsTitle: titles.items,
    ofWord: titles.ofWord
  };
  return React282.createElement(
    "div",
    Object.assign({ ref: paginationRef, className: css(pagination_default.pagination, variant === PaginationVariant.bottom && pagination_default.modifiers.bottom, usePageInsets && pagination_default.modifiers.pageInsets, formatBreakpointMods(inset, pagination_default), isCompact && pagination_default.modifiers.compact, isStatic && pagination_default.modifiers.static, isSticky && pagination_default.modifiers.sticky, className) }, widgetId && { id: `${widgetId}-${variant}-pagination` }, useOUIAProps(Pagination.displayName, ouiaId, ouiaSafe, variant), props),
    variant === PaginationVariant.top && React282.createElement(
      "div",
      { className: css(pagination_default.paginationTotalItems) },
      toggleTemplate && typeof toggleTemplate === "string" && fillTemplate(toggleTemplate, PaginationToggleTemplateProps),
      toggleTemplate && typeof toggleTemplate !== "string" && toggleTemplate(PaginationToggleTemplateProps),
      !toggleTemplate && React282.createElement(ToggleTemplate, { firstIndex, lastIndex, itemCount, itemsTitle: titles.items, ofWord: titles.ofWord })
    ),
    perPageOptions && perPageOptions.length > 0 && React282.createElement(PaginationOptionsMenu, { itemsPerPageTitle: titles.itemsPerPage, perPageSuffix: titles.perPageSuffix, itemsTitle: isCompact ? "" : titles.items, optionsToggleAriaLabel: titles.optionsToggleAriaLabel, perPageOptions, firstIndex: itemsStart !== null ? itemsStart : firstIndex, lastIndex: itemsEnd !== null ? itemsEnd : lastIndex, ofWord: titles.ofWord, isLastFullPageShown, itemCount, page, perPage, lastPage, onPerPageSelect, dropDirection, widgetId: `${widgetId}-${variant}`, toggleTemplate, isDisabled }),
    React282.createElement(Navigation, { pagesTitle: titles.page, pagesTitlePlural: titles.pages, toLastPageAriaLabel: titles.toLastPageAriaLabel, toPreviousPageAriaLabel: titles.toPreviousPageAriaLabel, toNextPageAriaLabel: titles.toNextPageAriaLabel, toFirstPageAriaLabel: titles.toFirstPageAriaLabel, currPageAriaLabel: titles.currPageAriaLabel, paginationAriaLabel: titles.paginationAriaLabel, ofWord: titles.ofWord, page: itemCount && itemCount <= 0 ? 0 : page, perPage, itemCount, firstPage: itemsStart !== null ? itemsStart : 1, lastPage, onSetPage, onFirstClick, onPreviousClick, onNextClick, onLastClick, onPageInput, isDisabled, isCompact }),
    children
  );
};
Pagination.displayName = "Pagination";

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStepper.js
init_tslib_es6();
var React283 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ProgressStepper/progress-stepper.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/ProgressStepper/progress-stepper.css";
var progress_stepper_default = {
  "faExclamationTriangle": "fa-exclamation-triangle",
  "modifiers": {
    "center": "pf-m-center",
    "compact": "pf-m-compact",
    "current": "pf-m-current",
    "pending": "pf-m-pending",
    "success": "pf-m-success",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "info": "pf-m-info",
    "helpText": "pf-m-help-text",
    "horizontal": "pf-m-horizontal",
    "vertical": "pf-m-vertical",
    "horizontalOnSm": "pf-m-horizontal-on-sm",
    "verticalOnSm": "pf-m-vertical-on-sm",
    "horizontalOnMd": "pf-m-horizontal-on-md",
    "verticalOnMd": "pf-m-vertical-on-md",
    "horizontalOnLg": "pf-m-horizontal-on-lg",
    "verticalOnLg": "pf-m-vertical-on-lg",
    "horizontalOnXl": "pf-m-horizontal-on-xl",
    "verticalOnXl": "pf-m-vertical-on-xl",
    "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
    "verticalOn_2xl": "pf-m-vertical-on-2xl"
  },
  "pficon": "pf-v5-pficon",
  "progressStepper": "pf-v5-c-progress-stepper",
  "progressStepperStep": "pf-v5-c-progress-stepper__step",
  "progressStepperStepConnector": "pf-v5-c-progress-stepper__step-connector",
  "progressStepperStepDescription": "pf-v5-c-progress-stepper__step-description",
  "progressStepperStepIcon": "pf-v5-c-progress-stepper__step-icon",
  "progressStepperStepMain": "pf-v5-c-progress-stepper__step-main",
  "progressStepperStepTitle": "pf-v5-c-progress-stepper__step-title"
};

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStepper.js
var ProgressStepper = (_a) => {
  var { children, className, isCenterAligned, isVertical, isCompact, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isCenterAligned", "isVertical", "isCompact", "aria-label"]);
  return React283.createElement("ol", Object.assign({ className: css(progress_stepper_default.progressStepper, isCenterAligned && progress_stepper_default.modifiers.center, isVertical && progress_stepper_default.modifiers.vertical, isCompact && progress_stepper_default.modifiers.compact, className), role: "list", "aria-label": ariaLabel }, props), children);
};
ProgressStepper.displayName = "ProgressStepper";

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStep.js
init_tslib_es6();
var React284 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/resources-full-icon.js
var ResourcesFullIconConfig = {
  name: "ResourcesFullIcon",
  height: 1024,
  width: 1024,
  svgPath: "M512.1,0 C229.7,0 0,229.8 0,512 C0,794.3 229.8,1024 512.1,1024 C794.4,1024 1024,794.3 1024,512 C1024,229.7 794.4,0 512.1,0 Z M512,896 C300.2,896 128,723.9 128,512 C128,300.3 300.2,128 512,128 C723.7,128 896,300.2 896,512 C896,723.8 723.7,896 512,896 Z M512,224 C671.1,224 800,352.9 800,512 C800,671.1 671.1,800 512,800 C352.9,800 224,671.1 224,512 C224,352.9 352.9,224 512,224",
  yOffset: 0,
  xOffset: 0
};
var ResourcesFullIcon = createIcon(ResourcesFullIconConfig);
var resources_full_icon_default = ResourcesFullIcon;

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStep.js
var ProgressStepVariant;
(function(ProgressStepVariant2) {
  ProgressStepVariant2["default"] = "default";
  ProgressStepVariant2["pending"] = "pending";
  ProgressStepVariant2["success"] = "success";
  ProgressStepVariant2["info"] = "info";
  ProgressStepVariant2["danger"] = "danger";
  ProgressStepVariant2["warning"] = "warning";
})(ProgressStepVariant || (ProgressStepVariant = {}));
var variantIcons3 = {
  default: void 0,
  pending: void 0,
  success: React284.createElement(check_circle_icon_default, null),
  info: React284.createElement(resources_full_icon_default, null),
  warning: React284.createElement(exclamation_triangle_icon_default, null),
  danger: React284.createElement(exclamation_circle_icon_default, null)
};
var variantStyle3 = {
  default: "",
  info: progress_stepper_default.modifiers.info,
  success: progress_stepper_default.modifiers.success,
  pending: progress_stepper_default.modifiers.pending,
  warning: progress_stepper_default.modifiers.warning,
  danger: progress_stepper_default.modifiers.danger
};
var ProgressStep = (_a) => {
  var { children, className, variant, isCurrent, description, icon, titleId, "aria-label": ariaLabel, popoverRender } = _a, props = __rest(_a, ["children", "className", "variant", "isCurrent", "description", "icon", "titleId", "aria-label", "popoverRender"]);
  const _icon = icon !== void 0 ? icon : variantIcons3[variant];
  const Component44 = popoverRender !== void 0 ? "button" : "div";
  const stepRef = React284.useRef();
  if (props.id === void 0 || titleId === void 0) {
    console.warn("ProgressStep: The titleId and id properties are required to make this component accessible, and one or both of these properties are missing.");
  }
  return React284.createElement(
    "li",
    Object.assign({
      className: css(progress_stepper_default.progressStepperStep, variantStyle3[variant], isCurrent && progress_stepper_default.modifiers.current, className),
      "aria-label": ariaLabel,
      // CSS style `display: contents` gives this li a generic role, we need to override that
      role: "listitem"
    }, isCurrent && { "aria-current": "step" }, props),
    React284.createElement(
      "div",
      { className: css(progress_stepper_default.progressStepperStepConnector) },
      React284.createElement("span", { className: css(progress_stepper_default.progressStepperStepIcon) }, _icon && _icon)
    ),
    React284.createElement(
      "div",
      { className: css(progress_stepper_default.progressStepperStepMain) },
      React284.createElement(
        Component44,
        Object.assign({ className: css(progress_stepper_default.progressStepperStepTitle, popoverRender && progress_stepper_default.modifiers.helpText), id: titleId, ref: stepRef }, popoverRender && { type: "button" }, props.id !== void 0 && titleId !== void 0 && popoverRender && { "aria-labelledby": `${props.id} ${titleId}` }),
        children,
        popoverRender && popoverRender(stepRef)
      ),
      description && React284.createElement("div", { className: css(progress_stepper_default.progressStepperStepDescription) }, description)
    )
  );
};
ProgressStep.displayName = "ProgressStep";

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/Sidebar.js
init_tslib_es6();
var React285 = __toESM(require_react());
var Sidebar = (_a) => {
  var { className, children, orientation, isPanelRight = false, hasGutter, hasNoBackground, hasBorder } = _a, props = __rest(_a, ["className", "children", "orientation", "isPanelRight", "hasGutter", "hasNoBackground", "hasBorder"]);
  return React285.createElement(
    "div",
    Object.assign({ className: css(sidebar_default.sidebar, hasGutter && sidebar_default.modifiers.gutter, hasNoBackground && sidebar_default.modifiers.noBackground, isPanelRight && sidebar_default.modifiers.panelRight, sidebar_default.modifiers[orientation], className) }, props),
    React285.createElement("div", { className: css(sidebar_default.sidebarMain, hasBorder && sidebar_default.modifiers.border) }, children)
  );
};
Sidebar.displayName = "Sidebar";

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/SidebarContent.js
init_tslib_es6();
var React286 = __toESM(require_react());
var SidebarContent = (_a) => {
  var { className, children, hasNoBackground, hasPadding } = _a, props = __rest(_a, ["className", "children", "hasNoBackground", "hasPadding"]);
  return React286.createElement("div", Object.assign({ className: css(sidebar_default.sidebarContent, hasNoBackground && sidebar_default.modifiers.noBackground, hasPadding && sidebar_default.modifiers.padding, className) }, props), children);
};
SidebarContent.displayName = "SidebarContent";

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/SidebarPanel.js
init_tslib_es6();
var React287 = __toESM(require_react());
var SidebarPanelWidthType;
(function(SidebarPanelWidthType2) {
  SidebarPanelWidthType2["default"] = "default";
  SidebarPanelWidthType2["width25"] = "width_25";
  SidebarPanelWidthType2["width33"] = "width_33";
  SidebarPanelWidthType2["width50"] = "width_50";
  SidebarPanelWidthType2["width66"] = "width_66";
  SidebarPanelWidthType2["width75"] = "width_75";
  SidebarPanelWidthType2["width100"] = "width_100";
})(SidebarPanelWidthType || (SidebarPanelWidthType = {}));
var SidebarPanel = (_a) => {
  var { className, children, variant = "default", hasNoBackground, hasPadding, width } = _a, props = __rest(_a, ["className", "children", "variant", "hasNoBackground", "hasPadding", "width"]);
  return React287.createElement("div", Object.assign({ className: css(sidebar_default.sidebarPanel, variant !== "default" && sidebar_default.modifiers[variant], hasNoBackground && sidebar_default.modifiers.noBackground, hasPadding && sidebar_default.modifiers.padding, formatBreakpointMods(width, sidebar_default), className) }, props), children);
};
SidebarPanel.displayName = "SidebarPanel";

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleList.js
init_tslib_es6();
var React289 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/SimpleList/simple-list.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/SimpleList/simple-list.css";
var simple_list_default = {
  "modifiers": {
    "current": "pf-m-current"
  },
  "simpleList": "pf-v5-c-simple-list",
  "simpleListItemLink": "pf-v5-c-simple-list__item-link",
  "simpleListSection": "pf-v5-c-simple-list__section",
  "simpleListTitle": "pf-v5-c-simple-list__title",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleListGroup.js
init_tslib_es6();
var React288 = __toESM(require_react());
var SimpleListGroup = (_a) => {
  var { children = null, className = "", title = "", titleClassName = "", id = "" } = _a, props = __rest(_a, ["children", "className", "title", "titleClassName", "id"]);
  return React288.createElement(
    "section",
    Object.assign({ className: css(simple_list_default.simpleListSection) }, props),
    React288.createElement("h2", { id, className: css(simple_list_default.simpleListTitle, titleClassName), "aria-hidden": "true" }, title),
    React288.createElement("ul", { className: css("pf-v5-c-simple-list__list", className), role: "list", "aria-labelledby": id }, children)
  );
};
SimpleListGroup.displayName = "SimpleListGroup";

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleList.js
var SimpleListContext = React289.createContext({});
var SimpleList = class extends React289.Component {
  constructor() {
    super(...arguments);
    this.state = {
      currentRef: null
    };
    this.handleCurrentUpdate = (newCurrentRef, itemProps) => {
      this.setState({ currentRef: newCurrentRef });
      const { onSelect } = this.props;
      onSelect && onSelect(newCurrentRef, itemProps);
    };
  }
  render() {
    const _a = this.props, { children, className, onSelect, isControlled, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "onSelect", "isControlled", "aria-label"]);
    let isGrouped = false;
    if (children) {
      isGrouped = React289.Children.toArray(children)[0].type === SimpleListGroup;
    }
    return React289.createElement(
      SimpleListContext.Provider,
      { value: {
        currentRef: this.state.currentRef,
        updateCurrentRef: this.handleCurrentUpdate,
        isControlled
      } },
      React289.createElement(
        "div",
        Object.assign({ className: css(simple_list_default.simpleList, className) }, props),
        isGrouped && children,
        !isGrouped && React289.createElement("ul", { className: css("pf-v5-c-simple-list__list"), role: "list", "aria-label": ariaLabel }, children)
      )
    );
  }
};
SimpleList.displayName = "SimpleList";
SimpleList.defaultProps = {
  children: null,
  className: "",
  isControlled: true
};

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleListItem.js
init_tslib_es6();
var React290 = __toESM(require_react());
var SimpleListItem = class extends React290.Component {
  constructor() {
    super(...arguments);
    this.ref = React290.createRef();
  }
  render() {
    const _a = this.props, {
      children,
      isActive,
      className,
      component: Component44,
      componentClassName,
      componentProps,
      onClick,
      type,
      href,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      itemId
    } = _a, props = __rest(_a, ["children", "isActive", "className", "component", "componentClassName", "componentProps", "onClick", "type", "href", "itemId"]);
    return React290.createElement(SimpleListContext.Consumer, null, ({ currentRef, updateCurrentRef, isControlled }) => {
      const isButton = Component44 === "button";
      const isCurrentItem = this.ref && currentRef && isControlled ? currentRef.current === this.ref.current : isActive;
      const additionalComponentProps = isButton ? {
        type
      } : {
        tabIndex: 0,
        href
      };
      return React290.createElement(
        "li",
        Object.assign({ className: css("pf-v5-c-simple-list__item", className) }, props),
        React290.createElement(Component44, Object.assign({ className: css(simple_list_default.simpleListItemLink, isCurrentItem && simple_list_default.modifiers.current, componentClassName), onClick: (evt) => {
          onClick(evt);
          updateCurrentRef(this.ref, this.props);
        }, ref: this.ref }, componentProps, additionalComponentProps), children)
      );
    });
  }
};
SimpleListItem.displayName = "SimpleListItem";
SimpleListItem.defaultProps = {
  children: null,
  className: "",
  isActive: false,
  component: "button",
  componentClassName: "",
  type: "button",
  href: "",
  onClick: () => {
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Skeleton/Skeleton.js
init_tslib_es6();
var React291 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.css";
var skeleton_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "circle": "pf-m-circle",
    "square": "pf-m-square",
    "widthSm": "pf-m-width-sm",
    "widthMd": "pf-m-width-md",
    "widthLg": "pf-m-width-lg",
    "width_25": "pf-m-width-25",
    "width_33": "pf-m-width-33",
    "width_50": "pf-m-width-50",
    "width_66": "pf-m-width-66",
    "width_75": "pf-m-width-75",
    "heightSm": "pf-m-height-sm",
    "heightMd": "pf-m-height-md",
    "heightLg": "pf-m-height-lg",
    "height_25": "pf-m-height-25",
    "height_33": "pf-m-height-33",
    "height_50": "pf-m-height-50",
    "height_66": "pf-m-height-66",
    "height_75": "pf-m-height-75",
    "height_100": "pf-m-height-100",
    "text_4xl": "pf-m-text-4xl",
    "text_3xl": "pf-m-text-3xl",
    "text_2xl": "pf-m-text-2xl",
    "textXl": "pf-m-text-xl",
    "textLg": "pf-m-text-lg",
    "textMd": "pf-m-text-md",
    "textSm": "pf-m-text-sm"
  },
  "skeleton": "pf-v5-c-skeleton",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_skeleton_Height.js
var c_skeleton_Height = {
  "name": "--pf-v5-c-skeleton--Height",
  "value": "calc(0.875rem * 1.5)",
  "var": "var(--pf-v5-c-skeleton--Height)"
};
var c_skeleton_Height_default = c_skeleton_Height;

// node_modules/@patternfly/react-tokens/dist/esm/c_skeleton_Width.js
var c_skeleton_Width = {
  "name": "--pf-v5-c-skeleton--Width",
  "value": "75%",
  "var": "var(--pf-v5-c-skeleton--Width)"
};
var c_skeleton_Width_default = c_skeleton_Width;

// node_modules/@patternfly/react-core/dist/esm/components/Skeleton/Skeleton.js
var Skeleton = (_a) => {
  var { className, width, height, fontSize, shape, screenreaderText } = _a, props = __rest(_a, ["className", "width", "height", "fontSize", "shape", "screenreaderText"]);
  const fontHeightClassName = fontSize ? Object.values(skeleton_default.modifiers).find((key) => key === `pf-m-text-${fontSize}`) : void 0;
  return React291.createElement(
    "div",
    Object.assign({}, props, { className: css(skeleton_default.skeleton, fontSize && fontHeightClassName, shape === "circle" && skeleton_default.modifiers.circle, shape === "square" && skeleton_default.modifiers.square, className) }, (width || height) && {
      style: Object.assign({ [c_skeleton_Width_default.name]: width ? width : void 0, [c_skeleton_Height_default.name]: height ? height : void 0 }, props.style)
    }),
    React291.createElement("span", { className: "pf-v5-screen-reader" }, screenreaderText)
  );
};
Skeleton.displayName = "Skeleton";

// node_modules/@patternfly/react-core/dist/esm/components/SkipToContent/SkipToContent.js
init_tslib_es6();
var React292 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/SkipToContent/skip-to-content.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/SkipToContent/skip-to-content.css";
var skip_to_content_default = {
  "skipToContent": "pf-v5-c-skip-to-content"
};

// node_modules/@patternfly/react-core/dist/esm/components/SkipToContent/SkipToContent.js
var SkipToContent = (_a) => {
  var { children = null, className = "", href } = _a, props = __rest(_a, ["children", "className", "href"]);
  return React292.createElement(
    "div",
    Object.assign({ className: css(skip_to_content_default.skipToContent, className) }, props),
    React292.createElement(Button, { variant: ButtonVariant.primary, component: "a", href }, children)
  );
};
SkipToContent.displayName = "SkipToContent";

// node_modules/@patternfly/react-core/dist/esm/components/Slider/Slider.js
init_tslib_es6();
var React294 = __toESM(require_react());
var import_react23 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Slider/slider.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Slider/slider.css";
var slider_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "formControl": "pf-v5-c-form-control",
  "modifiers": {
    "disabled": "pf-m-disabled",
    "active": "pf-m-active",
    "floating": "pf-m-floating"
  },
  "slider": "pf-v5-c-slider",
  "sliderActions": "pf-v5-c-slider__actions",
  "sliderMain": "pf-v5-c-slider__main",
  "sliderRail": "pf-v5-c-slider__rail",
  "sliderRailTrack": "pf-v5-c-slider__rail-track",
  "sliderStep": "pf-v5-c-slider__step",
  "sliderStepLabel": "pf-v5-c-slider__step-label",
  "sliderStepTick": "pf-v5-c-slider__step-tick",
  "sliderSteps": "pf-v5-c-slider__steps",
  "sliderThumb": "pf-v5-c-slider__thumb",
  "sliderValue": "pf-v5-c-slider__value"
};

// node_modules/@patternfly/react-core/dist/esm/components/Slider/SliderStep.js
init_tslib_es6();
var React293 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_slider__step_Left.js
var c_slider__step_Left = {
  "name": "--pf-v5-c-slider__step--Left",
  "value": "0",
  "var": "var(--pf-v5-c-slider__step--Left)"
};
var c_slider_step_Left_default = c_slider__step_Left;

// node_modules/@patternfly/react-core/dist/esm/components/Slider/SliderStep.js
var SliderStep = (_a) => {
  var { className, label, value, isTickHidden = false, isLabelHidden = false, isActive = false } = _a, props = __rest(_a, ["className", "label", "value", "isTickHidden", "isLabelHidden", "isActive"]);
  const style = { [c_slider_step_Left_default.name]: `${value ? value : c_slider_step_Left_default.value}%` };
  return React293.createElement(
    "div",
    Object.assign({ className: css(slider_default.sliderStep, isActive && slider_default.modifiers.active, className), style }, props),
    !isTickHidden && React293.createElement("div", { className: css(slider_default.sliderStepTick) }),
    !isLabelHidden && label && React293.createElement("div", { className: css(slider_default.sliderStepLabel) }, label)
  );
};
SliderStep.displayName = "SliderStep";

// node_modules/@patternfly/react-tokens/dist/esm/c_slider_value.js
var c_slider_value = {
  "name": "--pf-v5-c-slider--value",
  "value": "0",
  "var": "var(--pf-v5-c-slider--value)"
};
var c_slider_value_default = c_slider_value;

// node_modules/@patternfly/react-tokens/dist/esm/c_slider__value_c_form_control_width_chars.js
var c_slider__value_c_form_control_width_chars = {
  "name": "--pf-v5-c-slider__value--c-form-control--width-chars",
  "value": "3",
  "var": "var(--pf-v5-c-slider__value--c-form-control--width-chars)"
};
var c_slider_value_c_form_control_width_chars_default = c_slider__value_c_form_control_width_chars;

// node_modules/@patternfly/react-core/dist/esm/components/Slider/Slider.js
var getPercentage = (current, max) => 100 * current / max;
var Slider = (_a) => {
  var { className, value = 0, customSteps, areCustomStepsContinuous = false, isDisabled = false, isInputVisible = false, inputValue = 0, inputLabel, inputAriaLabel = "Slider value input", thumbAriaLabel = "Value", hasTooltipOverThumb = false, inputPosition = "end", onChange, leftActions, startActions, rightActions, endActions, step = 1, min = 0, max = 100, showTicks = false, showBoundaries = true, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby } = _a, props = __rest(_a, ["className", "value", "customSteps", "areCustomStepsContinuous", "isDisabled", "isInputVisible", "inputValue", "inputLabel", "inputAriaLabel", "thumbAriaLabel", "hasTooltipOverThumb", "inputPosition", "onChange", "leftActions", "startActions", "rightActions", "endActions", "step", "min", "max", "showTicks", "showBoundaries", "aria-describedby", "aria-labelledby"]);
  const sliderRailRef = React294.useRef();
  const thumbRef = React294.useRef();
  const [localValue, setValue] = (0, import_react23.useState)(value);
  const [localInputValue, setLocalInputValue] = (0, import_react23.useState)(inputValue);
  let isRTL;
  React294.useEffect(() => {
    isRTL = getLanguageDirection(sliderRailRef.current) === "rtl";
  });
  React294.useEffect(() => {
    setValue(value);
  }, [value]);
  React294.useEffect(() => {
    setLocalInputValue(inputValue);
  }, [inputValue]);
  let diff = 0;
  let snapValue;
  const stylePercent = (localValue - min) * 100 / (max - min);
  const style = { [c_slider_value_default.name]: `${stylePercent}%` };
  const widthChars = React294.useMemo(() => localInputValue.toString().length, [localInputValue]);
  const inputStyle = { [c_slider_value_c_form_control_width_chars_default.name]: widthChars };
  const onChangeHandler = (_event, value2) => {
    setLocalInputValue(Number(value2));
  };
  const handleKeyPressOnInput = (event) => {
    if (event.key === "Enter") {
      event.preventDefault();
      if (onChange) {
        onChange(event, localValue, localInputValue, setLocalInputValue);
      }
    }
  };
  const onInputFocus = (e) => {
    e.stopPropagation();
  };
  const onThumbClick = () => {
    thumbRef.current.focus();
  };
  const onBlur = (event) => {
    if (onChange) {
      onChange(event, localValue, localInputValue, setLocalInputValue);
    }
  };
  const findAriaTextValue = () => {
    if (!areCustomStepsContinuous && customSteps) {
      const matchingStep = customSteps.find((stepObj) => stepObj.value === localValue);
      if (matchingStep) {
        return matchingStep.label;
      }
    }
    return Number(Number(localValue).toFixed(2)).toString();
  };
  const handleThumbDragEnd = () => {
    document.removeEventListener("mousemove", callbackThumbMove);
    document.removeEventListener("mouseup", callbackThumbUp);
    document.removeEventListener("touchmove", callbackThumbMove);
    document.removeEventListener("touchend", callbackThumbUp);
    document.removeEventListener("touchcancel", callbackThumbUp);
  };
  const handleMouseDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    if (isRTL) {
      diff = thumbRef.current.getBoundingClientRect().right - e.clientX;
    } else {
      diff = e.clientX - thumbRef.current.getBoundingClientRect().left;
    }
    document.addEventListener("mousemove", callbackThumbMove);
    document.addEventListener("mouseup", callbackThumbUp);
  };
  const handleTouchStart = (e) => {
    e.stopPropagation();
    if (isRTL) {
      diff = thumbRef.current.getBoundingClientRect().right - e.touches[0].clientX;
    } else {
      diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;
    }
    document.addEventListener("touchmove", callbackThumbMove, { passive: false });
    document.addEventListener("touchend", callbackThumbUp);
    document.addEventListener("touchcancel", callbackThumbUp);
  };
  const onSliderRailClick = (e) => {
    handleThumbMove(e);
    if (snapValue && !areCustomStepsContinuous) {
      thumbRef.current.style.setProperty(c_slider_value_default.name, `${snapValue}%`);
      setValue(snapValue);
      if (onChange) {
        onChange(e, snapValue);
      }
    }
  };
  const handleThumbMove = (e) => {
    if (e.type === "touchmove") {
      e.preventDefault();
      e.stopImmediatePropagation();
    }
    const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;
    let newPosition;
    if (isRTL) {
      newPosition = sliderRailRef.current.getBoundingClientRect().right - clientPosition - diff;
    } else {
      newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;
    }
    const end2 = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;
    const start2 = 0;
    if (newPosition < start2) {
      newPosition = 0;
    }
    if (newPosition > end2) {
      newPosition = end2;
    }
    const newPercentage = getPercentage(newPosition, end2);
    thumbRef.current.style.setProperty(c_slider_value_default.name, `${newPercentage}%`);
    const newValue = Math.round((newPercentage * (max - min) / 100 + min) * 100) / 100;
    setValue(newValue);
    if (!customSteps) {
      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;
      thumbRef.current.style.setProperty(c_slider_value_default.name, `${snapValue}%`);
      setValue(snapValue);
    }
    if (!areCustomStepsContinuous && customSteps) {
      let percentage = newPercentage;
      if (customSteps[customSteps.length - 1].value !== 100) {
        percentage = newPercentage * (max - min) / 100 + min;
      }
      const stepIndex = customSteps.findIndex((stepObj) => stepObj.value >= percentage);
      if (customSteps[stepIndex].value === percentage) {
        snapValue = customSteps[stepIndex].value;
      } else {
        const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;
        if (midpoint > percentage) {
          snapValue = customSteps[stepIndex - 1].value;
        } else {
          snapValue = customSteps[stepIndex].value;
        }
      }
      setValue(snapValue);
    }
    if (onChange) {
      if (snapValue !== void 0) {
        onChange(e, snapValue);
      } else {
        onChange(e, newValue);
      }
    }
  };
  const callbackThumbMove = React294.useCallback(handleThumbMove, [min, max, customSteps, onChange]);
  const callbackThumbUp = React294.useCallback(handleThumbDragEnd, [min, max, customSteps, onChange]);
  const handleThumbKeys = (e) => {
    const key = e.key;
    if (key !== "ArrowLeft" && key !== "ArrowRight") {
      return;
    }
    e.preventDefault();
    let newValue = localValue;
    if (!areCustomStepsContinuous && customSteps) {
      const stepIndex = customSteps.findIndex((stepObj) => stepObj.value === localValue);
      if (key === "ArrowRight") {
        if (isRTL) {
          if (stepIndex - 1 >= 0) {
            newValue = customSteps[stepIndex - 1].value;
          }
        } else {
          if (stepIndex + 1 < customSteps.length) {
            {
              newValue = customSteps[stepIndex + 1].value;
            }
          }
        }
      } else if (key === "ArrowLeft") {
        if (isRTL) {
          if (stepIndex + 1 < customSteps.length) {
            {
              newValue = customSteps[stepIndex + 1].value;
            }
          }
        } else {
          if (stepIndex - 1 >= 0) {
            newValue = customSteps[stepIndex - 1].value;
          }
        }
      }
    } else {
      if (key === "ArrowRight") {
        if (isRTL) {
          newValue = localValue - step >= min ? localValue - step : min;
        } else {
          newValue = localValue + step <= max ? localValue + step : max;
        }
      } else if (key === "ArrowLeft") {
        if (isRTL) {
          newValue = localValue + step <= max ? localValue + step : max;
        } else {
          newValue = localValue - step >= min ? localValue - step : min;
        }
      }
    }
    if (newValue !== localValue) {
      thumbRef.current.style.setProperty(c_slider_value_default.name, `${newValue}%`);
      setValue(newValue);
      if (onChange) {
        onChange(e, newValue);
      }
    }
  };
  const displayInput = () => {
    const textInput = React294.createElement(TextInput, { isDisabled, type: "number", value: localInputValue, "aria-label": inputAriaLabel, onKeyDown: handleKeyPressOnInput, onChange: onChangeHandler, onClick: onInputFocus, onFocus: onInputFocus, onBlur });
    if (inputLabel) {
      return React294.createElement(
        InputGroup,
        null,
        React294.createElement(InputGroupItem, { isFill: true }, textInput),
        React294.createElement(InputGroupText, { isDisabled }, inputLabel)
      );
    } else {
      return textInput;
    }
  };
  const getStepValue = (val, min2, max2) => (val - min2) * 100 / (max2 - min2);
  const buildSteps2 = () => {
    const builtSteps = [];
    for (let i = min; i <= max; i = i + step) {
      const stepValue = getStepValue(i, min, max);
      if (!showTicks && showBoundaries && i !== min && i !== max) {
        continue;
      }
      builtSteps.push(React294.createElement(SliderStep, { key: i, value: stepValue, label: i.toString(), isTickHidden: !showTicks, isLabelHidden: (i === min || i === max) && showBoundaries ? false : true, isActive: i <= localValue }));
    }
    return builtSteps;
  };
  const thumbComponent = React294.createElement("div", { className: css(slider_default.sliderThumb), ref: thumbRef, tabIndex: isDisabled ? -1 : 0, role: "slider", "aria-valuemin": customSteps ? customSteps[0].value : min, "aria-valuemax": customSteps ? customSteps[customSteps.length - 1].value : max, "aria-valuenow": localValue, "aria-valuetext": findAriaTextValue(), "aria-label": thumbAriaLabel, "aria-disabled": isDisabled, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, onMouseDown: !isDisabled ? handleMouseDown : null, onTouchStart: !isDisabled ? handleTouchStart : null, onKeyDown: !isDisabled ? handleThumbKeys : null, onClick: !isDisabled ? onThumbClick : null });
  return React294.createElement(
    "div",
    Object.assign({ className: css(slider_default.slider, className, isDisabled && slider_default.modifiers.disabled), style: Object.assign(Object.assign({}, style), inputStyle) }, props),
    (leftActions || startActions) && React294.createElement("div", { className: css(slider_default.sliderActions) }, leftActions || startActions),
    React294.createElement(
      "div",
      { className: css(slider_default.sliderMain) },
      React294.createElement(
        "div",
        { className: css(slider_default.sliderRail), ref: sliderRailRef, onClick: !isDisabled ? onSliderRailClick : null },
        React294.createElement("div", { className: css(slider_default.sliderRailTrack) })
      ),
      customSteps && React294.createElement("div", { className: css(slider_default.sliderSteps), "aria-hidden": "true" }, customSteps.map((stepObj) => {
        const minValue = customSteps[0].value;
        const maxValue = customSteps[customSteps.length - 1].value;
        const stepValue = getStepValue(stepObj.value, minValue, maxValue);
        return React294.createElement(SliderStep, { key: stepObj.value, value: stepValue, label: stepObj.label, isLabelHidden: stepObj.isLabelHidden, isActive: stepObj.value <= localValue });
      })),
      !customSteps && (showTicks || showBoundaries) && React294.createElement("div", { className: css(slider_default.sliderSteps), "aria-hidden": "true" }, buildSteps2()),
      hasTooltipOverThumb ? React294.createElement(Tooltip, { triggerRef: thumbRef, entryDelay: 0, content: findAriaTextValue() }, thumbComponent) : thumbComponent,
      isInputVisible && inputPosition === "aboveThumb" && React294.createElement("div", { className: css(slider_default.sliderValue, slider_default.modifiers.floating) }, displayInput())
    ),
    isInputVisible && (inputPosition === "right" || inputPosition === "end") && React294.createElement("div", { className: css(slider_default.sliderValue) }, displayInput()),
    (rightActions || endActions) && React294.createElement("div", { className: css(slider_default.sliderActions) }, rightActions || endActions)
  );
};
Slider.displayName = "Slider";

// node_modules/@patternfly/react-core/dist/esm/components/Switch/Switch.js
init_tslib_es6();
var React295 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Switch/switch.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Switch/switch.css";
var switch_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "reverse": "pf-m-reverse",
    "off": "pf-m-off",
    "on": "pf-m-on"
  },
  "switch": "pf-v5-c-switch",
  "switchInput": "pf-v5-c-switch__input",
  "switchLabel": "pf-v5-c-switch__label",
  "switchToggle": "pf-v5-c-switch__toggle",
  "switchToggleIcon": "pf-v5-c-switch__toggle-icon",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Switch/Switch.js
var Switch = class _Switch extends React295.Component {
  constructor(props) {
    super(props);
    if (!props.label && !props["aria-label"]) {
      console.error("Switch: Switch requires either a label or an aria-label to be specified");
    }
    this.id = props.id || getUniqueId();
    this.state = {
      ouiaStateId: getDefaultOUIAId(_Switch.displayName)
    };
  }
  render() {
    const _a = this.props, {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      id,
      className,
      label,
      labelOff,
      isChecked,
      defaultChecked,
      hasCheckIcon,
      isDisabled,
      onChange,
      isReversed,
      ouiaId,
      ouiaSafe
    } = _a, props = __rest(_a, ["id", "className", "label", "labelOff", "isChecked", "defaultChecked", "hasCheckIcon", "isDisabled", "onChange", "isReversed", "ouiaId", "ouiaSafe"]);
    const isAriaLabelledBy = props["aria-label"] === "";
    return React295.createElement(
      "label",
      Object.assign({ className: css(switch_default.switch, isReversed && switch_default.modifiers.reverse, className), htmlFor: this.id }, getOUIAProps(_Switch.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)),
      React295.createElement("input", Object.assign({ id: this.id, className: css(switch_default.switchInput), type: "checkbox", onChange: (event) => onChange(event, event.target.checked) }, defaultChecked !== void 0 ? { defaultChecked } : { checked: isChecked }, { disabled: isDisabled, "aria-labelledby": !isAriaLabelledBy ? null : `${this.id}-${isChecked !== true ? "off" : "on"}` }, props)),
      label !== void 0 ? React295.createElement(
        React295.Fragment,
        null,
        React295.createElement("span", { className: css(switch_default.switchToggle) }, hasCheckIcon && React295.createElement(
          "span",
          { className: css(switch_default.switchToggleIcon), "aria-hidden": "true" },
          React295.createElement(check_icon_default, null)
        )),
        React295.createElement("span", { className: css(switch_default.switchLabel, switch_default.modifiers.on), id: isAriaLabelledBy ? `${this.id}-on` : null, "aria-hidden": "true" }, label),
        React295.createElement("span", { className: css(switch_default.switchLabel, switch_default.modifiers.off), id: isAriaLabelledBy ? `${this.id}-off` : null, "aria-hidden": "true" }, labelOff !== void 0 ? labelOff : label)
      ) : React295.createElement(
        "span",
        { className: css(switch_default.switchToggle) },
        React295.createElement(
          "div",
          { className: css(switch_default.switchToggleIcon), "aria-hidden": "true" },
          React295.createElement(check_icon_default, null)
        )
      )
    );
  }
};
Switch.displayName = "Switch";
Switch.defaultProps = {
  isChecked: true,
  isDisabled: false,
  isReversed: false,
  "aria-label": "",
  onChange: () => void 0
};

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tab.js
init_tslib_es6();
var React299 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Tabs/tabs.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Tabs/tabs.css";
var tabs_default = {
  "button": "pf-v5-c-button",
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "fill": "pf-m-fill",
    "scrollable": "pf-m-scrollable",
    "noBorderBottom": "pf-m-no-border-bottom",
    "box": "pf-m-box",
    "vertical": "pf-m-vertical",
    "current": "pf-m-current",
    "colorSchemeLight_300": "pf-m-color-scheme--light-300",
    "expandable": "pf-m-expandable",
    "nonExpandable": "pf-m-non-expandable",
    "expandableOnSm": "pf-m-expandable-on-sm",
    "nonExpandableOnSm": "pf-m-non-expandable-on-sm",
    "expandableOnMd": "pf-m-expandable-on-md",
    "nonExpandableOnMd": "pf-m-non-expandable-on-md",
    "expandableOnLg": "pf-m-expandable-on-lg",
    "nonExpandableOnLg": "pf-m-non-expandable-on-lg",
    "expandableOnXl": "pf-m-expandable-on-xl",
    "nonExpandableOnXl": "pf-m-non-expandable-on-xl",
    "expandableOn_2xl": "pf-m-expandable-on-2xl",
    "nonExpandableOn_2xl": "pf-m-non-expandable-on-2xl",
    "expanded": "pf-m-expanded",
    "secondary": "pf-m-secondary",
    "pageInsets": "pf-m-page-insets",
    "overflow": "pf-m-overflow",
    "action": "pf-m-action",
    "active": "pf-m-active",
    "disabled": "pf-m-disabled",
    "ariaDisabled": "pf-m-aria-disabled",
    "insetNone": "pf-m-inset-none",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "insetNoneOnSm": "pf-m-inset-none-on-sm",
    "insetSmOnSm": "pf-m-inset-sm-on-sm",
    "insetMdOnSm": "pf-m-inset-md-on-sm",
    "insetLgOnSm": "pf-m-inset-lg-on-sm",
    "insetXlOnSm": "pf-m-inset-xl-on-sm",
    "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
    "insetNoneOnMd": "pf-m-inset-none-on-md",
    "insetSmOnMd": "pf-m-inset-sm-on-md",
    "insetMdOnMd": "pf-m-inset-md-on-md",
    "insetLgOnMd": "pf-m-inset-lg-on-md",
    "insetXlOnMd": "pf-m-inset-xl-on-md",
    "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
    "insetNoneOnLg": "pf-m-inset-none-on-lg",
    "insetSmOnLg": "pf-m-inset-sm-on-lg",
    "insetMdOnLg": "pf-m-inset-md-on-lg",
    "insetLgOnLg": "pf-m-inset-lg-on-lg",
    "insetXlOnLg": "pf-m-inset-xl-on-lg",
    "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
    "insetNoneOnXl": "pf-m-inset-none-on-xl",
    "insetSmOnXl": "pf-m-inset-sm-on-xl",
    "insetMdOnXl": "pf-m-inset-md-on-xl",
    "insetLgOnXl": "pf-m-inset-lg-on-xl",
    "insetXlOnXl": "pf-m-inset-xl-on-xl",
    "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
    "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
    "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
    "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
    "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
    "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
    "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
  },
  "tabs": "pf-v5-c-tabs",
  "tabsAdd": "pf-v5-c-tabs__add",
  "tabsItem": "pf-v5-c-tabs__item",
  "tabsItemAction": "pf-v5-c-tabs__item-action",
  "tabsItemActionIcon": "pf-v5-c-tabs__item-action-icon",
  "tabsItemIcon": "pf-v5-c-tabs__item-icon",
  "tabsItemText": "pf-v5-c-tabs__item-text",
  "tabsLink": "pf-v5-c-tabs__link",
  "tabsLinkToggleIcon": "pf-v5-c-tabs__link-toggle-icon",
  "tabsList": "pf-v5-c-tabs__list",
  "tabsScrollButton": "pf-v5-c-tabs__scroll-button",
  "tabsToggle": "pf-v5-c-tabs__toggle",
  "tabsToggleButton": "pf-v5-c-tabs__toggle-button",
  "tabsToggleIcon": "pf-v5-c-tabs__toggle-icon",
  "tabsToggleText": "pf-v5-c-tabs__toggle-text",
  "themeDark": "pf-v5-theme-dark"
};

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabButton.js
init_tslib_es6();
var React296 = __toESM(require_react());
var TabButton = (_a) => {
  var {
    children,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    tabContentRef,
    ouiaId,
    parentInnerRef,
    ouiaSafe
  } = _a, props = __rest(_a, ["children", "tabContentRef", "ouiaId", "parentInnerRef", "ouiaSafe"]);
  const Component44 = props.href ? "a" : "button";
  return React296.createElement(Component44, Object.assign({}, !props.href && { type: "button" }, { ref: parentInnerRef }, getOUIAProps(TabButton.displayName, ouiaId, ouiaSafe), props), children);
};
TabButton.displayName = "TabButton";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabsContext.js
var React297 = __toESM(require_react());
var TabsContext = React297.createContext({
  variant: "default",
  mountOnEnter: false,
  unmountOnExit: false,
  localActiveKey: "",
  uniqueId: "",
  handleTabClick: () => null,
  handleTabClose: void 0
});
var TabsContextProvider = TabsContext.Provider;
var TabsContextConsumer = TabsContext.Consumer;

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabAction.js
init_tslib_es6();
var React298 = __toESM(require_react());
var TabActionBase = (_a) => {
  var {
    children,
    className,
    onClick,
    isDisabled,
    "aria-label": ariaLabel = "Tab action",
    innerRef,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ouiaId,
    ouiaSafe
  } = _a, props = __rest(_a, ["children", "className", "onClick", "isDisabled", "aria-label", "innerRef", "ouiaId", "ouiaSafe"]);
  return React298.createElement(
    "span",
    { className: css(tabs_default.tabsItemAction, className) },
    React298.createElement(
      Button,
      Object.assign({ ref: innerRef, type: "button", variant: "plain", "aria-label": ariaLabel, onClick, isDisabled }, getOUIAProps(TabAction.displayName, ouiaId, ouiaSafe), props),
      React298.createElement("span", { className: css(tabs_default.tabsItemActionIcon) }, children)
    )
  );
};
var TabAction = React298.forwardRef((props, ref) => React298.createElement(TabActionBase, Object.assign({}, props, { innerRef: ref })));
TabAction.displayName = "TabAction";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tab.js
var TabBase = (_a) => {
  var { title, eventKey, tabContentRef, id: childId, tabContentId, className: childClassName = "", ouiaId: childOuiaId, isDisabled, isAriaDisabled, inoperableEvents = ["onClick", "onKeyPress"], href, innerRef, tooltip, closeButtonAriaLabel, isCloseDisabled = false, actions } = _a, props = __rest(_a, ["title", "eventKey", "tabContentRef", "id", "tabContentId", "className", "ouiaId", "isDisabled", "isAriaDisabled", "inoperableEvents", "href", "innerRef", "tooltip", "closeButtonAriaLabel", "isCloseDisabled", "actions"]);
  const preventedEvents2 = inoperableEvents.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), { [eventToPrevent]: (event) => {
    event.preventDefault();
  } }), {});
  const { mountOnEnter, localActiveKey, unmountOnExit, uniqueId, handleTabClick, handleTabClose } = React299.useContext(TabsContext);
  let ariaControls = tabContentId ? `${tabContentId}` : `pf-tab-section-${eventKey}-${childId || uniqueId}`;
  if ((mountOnEnter || unmountOnExit) && eventKey !== localActiveKey) {
    ariaControls = void 0;
  }
  const isButtonElement = Boolean(!href);
  const getDefaultTabIdx = () => {
    if (isDisabled) {
      return isButtonElement ? null : -1;
    } else if (isAriaDisabled) {
      return null;
    }
  };
  const tabButton = React299.createElement(TabButton, Object.assign({ parentInnerRef: innerRef, className: css(tabs_default.tabsLink, isDisabled && href && tabs_default.modifiers.disabled, isAriaDisabled && tabs_default.modifiers.ariaDisabled), disabled: isButtonElement ? isDisabled : null, "aria-disabled": isDisabled || isAriaDisabled, tabIndex: getDefaultTabIdx(), onClick: (event) => handleTabClick(event, eventKey, tabContentRef) }, isAriaDisabled ? preventedEvents2 : null, { id: `pf-tab-${eventKey}-${childId || uniqueId}`, "aria-controls": ariaControls, tabContentRef, ouiaId: childOuiaId, href, role: "tab", "aria-selected": eventKey === localActiveKey }, props), title);
  return React299.createElement(
    "li",
    { className: css(tabs_default.tabsItem, eventKey === localActiveKey && tabs_default.modifiers.current, (handleTabClose || actions) && tabs_default.modifiers.action, (isDisabled || isAriaDisabled) && tabs_default.modifiers.disabled, childClassName), role: "presentation" },
    tooltip ? React299.createElement(Tooltip, Object.assign({}, tooltip.props), tabButton) : tabButton,
    actions && actions,
    handleTabClose !== void 0 && React299.createElement(
      TabAction,
      { "aria-label": closeButtonAriaLabel || "Close tab", onClick: (event) => handleTabClose(event, eventKey, tabContentRef), isDisabled: isCloseDisabled },
      React299.createElement(times_icon_default, null)
    )
  );
};
var Tab = React299.forwardRef((props, ref) => React299.createElement(TabBase, Object.assign({ innerRef: ref }, props)));
Tab.displayName = "Tab";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tabs.js
init_tslib_es6();
var React303 = __toESM(require_react());

// node_modules/@patternfly/react-icons/dist/esm/icons/plus-icon.js
var PlusIconConfig = {
  name: "PlusIcon",
  height: 512,
  width: 448,
  svgPath: "M416 208H272V64c0-17.67-14.33-32-32-32h-32c-17.67 0-32 14.33-32 32v144H32c-17.67 0-32 14.33-32 32v32c0 17.67 14.33 32 32 32h144v144c0 17.67 14.33 32 32 32h32c17.67 0 32-14.33 32-32V304h144c17.67 0 32-14.33 32-32v-32c0-17.67-14.33-32-32-32z",
  yOffset: 0,
  xOffset: 0
};
var PlusIcon = createIcon(PlusIconConfig);
var plus_icon_default = PlusIcon;

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContent.js
init_tslib_es6();
var React300 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/TabContent/tab-content.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/TabContent/tab-content.css";
var tab_content_default = {
  "modifiers": {
    "light_300": "pf-m-light-300",
    "padding": "pf-m-padding"
  },
  "tabContent": "pf-v5-c-tab-content",
  "tabContentBody": "pf-v5-c-tab-content__body"
};

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContent.js
var variantStyle4 = {
  default: "",
  light300: tab_content_default.modifiers.light_300
};
var TabContentBase = (_a) => {
  var {
    id,
    activeKey,
    "aria-label": ariaLabel,
    child,
    children,
    className,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    eventKey,
    innerRef,
    ouiaId,
    ouiaSafe
  } = _a, props = __rest(_a, ["id", "activeKey", "aria-label", "child", "children", "className", "eventKey", "innerRef", "ouiaId", "ouiaSafe"]);
  if (children || child) {
    let labelledBy;
    if (ariaLabel) {
      labelledBy = null;
    } else {
      labelledBy = children ? `${id}` : `pf-tab-${child.props.eventKey}-${id}`;
    }
    return React300.createElement(TabsContextConsumer, null, ({ variant }) => React300.createElement("section", Object.assign({ ref: innerRef, hidden: children ? null : child.props.eventKey !== activeKey, className: children ? css(tab_content_default.tabContent, className, variantStyle4[variant]) : css(tab_content_default.tabContent, child.props.className, variantStyle4[variant]), id: children ? id : `pf-tab-section-${child.props.eventKey}-${id}`, "aria-label": ariaLabel, "aria-labelledby": labelledBy, role: "tabpanel", tabIndex: 0 }, getOUIAProps("TabContent", ouiaId, ouiaSafe), props), children || child.props.children));
  }
  return null;
};
var TabContent = React300.forwardRef((props, ref) => React300.createElement(TabContentBase, Object.assign({}, props, { innerRef: ref })));

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/OverflowTab.js
init_tslib_es6();
var import_react24 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleText.js
init_tslib_es6();
var React301 = __toESM(require_react());
var TabTitleText = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React301.createElement("span", Object.assign({ className: css(tabs_default.tabsItemText, className) }, props), children);
};
TabTitleText.displayName = "TabTitleText";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/OverflowTab.js
var OverflowTab = (_a) => {
  var { className, overflowingTabs = [], showTabCount, defaultTitleText = "More", toggleAriaLabel, zIndex = 9999 } = _a, props = __rest(_a, ["className", "overflowingTabs", "showTabCount", "defaultTitleText", "toggleAriaLabel", "zIndex"]);
  const menuRef = import_react24.default.useRef();
  const overflowTabRef = import_react24.default.useRef();
  const overflowLIRef = import_react24.default.useRef();
  const [isExpanded, setIsExpanded] = import_react24.default.useState(false);
  const { localActiveKey, handleTabClick } = import_react24.default.useContext(TabsContext);
  const closeMenu = () => {
    setIsExpanded(false);
    overflowTabRef.current.focus();
  };
  const handleMenuKeys = (ev) => {
    var _a2;
    const menuContainsEventTarget = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(ev.target);
    if (isExpanded && menuContainsEventTarget && ev.key === "Escape") {
      closeMenu();
    }
  };
  const handleClick = (ev) => {
    var _a2, _b;
    const clickIsOutsideMenu = !((_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(ev.target));
    const clickIsOutsideOverflowTab = !((_b = overflowTabRef === null || overflowTabRef === void 0 ? void 0 : overflowTabRef.current) === null || _b === void 0 ? void 0 : _b.contains(ev.target));
    if (isExpanded && clickIsOutsideMenu && clickIsOutsideOverflowTab) {
      closeMenu();
    }
  };
  import_react24.default.useEffect(() => {
    window.addEventListener("click", handleClick);
    window.addEventListener("keydown", handleMenuKeys);
    return () => {
      window.removeEventListener("click", handleClick);
      window.removeEventListener("keydown", handleMenuKeys);
    };
  }, [isExpanded, menuRef, overflowTabRef]);
  const selectedTab = overflowingTabs.find((tab) => tab.eventKey === localActiveKey);
  const tabTitle = (selectedTab === null || selectedTab === void 0 ? void 0 : selectedTab.title) ? selectedTab.title : defaultTitleText;
  const toggleMenu = () => {
    setIsExpanded((prevIsExpanded) => !prevIsExpanded);
    setTimeout(() => {
      if (menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) {
        const firstElement = menuRef.current.querySelector("li > button,input:not(:disabled)");
        firstElement && firstElement.focus();
      }
    }, 0);
  };
  const overflowTab = import_react24.default.createElement(
    "li",
    Object.assign({ className: css(tabs_default.tabsItem, tabs_default.modifiers.overflow, selectedTab && tabs_default.modifiers.current, className), role: "presentation", ref: overflowLIRef }, props),
    import_react24.default.createElement(
      "button",
      { type: "button", className: css(tabs_default.tabsLink, isExpanded && tabs_default.modifiers.expanded), onClick: () => toggleMenu(), "aria-label": toggleAriaLabel, "aria-haspopup": "menu", "aria-expanded": isExpanded, role: "tab", ref: overflowTabRef },
      import_react24.default.createElement(
        TabTitleText,
        null,
        tabTitle,
        showTabCount && tabTitle === defaultTitleText && ` (${overflowingTabs.length})`
      ),
      import_react24.default.createElement(
        "span",
        { className: tabs_default.tabsLinkToggleIcon },
        import_react24.default.createElement(angle_right_icon_default, null)
      )
    )
  );
  const tabs = overflowingTabs.map((tab) => import_react24.default.createElement(MenuItem, { key: tab.eventKey, itemId: tab.eventKey, isSelected: localActiveKey === tab.eventKey }, tab.title));
  const onTabSelect = (event, key) => {
    closeMenu();
    const selectedTabRef = overflowingTabs.find((tab) => tab.eventKey === key).tabContentRef;
    handleTabClick(event, key, selectedTabRef);
  };
  const overflowMenu = import_react24.default.createElement(
    Menu,
    { ref: menuRef, onSelect: (ev, itemId) => onTabSelect(ev, itemId) },
    import_react24.default.createElement(
      MenuContent,
      null,
      import_react24.default.createElement(MenuList, null, tabs)
    )
  );
  return import_react24.default.createElement(
    import_react24.default.Fragment,
    null,
    overflowTab,
    import_react24.default.createElement(Popper, { triggerRef: overflowTabRef, popper: overflowMenu, popperRef: menuRef, isVisible: isExpanded, minWidth: "revert", appendTo: overflowLIRef.current, zIndex })
  );
};
OverflowTab.displayName = "OverflowTab";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tabs.js
var TabsComponent;
(function(TabsComponent2) {
  TabsComponent2["div"] = "div";
  TabsComponent2["nav"] = "nav";
})(TabsComponent || (TabsComponent = {}));
var variantStyle5 = {
  default: "",
  light300: tabs_default.modifiers.colorSchemeLight_300
};
var Tabs = class _Tabs extends React303.Component {
  constructor(props) {
    super(props);
    this.tabList = React303.createRef();
    this.leftScrollButtonRef = React303.createRef();
    this.direction = "ltr";
    this.scrollTimeout = null;
    this.countOverflowingElements = (container) => {
      const elements = Array.from(container.children);
      return elements.filter((element) => !isElementInView(container, element, false)).length;
    };
    this.handleScrollButtons = () => {
      const { isOverflowHorizontal } = this.props;
      clearTimeout(this.scrollTimeout);
      this.scrollTimeout = setTimeout(() => {
        const container = this.tabList.current;
        let disableBackScrollButton = true;
        let disableForwardScrollButton = true;
        let enableScrollButtons = false;
        let overflowingTabCount = 0;
        if (container && !this.props.isVertical && !isOverflowHorizontal) {
          const overflowOnLeft = !isElementInView(container, container.firstChild, false);
          const overflowOnRight = !isElementInView(container, container.lastChild, false);
          enableScrollButtons = overflowOnLeft || overflowOnRight;
          disableBackScrollButton = !overflowOnLeft;
          disableForwardScrollButton = !overflowOnRight;
        }
        if (isOverflowHorizontal) {
          overflowingTabCount = this.countOverflowingElements(container);
        }
        this.setState({
          enableScrollButtons,
          disableBackScrollButton,
          disableForwardScrollButton,
          overflowingTabCount
        });
      }, 100);
    };
    this.scrollBack = () => {
      if (this.tabList.current) {
        const container = this.tabList.current;
        const childrenArr = Array.from(container.children);
        let firstElementInView;
        let lastElementOutOfView;
        let i;
        for (i = 0; i < childrenArr.length && !firstElementInView; i++) {
          if (isElementInView(container, childrenArr[i], false)) {
            firstElementInView = childrenArr[i];
            lastElementOutOfView = childrenArr[i - 1];
          }
        }
        if (lastElementOutOfView) {
          if (this.direction === "ltr") {
            container.scrollLeft -= lastElementOutOfView.scrollWidth;
          } else {
            container.scrollLeft += lastElementOutOfView.scrollWidth;
          }
        }
      }
    };
    this.scrollForward = () => {
      if (this.tabList.current) {
        const container = this.tabList.current;
        const childrenArr = Array.from(container.children);
        let lastElementInView;
        let firstElementOutOfView;
        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {
          if (isElementInView(container, childrenArr[i], false)) {
            lastElementInView = childrenArr[i];
            firstElementOutOfView = childrenArr[i + 1];
          }
        }
        if (firstElementOutOfView) {
          if (this.direction === "ltr") {
            container.scrollLeft += firstElementOutOfView.scrollWidth;
          } else {
            container.scrollLeft -= firstElementOutOfView.scrollWidth;
          }
        }
      }
    };
    this.hideScrollButtons = () => {
      const { enableScrollButtons, renderScrollButtons, showScrollButtons } = this.state;
      if (!enableScrollButtons && !showScrollButtons && renderScrollButtons) {
        this.setState({ renderScrollButtons: false });
      }
    };
    this.state = {
      enableScrollButtons: false,
      showScrollButtons: false,
      renderScrollButtons: false,
      disableBackScrollButton: true,
      disableForwardScrollButton: true,
      shownKeys: this.props.defaultActiveKey !== void 0 ? [this.props.defaultActiveKey] : [this.props.activeKey],
      uncontrolledActiveKey: this.props.defaultActiveKey,
      uncontrolledIsExpandedLocal: this.props.defaultIsExpanded,
      ouiaStateId: getDefaultOUIAId(_Tabs.displayName),
      overflowingTabCount: 0
    };
    if (this.props.isVertical && this.props.expandable !== void 0) {
      if (!this.props.toggleAriaLabel && !this.props.toggleText) {
        console.error("Tabs:", "toggleAriaLabel or the toggleText prop is required to make the toggle button accessible");
      }
    }
  }
  handleTabClick(event, eventKey, tabContentRef) {
    const { shownKeys } = this.state;
    const { onSelect, defaultActiveKey } = this.props;
    if (defaultActiveKey !== void 0) {
      this.setState({
        uncontrolledActiveKey: eventKey
      });
    } else {
      onSelect(event, eventKey);
    }
    if (tabContentRef) {
      React303.Children.toArray(this.props.children).filter((child) => React303.isValidElement(child)).filter(({ props }) => props.tabContentRef && props.tabContentRef.current).forEach((child) => child.props.tabContentRef.current.hidden = true);
      if (tabContentRef.current) {
        tabContentRef.current.hidden = false;
      }
    }
    if (this.props.mountOnEnter) {
      this.setState({
        shownKeys: shownKeys.concat(eventKey)
      });
    }
  }
  componentDidMount() {
    if (!this.props.isVertical) {
      if (canUseDOM) {
        window.addEventListener("resize", this.handleScrollButtons, false);
      }
      this.direction = getLanguageDirection(this.tabList.current);
      this.handleScrollButtons();
    }
  }
  componentWillUnmount() {
    var _a;
    if (!this.props.isVertical) {
      if (canUseDOM) {
        window.removeEventListener("resize", this.handleScrollButtons, false);
      }
    }
    clearTimeout(this.scrollTimeout);
    (_a = this.leftScrollButtonRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener("transitionend", this.hideScrollButtons);
  }
  componentDidUpdate(prevProps, prevState) {
    const { activeKey, mountOnEnter, isOverflowHorizontal, children } = this.props;
    const { shownKeys, overflowingTabCount, enableScrollButtons } = this.state;
    if (prevProps.activeKey !== activeKey && mountOnEnter && shownKeys.indexOf(activeKey) < 0) {
      this.setState({
        shownKeys: shownKeys.concat(activeKey)
      });
    }
    if (prevProps.children && children && React303.Children.toArray(prevProps.children).length !== React303.Children.toArray(children).length) {
      this.handleScrollButtons();
    }
    const currentOverflowingTabCount = this.countOverflowingElements(this.tabList.current);
    if (isOverflowHorizontal && currentOverflowingTabCount) {
      this.setState({ overflowingTabCount: currentOverflowingTabCount + overflowingTabCount });
    }
    if (!prevState.enableScrollButtons && enableScrollButtons) {
      this.setState({ renderScrollButtons: true });
      setTimeout(() => {
        var _a;
        (_a = this.leftScrollButtonRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener("transitionend", this.hideScrollButtons);
        this.setState({ showScrollButtons: true });
      }, 100);
    } else if (prevState.enableScrollButtons && !enableScrollButtons) {
      this.setState({ showScrollButtons: false });
    }
    this.direction = getLanguageDirection(this.tabList.current);
  }
  render() {
    const _a = this.props, { className, children, activeKey, defaultActiveKey, id, isFilled, isSecondary, isVertical, isBox, hasNoBorderBottom, leftScrollAriaLabel, rightScrollAriaLabel, backScrollAriaLabel, forwardScrollAriaLabel, "aria-label": ariaLabel, component, ouiaId, ouiaSafe, mountOnEnter, unmountOnExit, usePageInsets, inset, variant, expandable, isExpanded, defaultIsExpanded, toggleText, toggleAriaLabel, addButtonAriaLabel, onToggle, onClose, onAdd, isOverflowHorizontal } = _a, props = __rest(_a, ["className", "children", "activeKey", "defaultActiveKey", "id", "isFilled", "isSecondary", "isVertical", "isBox", "hasNoBorderBottom", "leftScrollAriaLabel", "rightScrollAriaLabel", "backScrollAriaLabel", "forwardScrollAriaLabel", "aria-label", "component", "ouiaId", "ouiaSafe", "mountOnEnter", "unmountOnExit", "usePageInsets", "inset", "variant", "expandable", "isExpanded", "defaultIsExpanded", "toggleText", "toggleAriaLabel", "addButtonAriaLabel", "onToggle", "onClose", "onAdd", "isOverflowHorizontal"]);
    const { showScrollButtons, renderScrollButtons, disableBackScrollButton, disableForwardScrollButton, shownKeys, uncontrolledActiveKey, uncontrolledIsExpandedLocal, overflowingTabCount } = this.state;
    const filteredChildren = React303.Children.toArray(children).filter((child) => React303.isValidElement(child)).filter(({ props: props2 }) => !props2.isHidden);
    const filteredChildrenWithoutOverflow = filteredChildren.slice(0, filteredChildren.length - overflowingTabCount);
    const filteredChildrenOverflowing = filteredChildren.slice(filteredChildren.length - overflowingTabCount);
    const overflowingTabProps = filteredChildrenOverflowing.map((child) => child.props);
    const uniqueId = id || getUniqueId();
    const Component44 = component === TabsComponent.nav ? "nav" : "div";
    const localActiveKey = defaultActiveKey !== void 0 ? uncontrolledActiveKey : activeKey;
    const isExpandedLocal = defaultIsExpanded !== void 0 ? uncontrolledIsExpandedLocal : isExpanded;
    const toggleTabs = (event, newValue) => {
      if (isExpanded === void 0) {
        this.setState({ uncontrolledIsExpandedLocal: newValue });
      } else {
        onToggle(event, newValue);
      }
    };
    const hasOverflowTab = isOverflowHorizontal && overflowingTabCount > 0;
    const overflowObjectProps = typeof isOverflowHorizontal === "object" ? Object.assign({}, isOverflowHorizontal) : {};
    return React303.createElement(
      TabsContextProvider,
      { value: {
        variant,
        mountOnEnter,
        unmountOnExit,
        localActiveKey,
        uniqueId,
        handleTabClick: (...args) => this.handleTabClick(...args),
        handleTabClose: onClose
      } },
      React303.createElement(
        Component44,
        Object.assign({ "aria-label": ariaLabel, className: css(tabs_default.tabs, isFilled && tabs_default.modifiers.fill, isSecondary && tabs_default.modifiers.secondary, isVertical && tabs_default.modifiers.vertical, isVertical && expandable && formatBreakpointMods(expandable, tabs_default), isVertical && expandable && isExpandedLocal && tabs_default.modifiers.expanded, isBox && tabs_default.modifiers.box, showScrollButtons && tabs_default.modifiers.scrollable, usePageInsets && tabs_default.modifiers.pageInsets, hasNoBorderBottom && tabs_default.modifiers.noBorderBottom, formatBreakpointMods(inset, tabs_default), variantStyle5[variant], hasOverflowTab && tabs_default.modifiers.overflow, className) }, getOUIAProps(_Tabs.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), { id: id && id }, props),
        expandable && isVertical && React303.createElement(GenerateId, null, (randomId) => React303.createElement(
          "div",
          { className: css(tabs_default.tabsToggle) },
          React303.createElement(
            "div",
            { className: css(tabs_default.tabsToggleButton) },
            React303.createElement(
              Button,
              { onClick: (event) => toggleTabs(event, !isExpandedLocal), variant: "plain", "aria-label": toggleAriaLabel, "aria-expanded": isExpandedLocal, id: `${randomId}-button`, "aria-labelledby": `${randomId}-text ${randomId}-button` },
              React303.createElement(
                "span",
                { className: css(tabs_default.tabsToggleIcon) },
                React303.createElement(angle_right_icon_default, { "arian-hidden": "true" })
              ),
              toggleText && React303.createElement("span", { className: css(tabs_default.tabsToggleText), id: `${randomId}-text` }, toggleText)
            )
          )
        )),
        renderScrollButtons && React303.createElement(
          "button",
          { type: "button", className: css(tabs_default.tabsScrollButton, isSecondary && button_default.modifiers.secondary), "aria-label": backScrollAriaLabel || leftScrollAriaLabel, onClick: this.scrollBack, disabled: disableBackScrollButton, "aria-hidden": disableBackScrollButton, ref: this.leftScrollButtonRef },
          React303.createElement(angle_left_icon_default, null)
        ),
        React303.createElement(
          "ul",
          { className: css(tabs_default.tabsList), ref: this.tabList, onScroll: this.handleScrollButtons, role: "tablist" },
          isOverflowHorizontal ? filteredChildrenWithoutOverflow : filteredChildren,
          hasOverflowTab && React303.createElement(OverflowTab, Object.assign({ overflowingTabs: overflowingTabProps }, overflowObjectProps))
        ),
        renderScrollButtons && React303.createElement(
          "button",
          { type: "button", className: css(tabs_default.tabsScrollButton, isSecondary && button_default.modifiers.secondary), "aria-label": forwardScrollAriaLabel || rightScrollAriaLabel, onClick: this.scrollForward, disabled: disableForwardScrollButton, "aria-hidden": disableForwardScrollButton },
          React303.createElement(angle_right_icon_default, null)
        ),
        onAdd !== void 0 && React303.createElement(
          "span",
          { className: css(tabs_default.tabsAdd) },
          React303.createElement(
            Button,
            { variant: "plain", "aria-label": addButtonAriaLabel || "Add tab", onClick: onAdd },
            React303.createElement(plus_icon_default, null)
          )
        )
      ),
      filteredChildren.filter((child) => child.props.children && !(unmountOnExit && child.props.eventKey !== localActiveKey) && !(mountOnEnter && shownKeys.indexOf(child.props.eventKey) === -1)).map((child) => React303.createElement(TabContent, { key: child.props.eventKey, activeKey: localActiveKey, child, id: child.props.id || uniqueId, ouiaId: child.props.ouiaId }))
    );
  }
};
Tabs.displayName = "Tabs";
Tabs.defaultProps = {
  activeKey: 0,
  onSelect: () => void 0,
  isFilled: false,
  isSecondary: false,
  isVertical: false,
  isBox: false,
  hasNoBorderBottom: false,
  leftScrollAriaLabel: "Scroll left",
  backScrollAriaLabel: "Scroll back",
  rightScrollAriaLabel: "Scroll right",
  forwardScrollAriaLabel: "Scroll forward",
  component: TabsComponent.div,
  mountOnEnter: false,
  unmountOnExit: false,
  ouiaSafe: true,
  variant: "default",
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onToggle: (_event, _isExpanded) => void 0
};

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContentBody.js
init_tslib_es6();
var React304 = __toESM(require_react());
var TabContentBody = (_a) => {
  var { children, className, hasPadding } = _a, props = __rest(_a, ["children", "className", "hasPadding"]);
  return React304.createElement("div", Object.assign({ className: css(tab_content_default.tabContentBody, hasPadding && tab_content_default.modifiers.padding, className) }, props), children);
};
TabContentBody.displayName = "TabContentBody";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleIcon.js
init_tslib_es6();
var React305 = __toESM(require_react());
var TabTitleIcon = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return React305.createElement("span", Object.assign({ className: css(tabs_default.tabsItemIcon, className) }, props), children);
};
TabTitleIcon.displayName = "TabTitleIcon";

// node_modules/@patternfly/react-core/dist/esm/components/Tile/Tile.js
init_tslib_es6();
var React306 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Tile/tile.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Tile/tile.css";
var tile_default = {
  "modifiers": {
    "selected": "pf-m-selected",
    "disabled": "pf-m-disabled",
    "displayLg": "pf-m-display-lg",
    "stacked": "pf-m-stacked"
  },
  "themeDark": "pf-v5-theme-dark",
  "tile": "pf-v5-c-tile",
  "tileBody": "pf-v5-c-tile__body",
  "tileHeader": "pf-v5-c-tile__header",
  "tileIcon": "pf-v5-c-tile__icon",
  "tileTitle": "pf-v5-c-tile__title"
};

// node_modules/@patternfly/react-core/dist/esm/components/Tile/Tile.js
var Tile = (_a) => {
  var { children, title, icon, isStacked, isSelected, isDisabled, isDisplayLarge, className } = _a, props = __rest(_a, ["children", "title", "icon", "isStacked", "isSelected", "isDisabled", "isDisplayLarge", "className"]);
  return React306.createElement(
    "div",
    Object.assign({ role: "option", "aria-selected": isSelected }, isDisabled && { "aria-disabled": isDisabled }, { className: css(tile_default.tile, isSelected && tile_default.modifiers.selected, isDisabled && tile_default.modifiers.disabled, isDisplayLarge && tile_default.modifiers.displayLg, className), tabIndex: 0 }, props),
    React306.createElement(
      "div",
      { className: css(tile_default.tileHeader, isStacked && tile_default.modifiers.stacked) },
      icon && React306.createElement("div", { className: css(tile_default.tileIcon) }, icon),
      React306.createElement("div", { className: css(tile_default.tileTitle) }, title)
    ),
    children && React306.createElement("div", { className: css(tile_default.tileBody) }, children)
  );
};
Tile.displayName = "Tile";

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js
init_tslib_es6();
var React307 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePickerUtils.js
var amSuffix = " AM";
var pmSuffix = " PM";
var makeTimeOptions = (stepMinutes, hour12, delimiter, minTime, maxTime, includeSeconds) => {
  const res = [];
  const iter = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
  const iterDay = iter.getDay();
  while (iter.getDay() === iterDay) {
    let hour = iter.getHours();
    let suffix = amSuffix;
    if (hour12) {
      if (hour === 0) {
        hour = 12;
      } else if (hour >= 12) {
        suffix = pmSuffix;
      }
      if (hour > 12) {
        hour %= 12;
      }
    }
    hour = hour12 ? hour.toString() : hour.toString().padStart(2, "0");
    const minutes = iter.getMinutes().toString().padStart(2, "0");
    const timeOption = `${hour}${delimiter}${minutes}${hour12 ? suffix : ""}`;
    if (isWithinMinMax(minTime, maxTime, timeOption, delimiter, includeSeconds)) {
      res.push(timeOption);
    }
    iter.setMinutes(iter.getMinutes() + stepMinutes);
  }
  return res;
};
var parseTime = (time, timeRegex, delimiter, is12Hour, includeSeconds) => {
  const date = new Date(time);
  if (!isNaN(date.getDate()) && (time instanceof Date || time.includes("T"))) {
    const hours = is12Hour ? `${date.getHours() > 12 ? date.getHours() - 12 : date.getHours()}` : `${date.getHours()}`.padStart(2, "0");
    const minutes = `${date.getMinutes()}`.padStart(2, "0");
    const seconds = includeSeconds ? `${date.getSeconds()}`.padStart(2, "0") : "";
    const secondsWithDelimiter = seconds ? `${delimiter}${seconds}` : "";
    let ampm = "";
    if (is12Hour && date.getHours() > 11) {
      ampm = pmSuffix;
    } else if (is12Hour) {
      ampm = amSuffix;
    }
    return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;
  } else if (typeof time === "string") {
    time = time.trim();
    if (time !== "" && validateTime(time, timeRegex, delimiter, is12Hour)) {
      const [, hours, minutes, seconds, suffix = ""] = timeRegex.exec(time);
      const secondsWithDelimiter = includeSeconds ? `${delimiter}${seconds !== null && seconds !== void 0 ? seconds : "00"}` : "";
      let ampm = "";
      if (is12Hour) {
        const uppercaseSuffix = suffix.toUpperCase();
        if (uppercaseSuffix === amSuffix.toUpperCase().trim()) {
          ampm = amSuffix;
        } else if (uppercaseSuffix === pmSuffix.toUpperCase().trim()) {
          ampm = pmSuffix;
        } else {
          ampm = (/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix;
        }
      }
      return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;
    }
  }
  return time.toString();
};
var validateTime = (time, timeRegex, delimiter, is12Hour) => {
  const date = new Date(time);
  if (!isNaN(date.getDate()) && time.includes("T")) {
    return true;
  }
  const hours = parseInt(time.split(delimiter)[0]);
  const validHours = hours >= (is12Hour ? 1 : 0) && hours <= (is12Hour ? 12 : 23);
  return time === "" || timeRegex.test(time) && validHours;
};
var getHours = (time, timeRegex) => {
  const parts = time.match(timeRegex);
  if (parts && parts.length) {
    if (/pm/i.test(parts[4])) {
      return parseInt(parts[1]) === 12 ? parseInt(parts[1]) : parseInt(parts[1]) + 12;
    }
    if (/am/i.test(parts[4])) {
      return parseInt(parts[1]) === 12 ? 0 : parseInt(parts[1]);
    }
    return parseInt(parts[1]);
  }
  return null;
};
var getMinutes = (time, timeRegex) => {
  const parts = time.match(timeRegex);
  return parts && parts.length ? parseInt(parts[2]) : null;
};
var getSeconds = (time, timeRegex) => {
  var _a;
  const seconds = (_a = time.match(timeRegex)) === null || _a === void 0 ? void 0 : _a[3];
  return seconds ? parseInt(seconds) : null;
};
var isWithinMinMax = (minTime, maxTime, time, delimiter, includeSeconds) => {
  if (time.trim() === "") {
    return true;
  }
  const min24HourTime = convertTo24Hour(minTime, delimiter, includeSeconds);
  const selected24HourTime = convertTo24Hour(time, delimiter, includeSeconds);
  const max24HourTime = convertTo24Hour(maxTime, delimiter, includeSeconds);
  return min24HourTime <= selected24HourTime && selected24HourTime <= max24HourTime;
};
var convertTo24Hour = (time, delimiter, includeSeconds) => {
  const timeReg = new RegExp(`^\\s*(\\d\\d?)${delimiter}([0-5]\\d)${delimiter}?([0-5]\\d)?\\s*([AaPp][Mm])?\\s*$`);
  const regMatches = timeReg.exec(time);
  if (!regMatches || !regMatches.length) {
    return;
  }
  let hours = regMatches[1].padStart(2, "0");
  const minutes = regMatches[2];
  let seconds = regMatches[3] ? `${delimiter}${regMatches[3]}` : "";
  if (!seconds && includeSeconds) {
    seconds = `${delimiter}00`;
  }
  const suffix = regMatches[4] || "";
  if (suffix.toUpperCase() === "PM" && hours !== "12") {
    hours = `${parseInt(hours) + 12}`;
  } else if (suffix.toUpperCase() === "AM" && hours === "12") {
    hours = "00";
  }
  return `${hours}${delimiter}${minutes}${seconds}`;
};

// node_modules/@patternfly/react-icons/dist/esm/icons/outlined-clock-icon.js
var OutlinedClockIconConfig = {
  name: "OutlinedClockIcon",
  height: 512,
  width: 512,
  svgPath: "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm0 448c-110.5 0-200-89.5-200-200S145.5 56 256 56s200 89.5 200 200-89.5 200-200 200zm61.8-104.4l-84.9-61.7c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v141.7l66.8 48.6c5.4 3.9 6.5 11.4 2.6 16.8L334.6 349c-3.9 5.3-11.4 6.5-16.8 2.6z",
  yOffset: 0,
  xOffset: 0
};
var OutlinedClockIcon = createIcon(OutlinedClockIconConfig);
var outlined_clock_icon_default = OutlinedClockIcon;

// node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_Width.js
var c_date_picker__input_c_form_control_Width = {
  "name": "--pf-v5-c-date-picker__input--c-form-control--Width",
  "value": "calc(10 * 1ch + calc(2rem + 0.5rem))",
  "var": "var(--pf-v5-c-date-picker__input--c-form-control--Width)"
};
var c_date_picker_input_c_form_control_Width_default = c_date_picker__input_c_form_control_Width;

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js
var TimePicker = class extends React307.Component {
  constructor(props) {
    super(props);
    this.baseComponentRef = React307.createRef();
    this.toggleRef = React307.createRef();
    this.inputRef = React307.createRef();
    this.menuRef = React307.createRef();
    this.onDocClick = (event) => {
      var _a, _b, _c, _d;
      const clickedOnToggle = (_b = (_a = this.toggleRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);
      const clickedWithinMenu = (_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target);
      if (this.state.isTimeOptionsOpen && !(clickedOnToggle || clickedWithinMenu)) {
        this.onToggle(false);
      }
    };
    this.handleGlobalKeys = (event) => {
      var _a, _b, _c, _d;
      const { isTimeOptionsOpen, focusedIndex, scrollIndex } = this.state;
      if ((_b = (_a = this.inputRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) {
        if (!isTimeOptionsOpen && event.key !== KeyTypes.Tab && event.key !== KeyTypes.Escape) {
          this.onToggle(true);
        } else if (isTimeOptionsOpen) {
          if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {
            this.onToggle(false);
          } else if (event.key === KeyTypes.Enter) {
            if (focusedIndex !== null) {
              this.focusSelection(focusedIndex);
              event.stopPropagation();
            } else {
              this.onToggle(false);
            }
          } else if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {
            this.focusSelection(scrollIndex);
            this.updateFocusedIndex(0);
            event.preventDefault();
          }
        }
      } else if ((_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {
        if (event.key === KeyTypes.ArrowDown) {
          this.updateFocusedIndex(1);
          event.preventDefault();
        } else if (event.key === KeyTypes.ArrowUp) {
          this.updateFocusedIndex(-1);
          event.preventDefault();
        } else if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {
          this.inputRef.current.focus();
          this.onToggle(false);
        }
      }
    };
    this.updateFocusedIndex = (increment) => {
      this.setState((prevState) => {
        const maxIndex = this.getOptions().length - 1;
        let nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex + increment;
        if (nextIndex < 0) {
          nextIndex = maxIndex;
        } else if (nextIndex > maxIndex) {
          nextIndex = 0;
        }
        this.scrollToIndex(nextIndex);
        return {
          focusedIndex: nextIndex
        };
      });
    };
    this.getIndexToScroll = (index) => {
      if (this.props.menuAppendTo === "inline") {
        return index > 0 ? index - 1 : 0;
      }
      return index;
    };
    this.scrollToIndex = (index) => {
      this.getOptions()[index].closest(`.${menu_default.menuContent}`).scrollTop = this.getOptions()[this.getIndexToScroll(index)].offsetTop;
    };
    this.focusSelection = (index) => {
      var _a;
      const indexToFocus = index !== -1 ? index : 0;
      if ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) {
        this.getOptions()[indexToFocus].querySelector(`.${menu_default.menuItem}`).focus();
      }
    };
    this.scrollToSelection = (time2) => {
      const { delimiter: delimiter2, is24Hour: is24Hour2 } = this.props;
      let splitTime = time2.split(this.props.delimiter);
      let focusedIndex = null;
      if (splitTime.length < 2) {
        time2 = `${time2}${delimiter2}00`;
        splitTime = time2.split(delimiter2);
      } else if (splitTime.length > 2) {
        time2 = parseTime(time2, this.state.timeRegex, delimiter2, !is24Hour2, false);
        splitTime = time2.split(delimiter2);
      }
      if (!is24Hour2 && splitTime.length > 1 && splitTime[1].length < 2) {
        const minutes = splitTime[1].length === 0 ? "00" : splitTime[1] + "0";
        time2 = `${splitTime[0]}${delimiter2}${minutes}${(/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix}`;
      } else if (!is24Hour2 && splitTime.length > 1 && splitTime[1].length === 2 && !time2.toUpperCase().includes(amSuffix.toUpperCase().trim()) && !time2.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {
        time2 = `${time2}${(/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix}`;
      }
      let scrollIndex = this.getOptions().findIndex((option) => option.textContent === time2);
      if (scrollIndex !== -1) {
        this.scrollToIndex(scrollIndex);
        focusedIndex = scrollIndex;
      } else if (splitTime.length === 2) {
        let amPm = "";
        if (!is24Hour2) {
          if (splitTime[1].toUpperCase().includes("P")) {
            amPm = pmSuffix;
          } else if (splitTime[1].toUpperCase().includes("A")) {
            amPm = amSuffix;
          }
        }
        time2 = `${splitTime[0]}${delimiter2}00${amPm}`;
        scrollIndex = this.getOptions().findIndex((option) => option.textContent === time2);
        if (scrollIndex !== -1) {
          this.scrollToIndex(scrollIndex);
        }
      }
      this.setState({
        focusedIndex,
        scrollIndex
      });
    };
    this.getRegExp = (includeSeconds2 = true) => {
      const { is24Hour: is24Hour2, delimiter: delimiter2 } = this.props;
      let baseRegex = `\\s*(\\d\\d?)${delimiter2}([0-5]\\d)`;
      if (includeSeconds2) {
        baseRegex += `${delimiter2}?([0-5]\\d)?`;
      }
      return new RegExp(`^${baseRegex}${is24Hour2 ? "" : "\\s*([AaPp][Mm])?"}\\s*$`);
    };
    this.getOptions = () => {
      var _a;
      return ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) ? Array.from(this.menuRef.current.querySelectorAll(`.${menu_default.menuListItem}`)) : [];
    };
    this.isValidFormat = (time2) => {
      if (this.props.validateTime) {
        return this.props.validateTime(time2);
      }
      const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2 } = this.props;
      return validateTime(time2, this.getRegExp(includeSeconds2), delimiter2, !is24Hour2);
    };
    this.isValidTime = (time2) => {
      const { delimiter: delimiter2, includeSeconds: includeSeconds2 } = this.props;
      const { minTimeState, maxTimeState } = this.state;
      return isWithinMinMax(minTimeState, maxTimeState, time2, delimiter2, includeSeconds2);
    };
    this.isValid = (time2) => this.isValidFormat(time2) && this.isValidTime(time2);
    this.onToggle = (isOpen2) => {
      this.setState((prevState) => {
        const { timeRegex: timeRegex2, isInvalid, timeState } = prevState;
        const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2, onChange } = this.props;
        const time2 = parseTime(timeState, timeRegex2, delimiter2, !is24Hour2, includeSeconds2);
        if (onChange && !isOpen2 && time2 !== timeState) {
          onChange(null, time2, getHours(time2, timeRegex2), getMinutes(time2, timeRegex2), getSeconds(time2, timeRegex2), this.isValid(time2));
        }
        return {
          isTimeOptionsOpen: isOpen2,
          timeState: time2,
          isInvalid: isOpen2 ? isInvalid : !this.isValid(time2)
        };
      });
      this.props.setIsOpen(isOpen2);
      if (!isOpen2) {
        this.inputRef.current.focus();
      }
    };
    this.onSelect = (e) => {
      const { timeRegex: timeRegex2, timeState } = this.state;
      const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2, setIsOpen } = this.props;
      const time2 = parseTime(e.target.textContent, timeRegex2, delimiter2, !is24Hour2, includeSeconds2);
      if (time2 !== timeState) {
        this.onInputChange(e, time2);
      }
      this.inputRef.current.focus();
      this.setState({
        isTimeOptionsOpen: false,
        isInvalid: false
      });
      setIsOpen(false);
    };
    this.onInputClick = (e) => {
      if (!this.state.isTimeOptionsOpen) {
        this.onToggle(true);
      }
      e.stopPropagation();
    };
    this.onInputChange = (event, newTime) => {
      const { onChange } = this.props;
      const { timeRegex: timeRegex2 } = this.state;
      if (onChange) {
        onChange(event, newTime, getHours(newTime, timeRegex2), getMinutes(newTime, timeRegex2), getSeconds(newTime, timeRegex2), this.isValid(newTime));
      }
      this.scrollToSelection(newTime);
      this.setState({
        timeState: newTime
      });
    };
    const { is24Hour, delimiter, time, includeSeconds, isOpen } = this.props;
    let { minTime, maxTime } = this.props;
    if (minTime === "") {
      const minSeconds = includeSeconds ? `${delimiter}00` : "";
      minTime = is24Hour ? `00${delimiter}00${minSeconds}` : `12${delimiter}00${minSeconds} AM`;
    }
    if (maxTime === "") {
      const maxSeconds = includeSeconds ? `${delimiter}59` : "";
      maxTime = is24Hour ? `23${delimiter}59${maxSeconds}` : `11${delimiter}59${maxSeconds} PM`;
    }
    const timeRegex = this.getRegExp();
    this.state = {
      isInvalid: false,
      isTimeOptionsOpen: isOpen,
      timeState: parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds),
      focusedIndex: null,
      scrollIndex: 0,
      timeRegex,
      minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds),
      maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)
    };
  }
  componentDidMount() {
    document.addEventListener("mousedown", this.onDocClick);
    document.addEventListener("touchstart", this.onDocClick);
    document.addEventListener("keydown", this.handleGlobalKeys);
    this.setState({ isInvalid: !this.isValid(this.state.timeState) });
  }
  componentWillUnmount() {
    document.removeEventListener("mousedown", this.onDocClick);
    document.removeEventListener("touchstart", this.onDocClick);
    document.removeEventListener("keydown", this.handleGlobalKeys);
  }
  componentDidUpdate(prevProps, prevState) {
    const { timeState, isTimeOptionsOpen, isInvalid, timeRegex } = this.state;
    const { time, is24Hour, delimiter, includeSeconds, isOpen, minTime, maxTime } = this.props;
    if (prevProps.isOpen !== isOpen) {
      this.onToggle(isOpen);
    }
    if (isTimeOptionsOpen && !prevState.isTimeOptionsOpen && timeState && !isInvalid) {
      this.scrollToSelection(timeState);
    }
    if (delimiter !== prevProps.delimiter) {
      this.setState({
        timeRegex: this.getRegExp()
      });
    }
    if (time !== "" && time !== prevProps.time) {
      const parsedTime = parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds);
      this.setState({
        timeState: parsedTime,
        isInvalid: !this.isValid(parsedTime)
      });
    }
    if (minTime !== "" && minTime !== prevProps.minTime) {
      this.setState({
        minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds)
      });
    }
    if (maxTime !== "" && maxTime !== prevProps.maxTime) {
      this.setState({
        maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)
      });
    }
  }
  render() {
    const _a = this.props, {
      "aria-label": ariaLabel,
      isDisabled,
      className,
      placeholder,
      id,
      menuAppendTo,
      is24Hour,
      invalidFormatErrorMessage,
      invalidMinMaxErrorMessage,
      stepMinutes,
      width,
      delimiter,
      inputProps,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      onChange,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      setIsOpen,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      isOpen,
      time,
      validateTime: validateTime2,
      minTime,
      maxTime,
      includeSeconds,
      zIndex
    } = _a, props = __rest(_a, ["aria-label", "isDisabled", "className", "placeholder", "id", "menuAppendTo", "is24Hour", "invalidFormatErrorMessage", "invalidMinMaxErrorMessage", "stepMinutes", "width", "delimiter", "inputProps", "onChange", "setIsOpen", "isOpen", "time", "validateTime", "minTime", "maxTime", "includeSeconds", "zIndex"]);
    const { timeState, isTimeOptionsOpen, isInvalid, minTimeState, maxTimeState } = this.state;
    const style = { [c_date_picker_input_c_form_control_Width_default.name]: width };
    const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter, minTimeState, maxTimeState, includeSeconds);
    const isValidFormat = this.isValidFormat(timeState);
    const randomId = id || getUniqueId("time-picker");
    const getParentElement = () => {
      if (this.baseComponentRef && this.baseComponentRef.current) {
        return this.baseComponentRef.current.parentElement;
      }
      return null;
    };
    const menuContainer = React307.createElement(
      Menu,
      { ref: this.menuRef, isScrollable: true },
      React307.createElement(
        MenuContent,
        { maxMenuHeight: "200px" },
        React307.createElement(MenuList, { "aria-label": ariaLabel }, options.map((option, index) => React307.createElement(MenuItem, { onClick: this.onSelect, key: option, id: `${randomId}-option-${index}` }, option)))
      )
    );
    const textInput = React307.createElement(TextInput, Object.assign({ "aria-haspopup": "menu", id: `${randomId}-input`, "aria-label": ariaLabel, validated: isInvalid ? "error" : "default", placeholder, value: timeState || "", type: "text", customIcon: React307.createElement(outlined_clock_icon_default, null), onClick: this.onInputClick, onChange: this.onInputChange, autoComplete: "off", isDisabled, isExpanded: isTimeOptionsOpen, ref: this.inputRef }, inputProps));
    let calculatedAppendTo;
    switch (menuAppendTo) {
      case "inline":
        calculatedAppendTo = () => this.toggleRef.current;
        break;
      case "parent":
        calculatedAppendTo = getParentElement;
        break;
      default:
        calculatedAppendTo = menuAppendTo;
    }
    return React307.createElement(
      "div",
      { ref: this.baseComponentRef, className: css(date_picker_default.datePicker, className) },
      React307.createElement(
        "div",
        Object.assign({ className: css(date_picker_default.datePickerInput), style }, props),
        React307.createElement(
          InputGroup,
          null,
          React307.createElement(
            InputGroupItem,
            null,
            React307.createElement(
              "div",
              { id: randomId },
              React307.createElement(
                "div",
                { ref: this.toggleRef, style: { paddingLeft: "0" } },
                React307.createElement(Popper, { appendTo: calculatedAppendTo, trigger: textInput, triggerRef: this.toggleRef, popper: menuContainer, popperRef: this.menuRef, isVisible: isTimeOptionsOpen, zIndex })
              )
            )
          )
        ),
        isInvalid && React307.createElement(
          "div",
          { className: css(date_picker_default.datePickerHelperText) },
          React307.createElement(
            HelperText,
            null,
            React307.createElement(HelperTextItem, { variant: "error" }, !isValidFormat ? invalidFormatErrorMessage : invalidMinMaxErrorMessage)
          )
        )
      )
    );
  }
};
TimePicker.displayName = "TimePicker";
TimePicker.defaultProps = {
  className: "",
  isDisabled: false,
  time: "",
  is24Hour: false,
  invalidFormatErrorMessage: "Invalid time format",
  invalidMinMaxErrorMessage: "Invalid time entered",
  placeholder: "hh:mm",
  delimiter: ":",
  "aria-label": "Time picker",
  width: "150px",
  menuAppendTo: "inline",
  stepMinutes: 30,
  inputProps: {},
  minTime: "",
  maxTime: "",
  isOpen: false,
  setIsOpen: () => {
  },
  zIndex: 9999
};

// node_modules/@patternfly/react-core/dist/esm/components/Timestamp/Timestamp.js
init_tslib_es6();
var React308 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Timestamp/timestamp.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Timestamp/timestamp.css";
var timestamp_default = {
  "modifiers": {
    "helpText": "pf-m-help-text"
  },
  "timestamp": "pf-v5-c-timestamp"
};

// node_modules/@patternfly/react-core/dist/esm/components/Timestamp/Timestamp.js
var TimestampFormat;
(function(TimestampFormat2) {
  TimestampFormat2["full"] = "full";
  TimestampFormat2["long"] = "long";
  TimestampFormat2["medium"] = "medium";
  TimestampFormat2["short"] = "short";
})(TimestampFormat || (TimestampFormat = {}));
var TimestampTooltipVariant;
(function(TimestampTooltipVariant2) {
  TimestampTooltipVariant2["default"] = "default";
  TimestampTooltipVariant2["custom"] = "custom";
})(TimestampTooltipVariant || (TimestampTooltipVariant = {}));
var Timestamp = (_a) => {
  var { children, className, customFormat, date: dateProp, dateFormat, displaySuffix = "", is12Hour, locale, shouldDisplayUTC, timeFormat, tooltip } = _a, props = __rest(_a, ["children", "className", "customFormat", "date", "dateFormat", "displaySuffix", "is12Hour", "locale", "shouldDisplayUTC", "timeFormat", "tooltip"]);
  const [date, setDate] = React308.useState(() => {
    const initDate = new Date(dateProp);
    if (isValidDate(initDate)) {
      return initDate;
    }
    return /* @__PURE__ */ new Date();
  });
  React308.useEffect(() => {
    const dateFromProp = new Date(dateProp);
    if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {
      setDate(dateFromProp);
    } else if (!dateProp) {
      setDate(/* @__PURE__ */ new Date());
    }
  }, [dateProp]);
  const hasTimeFormat = timeFormat && !customFormat;
  const formatOptions = Object.assign(Object.assign(Object.assign({}, dateFormat && !customFormat && { dateStyle: dateFormat }), customFormat && Object.assign({}, customFormat)), is12Hour !== void 0 && { hour12: is12Hour });
  const dateAsLocaleString = new Date(date).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && { timeStyle: timeFormat }));
  const utcTimeFormat = timeFormat !== "short" ? "medium" : "short";
  const convertToUTCString = (date2) => new Date(date2).toUTCString().slice(0, -3);
  const utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && { timeStyle: utcTimeFormat }));
  const defaultUTCSuffix = timeFormat === "full" ? "Coordinated Universal Time" : "UTC";
  const createUTCContent = (customSuffix) => `${utcDateString} ${customSuffix ? customSuffix : defaultUTCSuffix}`;
  const defaultDisplay = shouldDisplayUTC ? createUTCContent(displaySuffix) : `${dateAsLocaleString}${displaySuffix ? " " + displaySuffix : ""}`;
  const { dateTime } = props, propsWithoutDateTime = __rest(props, ["dateTime"]);
  const timestamp = React308.createElement(
    "span",
    Object.assign({ className: css(timestamp_default.timestamp, tooltip && timestamp_default.modifiers.helpText, className) }, tooltip && { tabIndex: 0 }, propsWithoutDateTime),
    React308.createElement("time", { className: `${timestamp_default.timestamp}__text`, dateTime: dateTime || new Date(date).toISOString() }, !children ? defaultDisplay : children)
  );
  return tooltip ? React308.createElement(Tooltip, Object.assign({ content: tooltip.variant === TimestampTooltipVariant.default ? createUTCContent(tooltip.suffix) : tooltip.content }, tooltip.tooltipProps), timestamp) : timestamp;
};
Timestamp.displayName = "Timestamp";

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroup.js
init_tslib_es6();
var React311 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ToggleGroup/toggle-group.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/ToggleGroup/toggle-group.css";
var toggle_group_default = {
  "modifiers": {
    "compact": "pf-m-compact",
    "selected": "pf-m-selected",
    "disabled": "pf-m-disabled"
  },
  "themeDark": "pf-v5-theme-dark",
  "toggleGroup": "pf-v5-c-toggle-group",
  "toggleGroupButton": "pf-v5-c-toggle-group__button",
  "toggleGroupIcon": "pf-v5-c-toggle-group__icon",
  "toggleGroupItem": "pf-v5-c-toggle-group__item",
  "toggleGroupText": "pf-v5-c-toggle-group__text"
};

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItem.js
init_tslib_es6();
var React310 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItemElement.js
var React309 = __toESM(require_react());
var ToggleGroupItemVariant;
(function(ToggleGroupItemVariant2) {
  ToggleGroupItemVariant2["icon"] = "icon";
  ToggleGroupItemVariant2["text"] = "text";
})(ToggleGroupItemVariant || (ToggleGroupItemVariant = {}));
var ToggleGroupItemElement = ({ variant, children }) => React309.createElement("span", { className: css(variant === "icon" && toggle_group_default.toggleGroupIcon, variant === "text" && toggle_group_default.toggleGroupText) }, children);
ToggleGroupItemElement.displayName = "ToggleGroupItemElement";

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItem.js
var ToggleGroupItem = (_a) => {
  var { text, icon, className, isDisabled = false, isSelected = false, "aria-label": ariaLabel = "", onChange = () => {
  }, buttonId = "" } = _a, props = __rest(_a, ["text", "icon", "className", "isDisabled", "isSelected", "aria-label", "onChange", "buttonId"]);
  const handleChange = (event) => {
    onChange(event, !isSelected);
  };
  if (!ariaLabel && icon && !text) {
    console.warn("An accessible aria-label is required when using the toggle group item icon variant.");
  }
  return React310.createElement(
    "div",
    Object.assign({ className: css(toggle_group_default.toggleGroupItem, className) }, props),
    React310.createElement(
      "button",
      Object.assign({ type: "button", className: css(toggle_group_default.toggleGroupButton, isSelected && toggle_group_default.modifiers.selected), "aria-pressed": isSelected, onClick: handleChange }, ariaLabel && { "aria-label": ariaLabel }, isDisabled && { disabled: true }, buttonId && { id: buttonId }),
      icon ? React310.createElement(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.icon }, icon) : null,
      text ? React310.createElement(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.text }, text) : null
    )
  );
};
ToggleGroupItem.displayName = "ToggleGroupItem";

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroup.js
var ToggleGroup = (_a) => {
  var { className, children, isCompact = false, areAllGroupsDisabled = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "isCompact", "areAllGroupsDisabled", "aria-label"]);
  const toggleGroupItemList = React311.Children.map(children, (child) => !(React311.isValidElement(child) && child.type === ToggleGroupItem) ? child : React311.cloneElement(child, areAllGroupsDisabled ? { isDisabled: true } : {}));
  return React311.createElement("div", Object.assign({ className: css(toggle_group_default.toggleGroup, isCompact && toggle_group_default.modifiers.compact, className), role: "group", "aria-label": ariaLabel }, props), toggleGroupItemList);
};
ToggleGroup.displayName = "ToggleGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/Toolbar.js
init_tslib_es6();
var React316 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.css";
var toolbar_default = {
  "button": "pf-v5-c-button",
  "chipGroup": "pf-v5-c-chip-group",
  "divider": "pf-v5-c-divider",
  "modifiers": {
    "hidden": "pf-m-hidden",
    "hiddenOnSm": "pf-m-hidden-on-sm",
    "visibleOnSm": "pf-m-visible-on-sm",
    "hiddenOnMd": "pf-m-hidden-on-md",
    "visibleOnMd": "pf-m-visible-on-md",
    "hiddenOnLg": "pf-m-hidden-on-lg",
    "visibleOnLg": "pf-m-visible-on-lg",
    "hiddenOnXl": "pf-m-hidden-on-xl",
    "visibleOnXl": "pf-m-visible-on-xl",
    "hiddenOn_2xl": "pf-m-hidden-on-2xl",
    "visibleOn_2xl": "pf-m-visible-on-2xl",
    "pageInsets": "pf-m-page-insets",
    "sticky": "pf-m-sticky",
    "fullHeight": "pf-m-full-height",
    "static": "pf-m-static",
    "vertical": "pf-m-vertical",
    "alignItemsStart": "pf-m-align-items-start",
    "alignItemsCenter": "pf-m-align-items-center",
    "alignItemsBaseline": "pf-m-align-items-baseline",
    "alignSelfStart": "pf-m-align-self-start",
    "alignSelfCenter": "pf-m-align-self-center",
    "alignSelfBaseline": "pf-m-align-self-baseline",
    "buttonGroup": "pf-m-button-group",
    "iconButtonGroup": "pf-m-icon-button-group",
    "filterGroup": "pf-m-filter-group",
    "toggleGroup": "pf-m-toggle-group",
    "overflowMenu": "pf-m-overflow-menu",
    "bulkSelect": "pf-m-bulk-select",
    "expandAll": "pf-m-expand-all",
    "expanded": "pf-m-expanded",
    "searchFilter": "pf-m-search-filter",
    "chipGroup": "pf-m-chip-group",
    "label": "pf-m-label",
    "formElement": "pf-m-form-element",
    "pagination": "pf-m-pagination",
    "overflowContainer": "pf-m-overflow-container",
    "chipContainer": "pf-m-chip-container",
    "plain": "pf-m-plain",
    "show": "pf-m-show",
    "showOnSm": "pf-m-show-on-sm",
    "showOnMd": "pf-m-show-on-md",
    "showOnLg": "pf-m-show-on-lg",
    "showOnXl": "pf-m-show-on-xl",
    "showOn_2xl": "pf-m-show-on-2xl",
    "alignRight": "pf-m-align-right",
    "alignLeft": "pf-m-align-left",
    "nowrap": "pf-m-nowrap",
    "wrap": "pf-m-wrap",
    "alignRightOnSm": "pf-m-align-right-on-sm",
    "alignLeftOnSm": "pf-m-align-left-on-sm",
    "nowrapOnSm": "pf-m-nowrap-on-sm",
    "wrapOnSm": "pf-m-wrap-on-sm",
    "alignRightOnMd": "pf-m-align-right-on-md",
    "alignLeftOnMd": "pf-m-align-left-on-md",
    "nowrapOnMd": "pf-m-nowrap-on-md",
    "wrapOnMd": "pf-m-wrap-on-md",
    "alignRightOnLg": "pf-m-align-right-on-lg",
    "alignLeftOnLg": "pf-m-align-left-on-lg",
    "nowrapOnLg": "pf-m-nowrap-on-lg",
    "wrapOnLg": "pf-m-wrap-on-lg",
    "alignRightOnXl": "pf-m-align-right-on-xl",
    "alignLeftOnXl": "pf-m-align-left-on-xl",
    "nowrapOnXl": "pf-m-nowrap-on-xl",
    "wrapOnXl": "pf-m-wrap-on-xl",
    "alignRightOn_2xl": "pf-m-align-right-on-2xl",
    "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
    "nowrapOn_2xl": "pf-m-nowrap-on-2xl",
    "wrapOn_2xl": "pf-m-wrap-on-2xl",
    "spaceItemsNone": "pf-m-space-items-none",
    "spaceItemsSm": "pf-m-space-items-sm",
    "spaceItemsMd": "pf-m-space-items-md",
    "spaceItemsLg": "pf-m-space-items-lg",
    "spaceItemsNoneOnSm": "pf-m-space-items-none-on-sm",
    "spaceItemsSmOnSm": "pf-m-space-items-sm-on-sm",
    "spaceItemsMdOnSm": "pf-m-space-items-md-on-sm",
    "spaceItemsLgOnSm": "pf-m-space-items-lg-on-sm",
    "spaceItemsNoneOnMd": "pf-m-space-items-none-on-md",
    "spaceItemsSmOnMd": "pf-m-space-items-sm-on-md",
    "spaceItemsMdOnMd": "pf-m-space-items-md-on-md",
    "spaceItemsLgOnMd": "pf-m-space-items-lg-on-md",
    "spaceItemsNoneOnLg": "pf-m-space-items-none-on-lg",
    "spaceItemsSmOnLg": "pf-m-space-items-sm-on-lg",
    "spaceItemsMdOnLg": "pf-m-space-items-md-on-lg",
    "spaceItemsLgOnLg": "pf-m-space-items-lg-on-lg",
    "spaceItemsNoneOnXl": "pf-m-space-items-none-on-xl",
    "spaceItemsSmOnXl": "pf-m-space-items-sm-on-xl",
    "spaceItemsMdOnXl": "pf-m-space-items-md-on-xl",
    "spaceItemsLgOnXl": "pf-m-space-items-lg-on-xl",
    "spaceItemsNoneOn_2xl": "pf-m-space-items-none-on-2xl",
    "spaceItemsSmOn_2xl": "pf-m-space-items-sm-on-2xl",
    "spaceItemsMdOn_2xl": "pf-m-space-items-md-on-2xl",
    "spaceItemsLgOn_2xl": "pf-m-space-items-lg-on-2xl",
    "spacerNone": "pf-m-spacer-none",
    "spacerSm": "pf-m-spacer-sm",
    "spacerMd": "pf-m-spacer-md",
    "spacerLg": "pf-m-spacer-lg",
    "spacerNoneOnSm": "pf-m-spacer-none-on-sm",
    "spacerSmOnSm": "pf-m-spacer-sm-on-sm",
    "spacerMdOnSm": "pf-m-spacer-md-on-sm",
    "spacerLgOnSm": "pf-m-spacer-lg-on-sm",
    "spacerNoneOnMd": "pf-m-spacer-none-on-md",
    "spacerSmOnMd": "pf-m-spacer-sm-on-md",
    "spacerMdOnMd": "pf-m-spacer-md-on-md",
    "spacerLgOnMd": "pf-m-spacer-lg-on-md",
    "spacerNoneOnLg": "pf-m-spacer-none-on-lg",
    "spacerSmOnLg": "pf-m-spacer-sm-on-lg",
    "spacerMdOnLg": "pf-m-spacer-md-on-lg",
    "spacerLgOnLg": "pf-m-spacer-lg-on-lg",
    "spacerNoneOnXl": "pf-m-spacer-none-on-xl",
    "spacerSmOnXl": "pf-m-spacer-sm-on-xl",
    "spacerMdOnXl": "pf-m-spacer-md-on-xl",
    "spacerLgOnXl": "pf-m-spacer-lg-on-xl",
    "spacerNoneOn_2xl": "pf-m-spacer-none-on-2xl",
    "spacerSmOn_2xl": "pf-m-spacer-sm-on-2xl",
    "spacerMdOn_2xl": "pf-m-spacer-md-on-2xl",
    "spacerLgOn_2xl": "pf-m-spacer-lg-on-2xl",
    "insetNone": "pf-m-inset-none",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "insetNoneOnSm": "pf-m-inset-none-on-sm",
    "insetSmOnSm": "pf-m-inset-sm-on-sm",
    "insetMdOnSm": "pf-m-inset-md-on-sm",
    "insetLgOnSm": "pf-m-inset-lg-on-sm",
    "insetXlOnSm": "pf-m-inset-xl-on-sm",
    "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
    "insetNoneOnMd": "pf-m-inset-none-on-md",
    "insetSmOnMd": "pf-m-inset-sm-on-md",
    "insetMdOnMd": "pf-m-inset-md-on-md",
    "insetLgOnMd": "pf-m-inset-lg-on-md",
    "insetXlOnMd": "pf-m-inset-xl-on-md",
    "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
    "insetNoneOnLg": "pf-m-inset-none-on-lg",
    "insetSmOnLg": "pf-m-inset-sm-on-lg",
    "insetMdOnLg": "pf-m-inset-md-on-lg",
    "insetLgOnLg": "pf-m-inset-lg-on-lg",
    "insetXlOnLg": "pf-m-inset-xl-on-lg",
    "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
    "insetNoneOnXl": "pf-m-inset-none-on-xl",
    "insetSmOnXl": "pf-m-inset-sm-on-xl",
    "insetMdOnXl": "pf-m-inset-md-on-xl",
    "insetLgOnXl": "pf-m-inset-lg-on-xl",
    "insetXlOnXl": "pf-m-inset-xl-on-xl",
    "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
    "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
    "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
    "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
    "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
    "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
    "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
  },
  "pagination": "pf-v5-c-pagination",
  "toolbar": "pf-v5-c-toolbar",
  "toolbarContent": "pf-v5-c-toolbar__content",
  "toolbarContentSection": "pf-v5-c-toolbar__content-section",
  "toolbarExpandAllIcon": "pf-v5-c-toolbar__expand-all-icon",
  "toolbarExpandableContent": "pf-v5-c-toolbar__expandable-content",
  "toolbarGroup": "pf-v5-c-toolbar__group",
  "toolbarItem": "pf-v5-c-toolbar__item",
  "toolbarToggle": "pf-v5-c-toolbar__toggle"
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarUtils.js
var React312 = __toESM(require_react());
var ToolbarContext = React312.createContext({
  isExpanded: false,
  toggleIsExpanded: () => {
  },
  chipGroupContentRef: null,
  updateNumberFilters: () => {
  },
  numberOfFilters: 0,
  clearAllFilters: () => {
  }
});
var ToolbarContentContext = React312.createContext({
  expandableContentRef: null,
  expandableContentId: "",
  chipContainerRef: null,
  clearAllFilters: () => {
  }
});
var globalBreakpoints = {
  md: parseInt(global_breakpoint_md_default.value),
  lg: parseInt(global_breakpoint_lg_default.value),
  xl: parseInt(global_breakpoint_xl_default.value),
  "2xl": parseInt(global_breakpoint_2xl_default.value)
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarChipGroupContent.js
init_tslib_es6();
var React315 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarItem.js
init_tslib_es6();
var React313 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_toolbar__item_Width.js
var c_toolbar__item_Width = {
  "name": "--pf-v5-c-toolbar__item--Width",
  "value": "auto",
  "var": "var(--pf-v5-c-toolbar__item--Width)"
};
var c_toolbar_item_Width_default = c_toolbar__item_Width;

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarItem.js
var ToolbarItemVariant;
(function(ToolbarItemVariant2) {
  ToolbarItemVariant2["separator"] = "separator";
  ToolbarItemVariant2["bulk-select"] = "bulk-select";
  ToolbarItemVariant2["overflow-menu"] = "overflow-menu";
  ToolbarItemVariant2["pagination"] = "pagination";
  ToolbarItemVariant2["search-filter"] = "search-filter";
  ToolbarItemVariant2["label"] = "label";
  ToolbarItemVariant2["chip-group"] = "chip-group";
  ToolbarItemVariant2["expand-all"] = "expand-all";
})(ToolbarItemVariant || (ToolbarItemVariant = {}));
var ToolbarItem = (_a) => {
  var { className, variant, visibility, spacer, widths, align, alignSelf, alignItems, id, children, isAllExpanded, isOverflowContainer } = _a, props = __rest(_a, ["className", "variant", "visibility", "spacer", "widths", "align", "alignSelf", "alignItems", "id", "children", "isAllExpanded", "isOverflowContainer"]);
  if (variant === ToolbarItemVariant.separator) {
    return React313.createElement(Divider, Object.assign({ className: css(toolbar_default.modifiers.vertical, className) }, props));
  }
  const widthStyles = {};
  if (widths) {
    Object.entries(widths || {}).map(([breakpoint, value]) => widthStyles[`${c_toolbar_item_Width_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
  }
  return React313.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React313.createElement("div", Object.assign({ className: css(toolbar_default.toolbarItem, variant && toolbar_default.modifiers[toCamel(variant)], isAllExpanded && toolbar_default.modifiers.expanded, isOverflowContainer && toolbar_default.modifiers.overflowContainer, formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(align, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spacer, toolbar_default, "", getBreakpoint2(width)), alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline, className) }, variant === "label" && { "aria-hidden": true }, { id }, props, widths && { style: Object.assign(Object.assign({}, widthStyles), props.style) }), children));
};
ToolbarItem.displayName = "ToolbarItem";

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarGroup.js
init_tslib_es6();
var React314 = __toESM(require_react());
var ToolbarGroupVariant;
(function(ToolbarGroupVariant2) {
  ToolbarGroupVariant2["filter-group"] = "filter-group";
  ToolbarGroupVariant2["icon-button-group"] = "icon-button-group";
  ToolbarGroupVariant2["button-group"] = "button-group";
})(ToolbarGroupVariant || (ToolbarGroupVariant = {}));
var ToolbarGroupWithRef = class extends React314.Component {
  render() {
    const _a = this.props, { visibility, align, alignItems, alignSelf, spacer, spaceItems, className, variant, children, isOverflowContainer, innerRef } = _a, props = __rest(_a, ["visibility", "align", "alignItems", "alignSelf", "spacer", "spaceItems", "className", "variant", "children", "isOverflowContainer", "innerRef"]);
    return React314.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React314.createElement("div", Object.assign({ className: css(toolbar_default.toolbarGroup, variant && toolbar_default.modifiers[toCamel(variant)], formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(align, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spacer, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spaceItems, toolbar_default, "", getBreakpoint2(width)), alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline, isOverflowContainer && toolbar_default.modifiers.overflowContainer, className) }, props, { ref: innerRef }), children));
  }
};
var ToolbarGroup = React314.forwardRef((props, ref) => React314.createElement(ToolbarGroupWithRef, Object.assign({}, props, { innerRef: ref })));

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarChipGroupContent.js
var ToolbarChipGroupContent = class extends React315.Component {
  render() {
    const _a = this.props, { className, isExpanded, chipGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, collapseListedFiltersBreakpoint, numberOfFilters, numberOfFiltersText, customChipGroupContent } = _a, props = __rest(_a, ["className", "isExpanded", "chipGroupContentRef", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText", "collapseListedFiltersBreakpoint", "numberOfFilters", "numberOfFiltersText", "customChipGroupContent"]);
    const clearChipGroups = () => {
      clearAllFilters();
    };
    let collapseListedFilters = false;
    if (collapseListedFiltersBreakpoint === "all") {
      collapseListedFilters = true;
    } else if (canUseDOM) {
      collapseListedFilters = (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];
    }
    const isHidden3 = numberOfFilters === 0 || isExpanded;
    return React315.createElement(
      "div",
      Object.assign({ className: css(toolbar_default.toolbarContent, !isHidden3 && !collapseListedFilters && toolbar_default.modifiers.chipContainer, isHidden3 && toolbar_default.modifiers.hidden, className) }, (numberOfFilters === 0 || isExpanded) && { hidden: true }, { ref: chipGroupContentRef }, props),
      React315.createElement(ToolbarGroup, Object.assign({ className: css(collapseListedFilters && toolbar_default.modifiers.hidden) }, collapseListedFilters && { hidden: true }, collapseListedFilters && { "aria-hidden": true })),
      collapseListedFilters && numberOfFilters > 0 && !isExpanded && React315.createElement(
        ToolbarGroup,
        null,
        React315.createElement(ToolbarItem, null, numberOfFiltersText(numberOfFilters))
      ),
      showClearFiltersButton && !isExpanded && !customChipGroupContent && React315.createElement(
        ToolbarItem,
        null,
        React315.createElement(Button, { variant: "link", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)
      ),
      customChipGroupContent && customChipGroupContent
    );
  }
};
ToolbarChipGroupContent.displayName = "ToolbarChipGroupContent";
ToolbarChipGroupContent.defaultProps = {
  clearFiltersButtonText: "Clear all filters",
  collapseListedFiltersBreakpoint: "lg",
  numberOfFiltersText: (numberOfFilters) => `${numberOfFilters} filters applied`
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/Toolbar.js
var Toolbar = class _Toolbar extends React316.Component {
  constructor() {
    super(...arguments);
    this.chipGroupContentRef = React316.createRef();
    this.staticFilterInfo = {};
    this.state = {
      isManagedToggleExpanded: false,
      filterInfo: {},
      windowWidth: canUseDOM ? window.innerWidth : 1200,
      ouiaStateId: getDefaultOUIAId(_Toolbar.displayName)
    };
    this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);
    this.toggleIsExpanded = () => {
      this.setState((prevState) => ({
        isManagedToggleExpanded: !prevState.isManagedToggleExpanded
      }));
    };
    this.closeExpandableContent = (e) => {
      if (e.target.innerWidth !== this.state.windowWidth) {
        this.setState(() => ({
          isManagedToggleExpanded: false,
          windowWidth: e.target.innerWidth
        }));
      }
    };
    this.updateNumberFilters = (categoryName, numberOfFilters) => {
      const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);
      if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {
        filterInfoToUpdate[categoryName] = numberOfFilters;
        this.staticFilterInfo = filterInfoToUpdate;
        this.setState({ filterInfo: filterInfoToUpdate });
      }
    };
    this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);
    this.renderToolbar = (randomId) => {
      const _a = this.props, { clearAllFilters, clearFiltersButtonText, collapseListedFiltersBreakpoint, isExpanded: isExpandedProp, toggleIsExpanded, className, children, isFullHeight, isStatic, inset, usePageInsets, isSticky, ouiaId, numberOfFiltersText, customChipGroupContent } = _a, props = __rest(_a, ["clearAllFilters", "clearFiltersButtonText", "collapseListedFiltersBreakpoint", "isExpanded", "toggleIsExpanded", "className", "children", "isFullHeight", "isStatic", "inset", "usePageInsets", "isSticky", "ouiaId", "numberOfFiltersText", "customChipGroupContent"]);
      const { isManagedToggleExpanded } = this.state;
      const isToggleManaged = this.isToggleManaged();
      const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;
      const numberOfFilters = this.getNumberOfFilters();
      const showClearFiltersButton = numberOfFilters > 0;
      return React316.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React316.createElement(
        "div",
        Object.assign({ className: css(toolbar_default.toolbar, isFullHeight && toolbar_default.modifiers.fullHeight, isStatic && toolbar_default.modifiers.static, usePageInsets && toolbar_default.modifiers.pageInsets, isSticky && toolbar_default.modifiers.sticky, formatBreakpointMods(inset, toolbar_default, "", getBreakpoint2(width)), className), id: randomId }, getOUIAProps(_Toolbar.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId), props),
        React316.createElement(
          ToolbarContext.Provider,
          { value: {
            isExpanded,
            toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,
            chipGroupContentRef: this.chipGroupContentRef,
            updateNumberFilters: this.updateNumberFilters,
            numberOfFilters,
            clearAllFilters,
            clearFiltersButtonText,
            showClearFiltersButton,
            toolbarId: randomId,
            customChipGroupContent
          } },
          children,
          React316.createElement(ToolbarChipGroupContent, { isExpanded, chipGroupContentRef: this.chipGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, numberOfFilters, numberOfFiltersText, collapseListedFiltersBreakpoint, customChipGroupContent })
        )
      ));
    };
  }
  componentDidMount() {
    if (this.isToggleManaged() && canUseDOM) {
      window.addEventListener("resize", this.closeExpandableContent);
    }
  }
  componentWillUnmount() {
    if (this.isToggleManaged() && canUseDOM) {
      window.removeEventListener("resize", this.closeExpandableContent);
    }
  }
  render() {
    return this.props.id ? this.renderToolbar(this.props.id) : React316.createElement(GenerateId, null, (randomId) => this.renderToolbar(randomId));
  }
};
Toolbar.displayName = "Toolbar";

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarContent.js
init_tslib_es6();
var React317 = __toESM(require_react());
var ToolbarContent = class _ToolbarContent extends React317.Component {
  constructor() {
    super(...arguments);
    this.expandableContentRef = React317.createRef();
    this.chipContainerRef = React317.createRef();
  }
  render() {
    const _a = this.props, { className, children, isExpanded, toolbarId, visibility, alignItems, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, alignSelf } = _a, props = __rest(_a, ["className", "children", "isExpanded", "toolbarId", "visibility", "alignItems", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText", "alignSelf"]);
    return React317.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React317.createElement(
      "div",
      Object.assign({ className: css(toolbar_default.toolbarContent, formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), className), ref: this.expandableContentRef }, props),
      React317.createElement(ToolbarContext.Consumer, null, ({ clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext, isExpanded: isExpandedContext, toolbarId: toolbarIdContext }) => {
        const expandableContentId = `${toolbarId || toolbarIdContext}-expandable-content-${_ToolbarContent.currentId++}`;
        return React317.createElement(
          ToolbarContentContext.Provider,
          { value: {
            expandableContentRef: this.expandableContentRef,
            expandableContentId,
            chipContainerRef: this.chipContainerRef,
            isExpanded: isExpanded || isExpandedContext,
            clearAllFilters: clearAllFilters || clearAllFiltersContext,
            clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext,
            showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext
          } },
          React317.createElement("div", { className: css(toolbar_default.toolbarContentSection, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline) }, children)
        );
      })
    ));
  }
};
ToolbarContent.displayName = "ToolbarContent";
ToolbarContent.currentId = 0;
ToolbarContent.defaultProps = {
  isExpanded: false,
  showClearFiltersButton: false
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarExpandIconWrapper.js
init_tslib_es6();
var React318 = __toESM(require_react());
var ToolbarExpandIconWrapper = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return React318.createElement("span", Object.assign({}, props, { className: css(toolbar_default.toolbarExpandAllIcon, className) }), children);
};
ToolbarExpandIconWrapper.displayName = "ToolbarExpandIconWrapper";

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarExpandableContent.js
init_tslib_es6();
var React319 = __toESM(require_react());
var ToolbarExpandableContent = class extends React319.Component {
  render() {
    const _a = this.props, { children, className, expandableContentRef, chipContainerRef, isExpanded, clearAllFilters, clearFiltersButtonText, showClearFiltersButton } = _a, props = __rest(_a, ["children", "className", "expandableContentRef", "chipContainerRef", "isExpanded", "clearAllFilters", "clearFiltersButtonText", "showClearFiltersButton"]);
    const { numberOfFilters, customChipGroupContent } = this.context;
    const clearChipGroups = () => {
      clearAllFilters();
    };
    return React319.createElement(
      "div",
      Object.assign({ className: css(toolbar_default.toolbarExpandableContent, isExpanded && toolbar_default.modifiers.expanded, className), ref: expandableContentRef }, props),
      React319.createElement(ToolbarGroup, null, children),
      numberOfFilters > 0 && React319.createElement(
        ToolbarGroup,
        { className: toolbar_default.modifiers.chipContainer },
        React319.createElement(ToolbarGroup, { ref: chipContainerRef }),
        showClearFiltersButton && !customChipGroupContent && React319.createElement(
          ToolbarItem,
          null,
          React319.createElement(Button, { variant: "link", onClick: clearChipGroups, isInline: true }, clearFiltersButtonText)
        ),
        customChipGroupContent && customChipGroupContent
      )
    );
  }
};
ToolbarExpandableContent.displayName = "ToolbarExpandableContent";
ToolbarExpandableContent.contextType = ToolbarContext;
ToolbarExpandableContent.defaultProps = {
  isExpanded: false,
  clearFiltersButtonText: "Clear all filters"
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarFilter.js
init_tslib_es6();
var React320 = __toESM(require_react());
var ReactDOM5 = __toESM(require_react_dom());
var ToolbarFilter = class extends React320.Component {
  constructor(props) {
    super(props);
    this.state = {
      isMounted: false
    };
  }
  componentDidMount() {
    const { categoryName, chips } = this.props;
    this.context.updateNumberFilters(typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString(), chips.length);
    this.setState({ isMounted: true });
  }
  componentDidUpdate() {
    const { categoryName, chips } = this.props;
    this.context.updateNumberFilters(typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString(), chips.length);
  }
  render() {
    const _a = this.props, { children, chips, deleteChipGroup, deleteChip, chipGroupExpandedText, chipGroupCollapsedText, categoryName, showToolbarItem, isExpanded, expandableChipContainerRef } = _a, props = __rest(_a, ["children", "chips", "deleteChipGroup", "deleteChip", "chipGroupExpandedText", "chipGroupCollapsedText", "categoryName", "showToolbarItem", "isExpanded", "expandableChipContainerRef"]);
    const { isExpanded: managedIsExpanded, chipGroupContentRef } = this.context;
    const _isExpanded = isExpanded !== void 0 ? isExpanded : managedIsExpanded;
    const categoryKey = typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString();
    const chipGroup = chips.length ? React320.createElement(
      ToolbarItem,
      { variant: "chip-group" },
      React320.createElement(ChipGroup, { key: categoryKey, categoryName: typeof categoryName === "string" ? categoryName : categoryName.name, isClosable: deleteChipGroup !== void 0, onClick: () => deleteChipGroup(categoryName), collapsedText: chipGroupCollapsedText, expandedText: chipGroupExpandedText }, chips.map((chip) => typeof chip === "string" ? React320.createElement(Chip, { key: chip, onClick: () => deleteChip(categoryKey, chip) }, chip) : React320.createElement(Chip, { key: chip.key, onClick: () => deleteChip(categoryKey, chip) }, chip.node)))
    ) : null;
    if (!_isExpanded && this.state.isMounted) {
      return React320.createElement(
        React320.Fragment,
        null,
        showToolbarItem && React320.createElement(ToolbarItem, Object.assign({}, props), children),
        ReactDOM5.createPortal(chipGroup, chipGroupContentRef.current.firstElementChild)
      );
    }
    return React320.createElement(ToolbarContentContext.Consumer, null, ({ chipContainerRef }) => React320.createElement(
      React320.Fragment,
      null,
      showToolbarItem && React320.createElement(ToolbarItem, Object.assign({}, props), children),
      chipContainerRef.current && ReactDOM5.createPortal(chipGroup, chipContainerRef.current),
      expandableChipContainerRef && expandableChipContainerRef.current && ReactDOM5.createPortal(chipGroup, expandableChipContainerRef.current)
    ));
  }
};
ToolbarFilter.displayName = "ToolbarFilter";
ToolbarFilter.contextType = ToolbarContext;
ToolbarFilter.defaultProps = {
  chips: [],
  showToolbarItem: true
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarToggleGroup.js
init_tslib_es6();
var React321 = __toESM(require_react());
var ReactDOM6 = __toESM(require_react_dom());
var ToolbarToggleGroup = class extends React321.Component {
  constructor() {
    super(...arguments);
    this.toggleRef = React321.createRef();
    this.expandableContentRef = React321.createRef();
    this.isContentPopup = () => {
      const viewportSize = canUseDOM ? window.innerWidth : 1200;
      const lgBreakpointValue = parseInt(global_breakpoint_lg_default.value);
      return viewportSize < lgBreakpointValue;
    };
  }
  render() {
    const _a = this.props, { toggleIcon, variant, visibility, breakpoint, alignment, spacer, spaceItems, className, children, isExpanded, onToggle, chipContainerRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText } = _a, props = __rest(_a, ["toggleIcon", "variant", "visibility", "breakpoint", "alignment", "spacer", "spaceItems", "className", "children", "isExpanded", "onToggle", "chipContainerRef", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText"]);
    if (!breakpoint && !toggleIcon) {
      console.error("ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.");
    }
    return React321.createElement(PageContext.Consumer, null, ({ width, getBreakpoint: getBreakpoint2 }) => React321.createElement(ToolbarContext.Consumer, null, ({ toggleIsExpanded: managedOnToggle }) => {
      const _onToggle = onToggle !== void 0 ? onToggle : managedOnToggle;
      return React321.createElement(ToolbarContentContext.Consumer, null, ({ expandableContentRef, expandableContentId, chipContainerRef: managedChipContainerRef, isExpanded: managedIsExpanded, clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext }) => {
        const _isExpanded = isExpanded !== void 0 ? isExpanded : managedIsExpanded;
        const _chipContainerRef = chipContainerRef !== void 0 ? chipContainerRef : managedChipContainerRef;
        const breakpointMod = {};
        breakpointMod[breakpoint] = "show";
        const expandableContent = React321.createElement(ToolbarExpandableContent, { id: expandableContentId, expandableContentRef: this.expandableContentRef, isExpanded: _isExpanded, clearAllFilters: clearAllFilters || clearAllFiltersContext, showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext, clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext, chipContainerRef: _chipContainerRef }, children);
        const toggleButton = React321.createElement(
          "div",
          { className: css(toolbar_default.toolbarToggle) },
          React321.createElement(Button, Object.assign({ variant: "plain", onClick: _onToggle, "aria-label": "Show Filters" }, _isExpanded && { "aria-expanded": true }, { "aria-haspopup": _isExpanded && this.isContentPopup(), "aria-controls": _isExpanded ? expandableContentId : void 0, ref: this.toggleRef }), toggleIcon)
        );
        return React321.createElement(
          "div",
          Object.assign({ className: css(toolbar_default.toolbarGroup, toolbar_default.modifiers.toggleGroup, variant && toolbar_default.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(alignment, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spacer, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(spaceItems, toolbar_default, "", getBreakpoint2(width)), className) }, props),
          toggleButton,
          _isExpanded && ReactDOM6.createPortal(expandableContent, expandableContentRef.current),
          !_isExpanded && children
        );
      });
    }));
  }
};
ToolbarToggleGroup.displayName = "ToolbarToggleGroup";

// node_modules/@patternfly/react-core/dist/esm/components/NumberInput/NumberInput.js
init_tslib_es6();
var React322 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/NumberInput/number-input.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/NumberInput/number-input.css";
var number_input_default = {
  "formControl": "pf-v5-c-form-control",
  "inputGroup": "pf-v5-c-input-group",
  "modifiers": {
    "status": "pf-m-status"
  },
  "numberInput": "pf-v5-c-number-input",
  "numberInputIcon": "pf-v5-c-number-input__icon",
  "numberInputUnit": "pf-v5-c-number-input__unit"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_number_input_c_form_control_width_chars.js
var c_number_input_c_form_control_width_chars = {
  "name": "--pf-v5-c-number-input--c-form-control--width-chars",
  "value": "4",
  "var": "var(--pf-v5-c-number-input--c-form-control--width-chars)"
};
var c_number_input_c_form_control_width_chars_default = c_number_input_c_form_control_width_chars;

// node_modules/@patternfly/react-core/dist/esm/components/NumberInput/NumberInput.js
var defaultKeyDownHandler = (args) => (event) => {
  if (KeyTypes.ArrowUp === event.key && args.onPlus) {
    event.preventDefault();
    args.onPlus(null, args.inputName);
  }
  if (KeyTypes.ArrowDown === event.key && args.onMinus) {
    event.preventDefault();
    args.onMinus(null, args.inputName);
  }
};
var NumberInput = (_a) => {
  var { value = 0, className, widthChars, isDisabled = false, validated = ValidatedOptions.default, onMinus = () => {
  }, onChange, onBlur, onPlus = () => {
  }, unit, unitPosition = "after", min, max, inputName, inputAriaLabel = "Input", minusBtnAriaLabel = "Minus", plusBtnAriaLabel = "Plus", inputProps, minusBtnProps, plusBtnProps } = _a, props = __rest(_a, ["value", "className", "widthChars", "isDisabled", "validated", "onMinus", "onChange", "onBlur", "onPlus", "unit", "unitPosition", "min", "max", "inputName", "inputAriaLabel", "minusBtnAriaLabel", "plusBtnAriaLabel", "inputProps", "minusBtnProps", "plusBtnProps"]);
  const numberInputUnit = React322.createElement("div", { className: css(number_input_default.numberInputUnit) }, unit);
  const keyDownHandler = inputProps && inputProps.onKeyDown ? inputProps.onKeyDown : defaultKeyDownHandler({ inputName, onMinus, onPlus });
  const handleBlur = (event) => {
    event.target.value = Number(event.target.value).toString();
    if (onChange) {
      onChange(event);
    }
    if (onBlur) {
      onBlur(event);
    }
  };
  return React322.createElement(
    "div",
    Object.assign({ className: css(number_input_default.numberInput, validated !== "default" && number_input_default.modifiers.status, className) }, widthChars && {
      style: Object.assign({ [c_number_input_c_form_control_width_chars_default.name]: widthChars }, props.style)
    }, props),
    unit && unitPosition === "before" && numberInputUnit,
    React322.createElement(
      InputGroup,
      null,
      React322.createElement(
        InputGroupItem,
        null,
        React322.createElement(
          Button,
          Object.assign({ variant: "control", "aria-label": minusBtnAriaLabel, isDisabled: isDisabled || value <= min, onClick: (evt) => onMinus(evt, inputName) }, minusBtnProps),
          React322.createElement(
            "span",
            { className: css(number_input_default.numberInputIcon) },
            React322.createElement(minus_icon_default, { "aria-hidden": "true" })
          )
        )
      ),
      React322.createElement(
        InputGroupItem,
        null,
        React322.createElement(TextInput, Object.assign({}, inputProps, { type: "number", value, name: inputName, "aria-label": inputAriaLabel }, isDisabled && { isDisabled }, onChange && { onChange: (event, _value) => onChange(event) }, { onBlur: handleBlur }, !onChange && { readOnlyVariant: "default" }, { onKeyDown: keyDownHandler, validated }))
      ),
      React322.createElement(
        InputGroupItem,
        null,
        React322.createElement(
          Button,
          Object.assign({ variant: "control", "aria-label": plusBtnAriaLabel, isDisabled: isDisabled || value >= max, onClick: (evt) => onPlus(evt, inputName) }, plusBtnProps),
          React322.createElement(
            "span",
            { className: css(number_input_default.numberInputIcon) },
            React322.createElement(plus_icon_default, { "aria-hidden": "true" })
          )
        )
      )
    ),
    unit && unitPosition === "after" && numberInputUnit
  );
};
NumberInput.displayName = "NumberInput";

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js
init_tslib_es6();
var React326 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js
init_tslib_es6();
var React323 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.css";
var tree_view_default = {
  "badge": "pf-v5-c-badge",
  "dirRtl": "pf-v5-m-dir-rtl",
  "modifiers": {
    "compact": "pf-m-compact",
    "guides": "pf-m-guides",
    "expanded": "pf-m-expanded",
    "noBackground": "pf-m-no-background",
    "current": "pf-m-current",
    "read": "pf-m-read",
    "selectable": "pf-m-selectable",
    "truncate": "pf-m-truncate"
  },
  "themeDark": "pf-v5-theme-dark",
  "treeView": "pf-v5-c-tree-view",
  "treeViewAction": "pf-v5-c-tree-view__action",
  "treeViewContent": "pf-v5-c-tree-view__content",
  "treeViewListItem": "pf-v5-c-tree-view__list-item",
  "treeViewNode": "pf-v5-c-tree-view__node",
  "treeViewNodeCheck": "pf-v5-c-tree-view__node-check",
  "treeViewNodeContainer": "pf-v5-c-tree-view__node-container",
  "treeViewNodeContent": "pf-v5-c-tree-view__node-content",
  "treeViewNodeCount": "pf-v5-c-tree-view__node-count",
  "treeViewNodeIcon": "pf-v5-c-tree-view__node-icon",
  "treeViewNodeText": "pf-v5-c-tree-view__node-text",
  "treeViewNodeTitle": "pf-v5-c-tree-view__node-title",
  "treeViewNodeToggle": "pf-v5-c-tree-view__node-toggle",
  "treeViewNodeToggleIcon": "pf-v5-c-tree-view__node-toggle-icon",
  "treeViewSearch": "pf-v5-c-tree-view__search"
};

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js
var TreeViewList = (_a) => {
  var { isNested = false, toolbar, children } = _a, props = __rest(_a, ["isNested", "toolbar", "children"]);
  return React323.createElement(
    React323.Fragment,
    null,
    toolbar && React323.createElement(
      React323.Fragment,
      null,
      toolbar,
      React323.createElement(Divider, null)
    ),
    React323.createElement("ul", Object.assign({ className: css(`${tree_view_default.treeView}__list`), role: isNested ? "group" : "tree" }, props), children)
  );
};
TreeViewList.displayName = "TreeViewList";

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js
var import_react25 = __toESM(require_react());
var TreeViewListItemBase = ({
  name,
  title,
  id,
  isExpanded,
  defaultExpanded = false,
  children = null,
  onSelect,
  onExpand,
  onCollapse,
  onCheck,
  hasCheckbox = false,
  checkProps = {
    checked: false
  },
  hasBadge = false,
  customBadgeContent,
  badgeProps = { isRead: true },
  isSelectable = false,
  isCompact,
  activeItems = [],
  itemData,
  parentItem,
  icon,
  expandedIcon,
  action,
  compareItems,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  useMemo: useMemo8
}) => {
  const [internalIsExpanded, setIsExpanded] = (0, import_react25.useState)(defaultExpanded);
  (0, import_react25.useEffect)(() => {
    if (isExpanded !== void 0 && isExpanded !== null) {
      setIsExpanded(isExpanded);
    } else if (defaultExpanded !== void 0 && defaultExpanded !== null) {
      setIsExpanded(internalIsExpanded || defaultExpanded);
    }
  }, [isExpanded, defaultExpanded]);
  let Component44 = "button";
  if (hasCheckbox) {
    Component44 = "label";
  } else if (isSelectable) {
    Component44 = "div";
  }
  const ToggleComponent = hasCheckbox || isSelectable ? "button" : "span";
  const renderToggle = (randomId) => import_react25.default.createElement(
    ToggleComponent,
    Object.assign({ className: css(tree_view_default.treeViewNodeToggle), onClick: (evt) => {
      if (isSelectable || hasCheckbox) {
        if (internalIsExpanded) {
          onCollapse && onCollapse(evt, itemData, parentItem);
        } else {
          onExpand && onExpand(evt, itemData, parentItem);
        }
        setIsExpanded(!internalIsExpanded);
      }
      if (isSelectable) {
        evt.stopPropagation();
      }
    } }, (hasCheckbox || isSelectable) && { "aria-labelledby": `label-${randomId}` }, ToggleComponent === "button" && { type: "button" }, { tabIndex: -1 }),
    import_react25.default.createElement(
      "span",
      { className: css(tree_view_default.treeViewNodeToggleIcon) },
      import_react25.default.createElement(angle_right_icon_default, { "aria-hidden": "true" })
    )
  );
  const renderCheck = (randomId) => import_react25.default.createElement(
    "span",
    { className: css(tree_view_default.treeViewNodeCheck) },
    import_react25.default.createElement("input", Object.assign({ type: "checkbox", onChange: (evt) => onCheck && onCheck(evt, itemData, parentItem), onClick: (evt) => evt.stopPropagation(), ref: (elem) => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { checked: checkProps.checked === null ? false : checkProps.checked, id: randomId, tabIndex: -1 }))
  );
  const iconRendered = import_react25.default.createElement(
    "span",
    { className: css(tree_view_default.treeViewNodeIcon) },
    !internalIsExpanded && icon,
    internalIsExpanded && (expandedIcon || icon)
  );
  const renderNodeContent = () => {
    const content = import_react25.default.createElement(
      import_react25.default.Fragment,
      null,
      isCompact && title && import_react25.default.createElement("span", { className: css(tree_view_default.treeViewNodeTitle) }, title),
      isSelectable ? import_react25.default.createElement("button", { tabIndex: -1, className: css(tree_view_default.treeViewNodeText), type: "button" }, name) : import_react25.default.createElement("span", { className: css(tree_view_default.treeViewNodeText) }, name)
    );
    return isCompact ? import_react25.default.createElement("span", { className: css(tree_view_default.treeViewNodeContent) }, content) : content;
  };
  const badgeRendered = import_react25.default.createElement(
    import_react25.default.Fragment,
    null,
    hasBadge && children && import_react25.default.createElement(
      "span",
      { className: css(tree_view_default.treeViewNodeCount) },
      import_react25.default.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length)
    ),
    hasBadge && !children && customBadgeContent !== void 0 && import_react25.default.createElement(
      "span",
      { className: css(tree_view_default.treeViewNodeCount) },
      import_react25.default.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)
    )
  );
  return import_react25.default.createElement(
    "li",
    { id, className: css(tree_view_default.treeViewListItem, internalIsExpanded && tree_view_default.modifiers.expanded), "aria-expanded": internalIsExpanded, role: "treeitem", tabIndex: -1 },
    import_react25.default.createElement(
      "div",
      { className: css(tree_view_default.treeViewContent) },
      import_react25.default.createElement(GenerateId, { prefix: isSelectable ? "selectable-id" : "checkbox-id" }, (randomId) => import_react25.default.createElement(
        Component44,
        Object.assign({ className: css(tree_view_default.treeViewNode, children && (isSelectable || hasCheckbox) && tree_view_default.modifiers.selectable, (!children || isSelectable) && activeItems && activeItems.length > 0 && activeItems.some((item) => compareItems && item && compareItems(item, itemData)) ? tree_view_default.modifiers.current : ""), onClick: (evt) => {
          if (!hasCheckbox) {
            onSelect && onSelect(evt, itemData, parentItem);
            if (!isSelectable && children && evt.isDefaultPrevented() !== true) {
              if (internalIsExpanded) {
                onCollapse && onCollapse(evt, itemData, parentItem);
              } else {
                onExpand && onExpand(evt, itemData, parentItem);
              }
              setIsExpanded(!internalIsExpanded);
            }
          }
        } }, hasCheckbox && { htmlFor: randomId }, (hasCheckbox || isSelectable && children) && { id: `label-${randomId}` }, Component44 === "button" && { type: "button" }),
        import_react25.default.createElement(
          "span",
          { className: css(tree_view_default.treeViewNodeContainer) },
          children && renderToggle(randomId),
          hasCheckbox && renderCheck(randomId),
          icon && iconRendered,
          renderNodeContent(),
          badgeRendered
        )
      )),
      action && import_react25.default.createElement("div", { className: css(tree_view_default.treeViewAction) }, action)
    ),
    internalIsExpanded && children
  );
};
var TreeViewListItem = import_react25.default.memo(TreeViewListItemBase, (prevProps, nextProps) => {
  if (!nextProps.useMemo) {
    return false;
  }
  const prevIncludes = prevProps.activeItems && prevProps.activeItems.length > 0 && prevProps.activeItems.some((item) => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));
  const nextIncludes = nextProps.activeItems && nextProps.activeItems.length > 0 && nextProps.activeItems.some((item) => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));
  if (prevIncludes || nextIncludes) {
    return false;
  }
  if (prevProps.name !== nextProps.name || prevProps.title !== nextProps.title || prevProps.id !== nextProps.id || prevProps.isExpanded !== nextProps.isExpanded || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.onSelect !== nextProps.onSelect || prevProps.onCheck !== nextProps.onCheck || prevProps.onExpand !== nextProps.onExpand || prevProps.onCollapse !== nextProps.onCollapse || prevProps.hasCheckbox !== nextProps.hasCheckbox || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.customBadgeContent !== nextProps.customBadgeContent || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isCompact !== nextProps.isCompact || prevProps.icon !== nextProps.icon || prevProps.expandedIcon !== nextProps.expandedIcon || prevProps.action !== nextProps.action || prevProps.parentItem !== nextProps.parentItem || prevProps.itemData !== nextProps.itemData) {
    return false;
  }
  return true;
});
TreeViewListItem.displayName = "TreeViewListItem";

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js
init_tslib_es6();
var React325 = __toESM(require_react());
var TreeViewRoot = class extends React325.Component {
  constructor() {
    super(...arguments);
    this.displayName = "TreeViewRoot";
    this.treeRef = React325.createRef();
    this.handleKeys = (event) => {
      var _a, _b, _c, _d, _e, _f, _g;
      if (!this.treeRef.current.contains(event.target) || !event.target.classList.contains(tree_view_default.treeViewNode)) {
        return;
      }
      const activeElement = document.activeElement;
      const key = event.key;
      const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode)).filter((el) => !el.classList.contains("pf-m-disabled"));
      if (key === KeyTypes.Space) {
        activeElement.click();
        event.preventDefault();
      }
      handleArrows(event, treeItems, (element) => activeElement === element, void 0, [], void 0, true, true);
      if (["ArrowLeft", "ArrowRight"].includes(key)) {
        const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains(tree_view_default.treeViewNodeToggle);
        const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("li")) === null || _d === void 0 ? void 0 : _d.classList.contains("pf-m-expanded");
        if (key === "ArrowLeft") {
          if (isExpandable && isExpanded) {
            activeElement.click();
          } else {
            const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("ul")) === null || _e === void 0 ? void 0 : _e.parentElement;
            if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== "DIV") {
              const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector("button");
              activeElement.tabIndex = -1;
              if (parentButton) {
                parentButton.tabIndex = 0;
                parentButton.focus();
              }
            }
          }
        } else {
          if (isExpandable && !isExpanded) {
            activeElement.tabIndex = -1;
            activeElement.click();
            const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("li")) === null || _f === void 0 ? void 0 : _f.querySelector("ul > li")) === null || _g === void 0 ? void 0 : _g.querySelector("button");
            if (childElement) {
              childElement.tabIndex = 0;
              childElement.focus();
            }
          }
        }
        event.preventDefault();
      }
    };
    this.handleKeysCheckbox = (event) => {
      var _a, _b, _c, _d, _e;
      if (!this.treeRef.current.contains(event.target)) {
        return;
      }
      const activeElement = document.activeElement;
      const key = event.key;
      if (key === KeyTypes.Space) {
        activeElement.click();
        event.preventDefault();
      }
      const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode));
      handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector("button,input"), [], void 0, true, true);
      if (["ArrowLeft", "ArrowRight"].includes(key)) {
        if (key === "ArrowLeft") {
          if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === "INPUT") {
            ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) && activeElement.parentElement.previousSibling.focus();
          } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {
            if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === "SPAN") {
              activeElement.previousSibling.firstChild.focus();
            } else {
              activeElement.previousSibling.focus();
            }
          }
        } else {
          if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === "INPUT") {
            ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();
          } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {
            if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === "SPAN") {
              activeElement.nextSibling.firstChild.focus();
            } else {
              activeElement.nextSibling.focus();
            }
          }
        }
        event.preventDefault();
      }
    };
    this.variantStyleModifiers = {
      default: "",
      compact: tree_view_default.modifiers.compact,
      compactNoBackground: [tree_view_default.modifiers.compact, tree_view_default.modifiers.noBackground]
    };
  }
  componentDidMount() {
    var _a;
    if (canUseDOM) {
      window.addEventListener("keydown", this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);
    }
    if (this.props.hasCheckboxes || this.props.hasSelectableNodes) {
      const firstToggle = this.treeRef.current.getElementsByClassName(tree_view_default.treeViewNodeToggle)[0];
      if (firstToggle) {
        firstToggle.tabIndex = 0;
      }
      if (this.props.hasCheckboxes) {
        const firstInput = this.treeRef.current.getElementsByTagName("INPUT")[0];
        if (firstInput) {
          firstInput.tabIndex = 0;
        }
      }
      if (this.props.hasSelectableNodes) {
        const firstTextButton = this.treeRef.current.getElementsByClassName(tree_view_default.treeViewNodeText)[0];
        if (firstTextButton) {
          firstTextButton.tabIndex = 0;
        }
      }
    } else {
      ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode)[0]).tabIndex = 0;
    }
  }
  componentWillUnmount() {
    if (canUseDOM) {
      window.removeEventListener("keydown", this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);
    }
  }
  render() {
    const _a = this.props, { children, hasCheckboxes, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, ["children", "hasCheckboxes", "hasGuides", "variant", "className", "hasSelectableNodes"]);
    return React325.createElement("div", Object.assign({ className: css(tree_view_default.treeView, hasGuides && tree_view_default.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props), children);
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js
var TreeView = (_a) => {
  var { data, isNested = false, hasCheckboxes = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = "default", defaultAllExpanded = false, allExpanded, icon, expandedIcon, parentItem, onSelect, onCheck, onExpand, onCollapse, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo: useMemo8 } = _a, props = __rest(_a, ["data", "isNested", "hasCheckboxes", "hasBadges", "hasGuides", "hasSelectableNodes", "variant", "defaultAllExpanded", "allExpanded", "icon", "expandedIcon", "parentItem", "onSelect", "onCheck", "onExpand", "onCollapse", "toolbar", "activeItems", "compareItems", "className", "useMemo"]);
  const treeViewList = React326.createElement(TreeViewList, { isNested, toolbar }, data.map((item) => {
    var _a2, _b;
    return React326.createElement(TreeViewListItem, Object.assign({ key: ((_a2 = item.id) === null || _a2 === void 0 ? void 0 : _a2.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()), name: item.name, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== void 0 ? item.defaultExpanded : defaultAllExpanded, onSelect, onCheck, onExpand, onCollapse, hasCheckbox: item.hasCheckbox !== void 0 ? item.hasCheckbox : hasCheckboxes, checkProps: item.checkProps, hasBadge: item.hasBadge !== void 0 ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems, parentItem, itemData: item, icon: item.icon !== void 0 ? item.icon : icon, expandedIcon: item.expandedIcon !== void 0 ? item.expandedIcon : expandedIcon, action: item.action, compareItems, isCompact: variant === "compact" || variant === "compactNoBackground", useMemo: useMemo8 }, item.children && {
      children: React326.createElement(TreeView, { data: item.children, isNested: true, parentItem: item, hasCheckboxes, hasBadges, hasGuides, hasSelectableNodes, variant, allExpanded, defaultAllExpanded, onSelect, onCheck, onExpand, onCollapse, activeItems, icon, expandedIcon })
    }));
  }));
  return React326.createElement(React326.Fragment, null, parentItem ? treeViewList : React326.createElement(TreeViewRoot, Object.assign({ hasSelectableNodes, hasCheckboxes, hasGuides, variant, className }, props), treeViewList));
};
TreeView.displayName = "TreeView";

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewSearch.js
init_tslib_es6();
var React327 = __toESM(require_react());
var TreeViewSearch = (_a) => {
  var { className, onSearch, id, name, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "onSearch", "id", "name", "aria-label"]);
  return React327.createElement(
    "div",
    { className: css(tree_view_default.treeViewSearch, className) },
    React327.createElement(
      "div",
      { className: css(form_control_default.formControl, form_control_default.modifiers.icon) },
      React327.createElement("input", Object.assign({ onChange: onSearch, id, name, "aria-label": ariaLabel, type: "search" }, props)),
      React327.createElement(
        "div",
        { className: css(form_control_default.formControlUtilities) },
        React327.createElement(
          "div",
          { className: css(form_control_default.formControlIcon) },
          React327.createElement(search_icon_default, null)
        )
      )
    )
  );
};
TreeViewSearch.displayName = "TreeViewSearch";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/Wizard.js
init_tslib_es6();
var import_react34 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Wizard/wizard.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Wizard/wizard.css";
var wizard_default = {
  "button": "pf-v5-c-button",
  "dirRtl": "pf-v5-m-dir-rtl",
  "drawer": "pf-v5-c-drawer",
  "modalBox": "pf-v5-c-modal-box",
  "modifiers": {
    "finished": "pf-m-finished",
    "expanded": "pf-m-expanded",
    "current": "pf-m-current",
    "expandable": "pf-m-expandable",
    "disabled": "pf-m-disabled",
    "noPadding": "pf-m-no-padding"
  },
  "pageMainWizard": "pf-v5-c-page__main-wizard",
  "themeDark": "pf-v5-theme-dark",
  "wizard": "pf-v5-c-wizard",
  "wizardClose": "pf-v5-c-wizard__close",
  "wizardDescription": "pf-v5-c-wizard__description",
  "wizardFooter": "pf-v5-c-wizard__footer",
  "wizardFooterCancel": "pf-v5-c-wizard__footer-cancel",
  "wizardHeader": "pf-v5-c-wizard__header",
  "wizardInnerWrap": "pf-v5-c-wizard__inner-wrap",
  "wizardMain": "pf-v5-c-wizard__main",
  "wizardMainBody": "pf-v5-c-wizard__main-body",
  "wizardNav": "pf-v5-c-wizard__nav",
  "wizardNavItem": "pf-v5-c-wizard__nav-item",
  "wizardNavLink": "pf-v5-c-wizard__nav-link",
  "wizardNavLinkText": "pf-v5-c-wizard__nav-link-text",
  "wizardNavLinkToggle": "pf-v5-c-wizard__nav-link-toggle",
  "wizardNavLinkToggleIcon": "pf-v5-c-wizard__nav-link-toggle-icon",
  "wizardNavList": "pf-v5-c-wizard__nav-list",
  "wizardOuterWrap": "pf-v5-c-wizard__outer-wrap",
  "wizardTitle": "pf-v5-c-wizard__title",
  "wizardTitleText": "pf-v5-c-wizard__title-text",
  "wizardToggle": "pf-v5-c-wizard__toggle",
  "wizardToggleIcon": "pf-v5-c-wizard__toggle-icon",
  "wizardToggleList": "pf-v5-c-wizard__toggle-list",
  "wizardToggleListItem": "pf-v5-c-wizard__toggle-list-item",
  "wizardToggleNum": "pf-v5-c-wizard__toggle-num",
  "wizardToggleSeparator": "pf-v5-c-wizard__toggle-separator"
};

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/types.js
var import_react26 = __toESM(require_react());
var WizardNavItemStatus;
(function(WizardNavItemStatus2) {
  WizardNavItemStatus2["Default"] = "default";
  WizardNavItemStatus2["Error"] = "error";
})(WizardNavItemStatus || (WizardNavItemStatus = {}));
var WizardStepChangeScope;
(function(WizardStepChangeScope2) {
  WizardStepChangeScope2["Next"] = "next";
  WizardStepChangeScope2["Back"] = "back";
  WizardStepChangeScope2["Nav"] = "nav";
})(WizardStepChangeScope || (WizardStepChangeScope = {}));
function isCustomWizardNav(nav) {
  return typeof nav === "function" || import_react26.default.isValidElement(nav);
}
function isCustomWizardNavItem(navItem) {
  return typeof navItem === "function" || import_react26.default.isValidElement(navItem);
}
function isCustomWizardFooter(footer) {
  return typeof footer === "function" || import_react26.default.isValidElement(footer);
}
function isWizardBasicStep(step) {
  return (step === null || step === void 0 ? void 0 : step.subStepIds) === void 0 && !isWizardSubStep(step);
}
function isWizardSubStep(step) {
  return (step === null || step === void 0 ? void 0 : step.parentId) !== void 0;
}
function isWizardParentStep(step) {
  return (step === null || step === void 0 ? void 0 : step.subStepIds) !== void 0;
}

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/utils.js
init_tslib_es6();
var import_react30 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardStep.js
init_tslib_es6();
var import_react29 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardContext.js
var import_react28 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardFooter.js
init_tslib_es6();
var import_react27 = __toESM(require_react());
var WizardFooterWrapper = ({ children }) => import_react27.default.createElement("footer", { className: css(wizard_default.wizardFooter) }, children);
var WizardFooter = (_a) => {
  var { activeStep } = _a, internalProps = __rest(_a, ["activeStep"]);
  const activeStepFooter = !isCustomWizardFooter(activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer) && (activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer);
  return import_react27.default.createElement(InternalWizardFooter, Object.assign({}, internalProps, activeStepFooter));
};
var InternalWizardFooter = ({ onNext, onBack, onClose, isNextDisabled, isBackDisabled, isBackHidden, isCancelHidden, nextButtonText = "Next", backButtonText = "Back", cancelButtonText = "Cancel", nextButtonProps, backButtonProps, cancelButtonProps }) => import_react27.default.createElement(
  WizardFooterWrapper,
  null,
  !isBackHidden && import_react27.default.createElement(Button, Object.assign({ variant: ButtonVariant.secondary, onClick: onBack, isDisabled: isBackDisabled }, backButtonProps), backButtonText),
  import_react27.default.createElement(Button, Object.assign({ variant: ButtonVariant.primary, type: "submit", onClick: onNext, isDisabled: isNextDisabled }, nextButtonProps), nextButtonText),
  !isCancelHidden && import_react27.default.createElement(
    "div",
    { className: wizard_default.wizardFooterCancel },
    import_react27.default.createElement(Button, Object.assign({ variant: ButtonVariant.link, onClick: onClose }, cancelButtonProps), cancelButtonText)
  )
);
WizardFooterWrapper.displayName = "WizardFooterWrapper";
WizardFooter.displayName = "WizardFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardContext.js
var WizardContext = import_react28.default.createContext({});
var WizardContextProvider = ({ steps: initialSteps, footer: initialFooter, activeStepIndex, children, onNext, onBack, onClose, goToStepById, goToStepByName, goToStepByIndex }) => {
  const [currentSteps, setCurrentSteps] = import_react28.default.useState(initialSteps);
  const [currentFooter, setCurrentFooter] = import_react28.default.useState();
  const steps = import_react28.default.useMemo(() => currentSteps.map((currentStepProps, index) => Object.assign(Object.assign({}, currentStepProps), initialSteps[index])), [initialSteps, currentSteps]);
  const activeStep = import_react28.default.useMemo(() => steps.find((step) => step.index === activeStepIndex), [activeStepIndex, steps]);
  const close = import_react28.default.useCallback(() => onClose === null || onClose === void 0 ? void 0 : onClose(null), [onClose]);
  const goToNextStep = import_react28.default.useCallback(() => onNext(null, steps), [onNext, steps]);
  const goToPrevStep = import_react28.default.useCallback(() => onBack(null, steps), [onBack, steps]);
  const footer = import_react28.default.useMemo(() => {
    const wizardFooter = (activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer) || currentFooter || initialFooter;
    if (isCustomWizardFooter(wizardFooter)) {
      const customFooter = wizardFooter;
      return typeof customFooter === "function" ? customFooter(activeStep, goToNextStep, goToPrevStep, close) : customFooter;
    }
    return import_react28.default.createElement(WizardFooter, Object.assign({ activeStep, onNext: goToNextStep, onBack: goToPrevStep, onClose: close, isBackDisabled: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.index) === 1 || isWizardSubStep(activeStep) && (activeStep === null || activeStep === void 0 ? void 0 : activeStep.index) === 2 }, wizardFooter));
  }, [currentFooter, initialFooter, activeStep, goToNextStep, goToPrevStep, close]);
  const getStep = import_react28.default.useCallback((stepId) => steps.find((step) => step.id === stepId), [steps]);
  const setStep = import_react28.default.useCallback((step) => setCurrentSteps((prevSteps) => prevSteps.map((prevStep) => {
    if (prevStep.id === step.id) {
      return Object.assign(Object.assign({}, prevStep), step);
    }
    return prevStep;
  })), []);
  return import_react28.default.createElement(WizardContext.Provider, { value: {
    steps,
    activeStep,
    footer,
    close,
    getStep,
    setStep,
    goToNextStep,
    goToPrevStep,
    setFooter: setCurrentFooter,
    goToStepById: import_react28.default.useCallback((id) => goToStepById(steps, id), [goToStepById, steps]),
    goToStepByName: import_react28.default.useCallback((name) => goToStepByName(steps, name), [goToStepByName, steps]),
    goToStepByIndex: import_react28.default.useCallback((index) => goToStepByIndex(null, steps, index), [goToStepByIndex, steps])
  } }, children);
};
WizardContextProvider.displayName = "WizardContextProvider";
var useWizardContext = () => import_react28.default.useContext(WizardContext);

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardStep.js
var WizardStep = (_a) => {
  var { children, steps: _subSteps } = _a, props = __rest(_a, ["children", "steps"]);
  const { activeStep, setStep } = useWizardContext();
  const { id, name, body, isDisabled, isHidden: isHidden3, navItem, footer, status } = props;
  const isParentStep = isWizardParentStep(activeStep);
  import_react29.default.useEffect(() => {
    setStep(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
      id,
      name
    }, body && { body }), isDisabled && { isDisabled }), isHidden3 && { isHidden: isHidden3 }), navItem && { navItem }), footer && { footer }), status && { status }), !isParentStep && id === (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) && !(activeStep === null || activeStep === void 0 ? void 0 : activeStep.isVisited) && { isVisited: true }));
  }, [
    body,
    footer,
    id,
    isDisabled,
    isHidden3,
    name,
    navItem,
    status,
    isParentStep,
    setStep,
    activeStep === null || activeStep === void 0 ? void 0 : activeStep.id,
    activeStep === null || activeStep === void 0 ? void 0 : activeStep.isVisited
  ]);
  return import_react29.default.createElement(import_react29.default.Fragment, null, children);
};
WizardStep.displayName = "WizardStep";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/utils.js
var buildSteps = (children) => import_react30.default.Children.toArray(children).reduce((acc, child, index) => {
  if (isWizardStep(child)) {
    const { props: childProps } = child;
    const { steps: childStepComponents, id } = childProps;
    const stepIndex = acc.length + 1;
    const subSteps = [];
    acc.push(Object.assign(Object.assign(Object.assign({ index: stepIndex, component: child }, index === 0 && !(childStepComponents === null || childStepComponents === void 0 ? void 0 : childStepComponents.length) && { isVisited: true }), childStepComponents && {
      subStepIds: childStepComponents === null || childStepComponents === void 0 ? void 0 : childStepComponents.map((childStepComponent, subStepIndex) => {
        subSteps.push(Object.assign(Object.assign({ index: stepIndex + subStepIndex + 1, component: childStepComponent, parentId: id }, index === 0 && subStepIndex === 0 && { isVisited: true }), normalizeStepProps(childStepComponent.props)));
        return childStepComponent.props.id;
      })
    }), normalizeStepProps(childProps)), ...subSteps);
  } else {
    throw new Error("Wizard only accepts children of type WizardStep.");
  }
  return acc;
}, []);
function isWizardStep(child) {
  return import_react30.default.isValidElement(child) && child.type === WizardStep;
}
var normalizeStepProps = (_a) => {
  var { children: _children, steps: _steps } = _a, controlStep = __rest(_a, ["children", "steps"]);
  return controlStep;
};
var isStepEnabled = (steps, step) => {
  if (!isWizardParentStep(step) && !step.isHidden && !step.isDisabled) {
    if (isWizardSubStep(step)) {
      const parentStep = steps.find((otherStep) => otherStep.id === step.parentId);
      if (!parentStep.isHidden && !parentStep.isDisabled) {
        return true;
      }
    } else {
      return true;
    }
  }
  return false;
};

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardToggle.js
init_tslib_es6();
var import_react32 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardBody.js
var import_react31 = __toESM(require_react());
var WizardBody = ({ children, hasNoPadding = false, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, component = "div" }) => {
  const [hasScrollbar, setHasScrollbar] = import_react31.default.useState(false);
  const [previousWidth, setPreviousWidth] = import_react31.default.useState(void 0);
  const wrapperRef = import_react31.default.useRef(null);
  const WrapperComponent = component;
  const { activeStep } = import_react31.default.useContext(WizardContext);
  const defaultAriaLabel = ariaLabel || `${activeStep === null || activeStep === void 0 ? void 0 : activeStep.name} content`;
  import_react31.default.useEffect(() => {
    const resize = () => {
      if (wrapperRef === null || wrapperRef === void 0 ? void 0 : wrapperRef.current) {
        const { offsetWidth, offsetHeight, scrollHeight } = wrapperRef.current;
        if (previousWidth !== offsetWidth) {
          setPreviousWidth(offsetWidth);
          setHasScrollbar(offsetHeight < scrollHeight);
        }
      }
    };
    const handleResizeWithDelay = debounce(resize, 250);
    let observer = () => {
    };
    if (wrapperRef === null || wrapperRef === void 0 ? void 0 : wrapperRef.current) {
      observer = getResizeObserver(wrapperRef.current, handleResizeWithDelay);
      const { offsetHeight, scrollHeight } = wrapperRef.current;
      setHasScrollbar(offsetHeight < scrollHeight);
      setPreviousWidth(wrapperRef.current.offsetWidth);
    }
    return () => {
      observer();
    };
  }, [previousWidth]);
  return import_react31.default.createElement(
    WrapperComponent,
    Object.assign({ ref: wrapperRef }, component === "div" && hasScrollbar && { role: "region" }, hasScrollbar && { "aria-label": defaultAriaLabel, "aria-labelledby": ariaLabelledBy, tabIndex: 0 }, { className: css(wizard_default.wizardMain) }),
    import_react31.default.createElement("div", { className: css(wizard_default.wizardMainBody, hasNoPadding && wizard_default.modifiers.noPadding) }, children)
  );
};
WizardBody.displayName = "WizardBody";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardToggle.js
var WizardToggle = ({ steps, activeStep, footer, nav, isNavExpanded, toggleNavExpanded, "aria-label": ariaLabel = "Wizard toggle" }) => {
  const isActiveSubStep = isWizardSubStep(activeStep);
  const parentStep = isActiveSubStep && steps.find((step) => step.id === activeStep.parentId);
  const nonSubSteps = steps.filter((step) => !isWizardSubStep(step));
  const wizardToggleIndex = nonSubSteps.indexOf(parentStep || activeStep) + 1;
  const handleKeyClicks = import_react32.default.useCallback((event) => {
    if (isNavExpanded && event.key === KeyTypes.Escape) {
      toggleNavExpanded === null || toggleNavExpanded === void 0 ? void 0 : toggleNavExpanded(event);
    }
  }, [isNavExpanded, toggleNavExpanded]);
  import_react32.default.useEffect(() => {
    const target = typeof document !== "undefined" ? document.body : null;
    target === null || target === void 0 ? void 0 : target.addEventListener("keydown", handleKeyClicks, false);
    return () => {
      target === null || target === void 0 ? void 0 : target.removeEventListener("keydown", handleKeyClicks, false);
    };
  }, [handleKeyClicks]);
  const bodyContent = steps.map((step) => {
    var _a;
    const props = ((_a = step.component) === null || _a === void 0 ? void 0 : _a.props) || {};
    const { children, body } = props, propsWithoutChildren = __rest(props, ["children", "body"]);
    return import_react32.default.createElement(
      import_react32.default.Fragment,
      { key: step.id },
      (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === step.id && (body || body === void 0 ? import_react32.default.createElement(WizardBody, Object.assign({}, body), children) : children),
      import_react32.default.createElement(
        "div",
        { key: step.id, style: { display: "none" } },
        import_react32.default.createElement(WizardStep, Object.assign({}, propsWithoutChildren))
      )
    );
  });
  return import_react32.default.createElement(
    import_react32.default.Fragment,
    null,
    import_react32.default.createElement(
      "button",
      { onClick: toggleNavExpanded, className: css(wizard_default.wizardToggle, isNavExpanded && "pf-m-expanded"), "aria-label": ariaLabel, "aria-expanded": isNavExpanded },
      import_react32.default.createElement(
        "span",
        { className: css(wizard_default.wizardToggleList) },
        import_react32.default.createElement(
          "span",
          { className: css(wizard_default.wizardToggleListItem) },
          import_react32.default.createElement("span", { className: css(wizard_default.wizardToggleNum) }, wizardToggleIndex),
          " ",
          (parentStep === null || parentStep === void 0 ? void 0 : parentStep.name) || (activeStep === null || activeStep === void 0 ? void 0 : activeStep.name),
          isActiveSubStep && import_react32.default.createElement(angle_right_icon_default, { className: css(wizard_default.wizardToggleSeparator), "aria-hidden": "true" })
        ),
        isActiveSubStep && import_react32.default.createElement("span", { className: css(wizard_default.wizardToggleListItem) }, activeStep === null || activeStep === void 0 ? void 0 : activeStep.name)
      ),
      import_react32.default.createElement(
        "span",
        { className: css(wizard_default.wizardToggleIcon) },
        import_react32.default.createElement(caret_down_icon_default, { "aria-hidden": "true" })
      )
    ),
    import_react32.default.createElement(
      "div",
      { className: css(wizard_default.wizardOuterWrap) },
      import_react32.default.createElement(
        "div",
        { className: css(wizard_default.wizardInnerWrap) },
        nav,
        bodyContent
      ),
      footer
    )
  );
};
WizardToggle.displayName = "WizardToggle";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavInternal.js
var import_react33 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNav.js
var React335 = __toESM(require_react());
var WizardNav = ({ children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, isExpanded = false, isInnerList = false }) => {
  if (isInnerList) {
    return React335.createElement("ol", { className: css(wizard_default.wizardNavList), role: "list" }, children);
  }
  return React335.createElement(
    "nav",
    { className: css(wizard_default.wizardNav, isExpanded && wizard_default.modifiers.expanded), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy },
    React335.createElement("ol", { className: css(wizard_default.wizardNavList), role: "list" }, children)
  );
};
WizardNav.displayName = "WizardNav";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavItem.js
var React336 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/global_spacer_sm.js
var global_spacer_sm = {
  "name": "--pf-v5-global--spacer--sm",
  "value": "0.5rem",
  "var": "var(--pf-v5-global--spacer--sm)"
};
var global_spacer_sm_default = global_spacer_sm;

// node_modules/@patternfly/react-tokens/dist/esm/global_danger_color_100.js
var global_danger_color_100 = {
  "name": "--pf-v5-global--danger-color--100",
  "value": "#c9190b",
  "var": "var(--pf-v5-global--danger-color--100)"
};
var global_danger_color_100_default = global_danger_color_100;

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavItem.js
var WizardNavItem = ({ children = null, content = "", isCurrent = false, isDisabled = false, isVisited = false, stepIndex, onClick, component: NavItemComponent = "button", href, isExpandable = false, id, status = "default", target, ouiaId, ouiaSafe = true }) => {
  const [isExpanded, setIsExpanded] = React336.useState(false);
  const ouiaProps = useOUIAProps(WizardNavItem.displayName, ouiaId, ouiaSafe);
  React336.useEffect(() => {
    setIsExpanded(isCurrent);
  }, [isCurrent]);
  if (NavItemComponent === "a" && !href && true) {
    console.error("WizardNavItem: When using an anchor, please provide an href");
  }
  const ariaLabel = React336.useMemo(() => {
    if (status === WizardNavItemStatus.Error || isVisited && !isCurrent) {
      let label = content.toString();
      if (status === WizardNavItemStatus.Error) {
        label += `, ${status}`;
      }
      if (isVisited && !isCurrent) {
        label += ", visited";
      }
      return label;
    }
  }, [content, isCurrent, isVisited, status]);
  return React336.createElement(
    "li",
    { className: css(wizard_default.wizardNavItem, isExpandable && wizard_default.modifiers.expandable, isExpandable && isExpanded && wizard_default.modifiers.expanded) },
    React336.createElement(NavItemComponent, Object.assign({}, NavItemComponent === "a" ? { tabIndex: isDisabled ? -1 : void 0, href, target } : { disabled: isDisabled }, id && { id: id.toString() }, { onClick: (e) => {
      e.stopPropagation();
      isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onClick === null || onClick === void 0 ? void 0 : onClick(e, stepIndex);
    }, className: css(wizard_default.wizardNavLink, isCurrent && wizard_default.modifiers.current, isDisabled && wizard_default.modifiers.disabled), "aria-disabled": isDisabled ? true : null, "aria-current": isCurrent && !children ? "step" : false }, isExpandable && { "aria-expanded": isExpanded }, ariaLabel && { "aria-label": ariaLabel }, ouiaProps), isExpandable ? React336.createElement(
      React336.Fragment,
      null,
      React336.createElement("span", { className: css(wizard_default.wizardNavLinkText) }, content),
      React336.createElement(
        "span",
        { className: css(wizard_default.wizardNavLinkToggle) },
        React336.createElement(
          "span",
          { className: css(wizard_default.wizardNavLinkToggleIcon) },
          React336.createElement(angle_right_icon_default, { "aria-label": `${isCurrent ? "Collapse" : "Expand"} step icon` })
        )
      )
    ) : React336.createElement(
      React336.Fragment,
      null,
      content,
      status === WizardNavItemStatus.Error && React336.createElement(
        "span",
        { style: { marginLeft: global_spacer_sm_default.var } },
        React336.createElement(exclamation_circle_icon_default, { color: global_danger_color_100_default.var })
      )
    )),
    children
  );
};
WizardNavItem.displayName = "WizardNavItem";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavInternal.js
var WizardNavInternal = ({ nav, navAriaLabel, isVisitRequired, isProgressive, isNavExpanded }) => {
  const { activeStep, steps, goToStepByIndex } = useWizardContext();
  const wizardNavProps = Object.assign({ isExpanded: isNavExpanded, "aria-label": navAriaLabel || (nav === null || nav === void 0 ? void 0 : nav["aria-label"]) || "Wizard steps" }, (nav === null || nav === void 0 ? void 0 : nav["aria-labelledby"]) && {
    "aria-labelledby": nav["aria-labelledby"]
  });
  return import_react33.default.createElement(WizardNav, Object.assign({}, wizardNavProps), steps.map((step, stepIndex) => {
    var _a;
    const hasVisitedNextStep = steps.some((step2) => step2.index > stepIndex + 1 && step2.isVisited);
    const isStepDisabled = step.isDisabled || isVisitRequired && !step.isVisited && !hasVisitedNextStep;
    const customStepNavItem = isCustomWizardNavItem(step.navItem) && import_react33.default.createElement(import_react33.default.Fragment, { key: step.id }, typeof step.navItem === "function" ? step.navItem(step, activeStep, steps, goToStepByIndex) : step.navItem);
    if (isWizardParentStep(step) && !step.isHidden) {
      let firstSubStepIndex;
      let hasActiveChild = false;
      const subNavItems = (_a = step.subStepIds) === null || _a === void 0 ? void 0 : _a.map((subStepId, subStepIndex) => {
        const subStep = steps.find((step2) => step2.id === subStepId);
        const hasVisitedNextStep2 = steps.some((step2) => step2.index > subStep.index && step2.isVisited);
        const isSubStepDisabled = subStep.isDisabled || isVisitRequired && !subStep.isVisited && !hasVisitedNextStep2;
        const customSubStepNavItem = isCustomWizardNavItem(subStep.navItem) && import_react33.default.createElement(import_react33.default.Fragment, { key: subStep.id }, typeof subStep.navItem === "function" ? subStep.navItem(subStep, activeStep, steps, goToStepByIndex) : subStep.navItem);
        if (subStep.isHidden) {
          return;
        }
        if (subStepIndex === 0) {
          firstSubStepIndex = subStep.index;
        }
        if ((activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === subStep.id) {
          hasActiveChild = true;
        }
        if (!isProgressive || isProgressive && subStep.index <= activeStep.index) {
          return customSubStepNavItem || import_react33.default.createElement(WizardNavItem, Object.assign({ key: subStep.id, id: subStep.id, content: subStep.name, isCurrent: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === subStep.id, isDisabled: isSubStepDisabled || isStepDisabled, isVisited: subStep.isVisited, stepIndex: subStep.index, onClick: () => goToStepByIndex(subStep.index), status: subStep.status }, subStep.navItem));
        }
      });
      const hasEnabledChildren = import_react33.default.Children.toArray(subNavItems).some((child) => import_react33.default.isValidElement(child) && !child.props.isDisabled);
      if (!isProgressive || isProgressive && step.index <= activeStep.index) {
        return customStepNavItem || import_react33.default.createElement(
          WizardNavItem,
          Object.assign({ key: step.id, id: step.id, content: step.name, isExpandable: step.isExpandable, isCurrent: hasActiveChild, isDisabled: !hasEnabledChildren || isStepDisabled, isVisited: step.isVisited, stepIndex: firstSubStepIndex, onClick: () => goToStepByIndex(firstSubStepIndex), status: step.status }, step.navItem),
          import_react33.default.createElement(WizardNav, Object.assign({}, wizardNavProps, { isInnerList: true }), subNavItems)
        );
      }
    }
    if (isWizardBasicStep(step) && !step.isHidden && (!isProgressive || isProgressive && step.index <= activeStep.index)) {
      return customStepNavItem || import_react33.default.createElement(WizardNavItem, Object.assign({ key: step.id, id: step.id, content: step.name, isCurrent: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === step.id, isDisabled: isStepDisabled, isVisited: step.isVisited, stepIndex: step.index, onClick: () => goToStepByIndex(step.index), status: step.status }, step.navItem));
    }
  }));
};

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/Wizard.js
var Wizard = (_a) => {
  var { children, footer, height, width, className, header, nav, navAriaLabel, startIndex = 1, isVisitRequired = false, isProgressive = false, onStepChange, onSave, onClose } = _a, wrapperProps = __rest(_a, ["children", "footer", "height", "width", "className", "header", "nav", "navAriaLabel", "startIndex", "isVisitRequired", "isProgressive", "onStepChange", "onSave", "onClose"]);
  const [activeStepIndex, setActiveStepIndex] = import_react34.default.useState(startIndex);
  const initialSteps = buildSteps(children);
  const firstStepRef = import_react34.default.useRef(initialSteps[startIndex - 1]);
  import_react34.default.useEffect(() => {
    if (isWizardParentStep(firstStepRef.current)) {
      setActiveStepIndex(startIndex + 1);
    }
  }, [startIndex]);
  const goToNextStep = (event, steps = initialSteps) => {
    const newStep = steps.find((step) => step.index > activeStepIndex && isStepEnabled(steps, step));
    if (activeStepIndex >= steps.length || !(newStep === null || newStep === void 0 ? void 0 : newStep.index)) {
      return onSave ? onSave(event) : onClose === null || onClose === void 0 ? void 0 : onClose(event);
    }
    setActiveStepIndex(newStep === null || newStep === void 0 ? void 0 : newStep.index);
    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, newStep, steps[activeStepIndex - 1], WizardStepChangeScope.Next);
  };
  const goToPrevStep = (event, steps = initialSteps) => {
    const newStep = [...steps].reverse().find((step) => step.index < activeStepIndex && isStepEnabled(steps, step));
    setActiveStepIndex(newStep === null || newStep === void 0 ? void 0 : newStep.index);
    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, newStep, steps[activeStepIndex - 1], WizardStepChangeScope.Back);
  };
  const goToStepByIndex = (event, steps = initialSteps, index) => {
    const lastStepIndex = steps.length + 1;
    if (index < 1) {
      index = 1;
    } else if (index > lastStepIndex) {
      index = lastStepIndex;
    }
    const currStep = steps[index - 1];
    const prevStep = steps[activeStepIndex - 1];
    setActiveStepIndex(index);
    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, currStep, prevStep, WizardStepChangeScope.Nav);
  };
  const goToStepById = (steps = initialSteps, id) => {
    const step = steps.find((step2) => step2.id === id);
    const stepIndex = step === null || step === void 0 ? void 0 : step.index;
    const lastStepIndex = steps.length + 1;
    if (stepIndex > 0 && stepIndex < lastStepIndex && !step.isDisabled && !step.isHidden) {
      setActiveStepIndex(stepIndex);
    }
  };
  const goToStepByName = (steps = initialSteps, name) => {
    const step = steps.find((step2) => step2.name === name);
    const stepIndex = step === null || step === void 0 ? void 0 : step.index;
    const lastStepIndex = steps.length + 1;
    if (stepIndex > 0 && stepIndex < lastStepIndex && !step.isDisabled && !step.isHidden) {
      setActiveStepIndex(stepIndex);
    }
  };
  return import_react34.default.createElement(
    WizardContextProvider,
    { steps: initialSteps, activeStepIndex, footer, onNext: goToNextStep, onBack: goToPrevStep, onClose, goToStepById, goToStepByName, goToStepByIndex },
    import_react34.default.createElement(
      "div",
      Object.assign({ className: css(wizard_default.wizard, className), style: Object.assign(Object.assign({}, height ? { height } : {}), width ? { width } : {}) }, wrapperProps),
      header,
      import_react34.default.createElement(WizardInternal, { nav, navAriaLabel, isVisitRequired, isProgressive })
    )
  );
};
var WizardInternal = ({ nav, navAriaLabel, isVisitRequired, isProgressive }) => {
  const { activeStep, steps, footer, goToStepByIndex } = useWizardContext();
  const [isNavExpanded, setIsNavExpanded] = import_react34.default.useState(false);
  const wizardNav = import_react34.default.useMemo(() => {
    if (isCustomWizardNav(nav)) {
      return typeof nav === "function" ? nav(isNavExpanded, steps, activeStep, goToStepByIndex) : nav;
    }
    return import_react34.default.createElement(WizardNavInternal, { nav, navAriaLabel, isNavExpanded, isVisitRequired, isProgressive });
  }, [activeStep, isVisitRequired, isProgressive, goToStepByIndex, isNavExpanded, nav, navAriaLabel, steps]);
  return import_react34.default.createElement(WizardToggle, { nav: wizardNav, footer, steps, activeStep, isNavExpanded, toggleNavExpanded: () => setIsNavExpanded((prevIsExpanded) => !prevIsExpanded) });
};
Wizard.displayName = "Wizard";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardHeader.js
var React339 = __toESM(require_react());
var WizardHeader = ({ onClose = () => void 0, title, description, isCloseHidden, closeButtonAriaLabel, titleId, descriptionComponent: Component44 = "div", descriptionId }) => React339.createElement(
  "div",
  { className: css(wizard_default.wizardHeader) },
  !isCloseHidden && React339.createElement(
    "div",
    { className: css(wizard_default.wizardClose) },
    React339.createElement(
      Button,
      { variant: "plain", "aria-label": closeButtonAriaLabel, onClick: onClose },
      React339.createElement(times_icon_default, { "aria-hidden": "true" })
    )
  ),
  React339.createElement(
    "div",
    { className: css(wizard_default.wizardTitle) },
    React339.createElement("h2", { className: css(wizard_default.wizardTitleText), id: titleId }, title || React339.createElement(React339.Fragment, null, " "))
  ),
  description && React339.createElement(Component44, { className: css(wizard_default.wizardDescription), id: descriptionId }, description)
);
WizardHeader.displayName = "WizardHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/hooks/useWizardFooter.js
var import_react35 = __toESM(require_react());
var useWizardFooter = (footer, stepId) => {
  const { activeStep, setFooter } = useWizardContext();
  import_react35.default.useEffect(() => {
    if (footer && (!stepId || (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === stepId)) {
      setFooter(footer);
      return () => {
        setFooter(null);
      };
    }
  }, [activeStep, footer, setFooter, stepId]);
};

// node_modules/@patternfly/react-core/dist/esm/components/Truncate/Truncate.js
init_tslib_es6();
var React341 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Truncate/truncate.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/components/Truncate/truncate.css";
var truncate_default = {
  "dirRtl": "pf-v5-m-dir-rtl",
  "truncate": "pf-v5-c-truncate",
  "truncateEnd": "pf-v5-c-truncate__end",
  "truncateStart": "pf-v5-c-truncate__start"
};

// node_modules/@patternfly/react-core/dist/esm/components/Truncate/Truncate.js
var TruncatePosition;
(function(TruncatePosition2) {
  TruncatePosition2["start"] = "start";
  TruncatePosition2["end"] = "end";
  TruncatePosition2["middle"] = "middle";
})(TruncatePosition || (TruncatePosition = {}));
var truncateStyles = {
  start: truncate_default.truncateEnd,
  end: truncate_default.truncateStart
};
var minWidthCharacters = 12;
var sliceContent = (str, slice) => [str.slice(0, str.length - slice), str.slice(-slice)];
var Truncate = (_a) => {
  var { className, position = "end", tooltipPosition = "top", trailingNumChars = 7, content } = _a, props = __rest(_a, ["className", "position", "tooltipPosition", "trailingNumChars", "content"]);
  return React341.createElement(
    Tooltip,
    { position: tooltipPosition, content },
    React341.createElement(
      "span",
      Object.assign({ className: css(truncate_default.truncate, className) }, props),
      (position === TruncatePosition.end || position === TruncatePosition.start) && React341.createElement(
        "span",
        { className: truncateStyles[position] },
        content,
        position === TruncatePosition.start && React341.createElement(React341.Fragment, null, "‎")
      ),
      position === TruncatePosition.middle && content.slice(0, content.length - trailingNumChars).length > minWidthCharacters && React341.createElement(
        React341.Fragment,
        null,
        React341.createElement("span", { className: truncate_default.truncateStart }, sliceContent(content, trailingNumChars)[0]),
        React341.createElement("span", { className: truncate_default.truncateEnd }, sliceContent(content, trailingNumChars)[1])
      ),
      position === TruncatePosition.middle && content.slice(0, content.length - trailingNumChars).length <= minWidthCharacters && content
    )
  );
};
Truncate.displayName = "Truncate";

// node_modules/@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js
init_tslib_es6();
var React342 = __toESM(require_react());
var Bullseye = (_a) => {
  var { children = null, className = "", component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
  const Component44 = component;
  return React342.createElement(Component44, Object.assign({ className: css(bullseye_default.bullseye, className) }, props), children);
};
Bullseye.displayName = "Bullseye";

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js
init_tslib_es6();
var React343 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/layouts/Flex/flex.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/layouts/Flex/flex.css";
var flex_default = {
  "flex": "pf-v5-l-flex",
  "modifiers": {
    "flex": "pf-m-flex",
    "inlineFlex": "pf-m-inline-flex",
    "column": "pf-m-column",
    "columnReverse": "pf-m-column-reverse",
    "row": "pf-m-row",
    "rowReverse": "pf-m-row-reverse",
    "wrap": "pf-m-wrap",
    "wrapReverse": "pf-m-wrap-reverse",
    "nowrap": "pf-m-nowrap",
    "justifyContentFlexStart": "pf-m-justify-content-flex-start",
    "justifyContentFlexEnd": "pf-m-justify-content-flex-end",
    "justifyContentCenter": "pf-m-justify-content-center",
    "justifyContentSpaceBetween": "pf-m-justify-content-space-between",
    "justifyContentSpaceAround": "pf-m-justify-content-space-around",
    "justifyContentSpaceEvenly": "pf-m-justify-content-space-evenly",
    "alignItemsFlexStart": "pf-m-align-items-flex-start",
    "alignItemsFlexEnd": "pf-m-align-items-flex-end",
    "alignItemsCenter": "pf-m-align-items-center",
    "alignItemsStretch": "pf-m-align-items-stretch",
    "alignItemsBaseline": "pf-m-align-items-baseline",
    "alignContentFlexStart": "pf-m-align-content-flex-start",
    "alignContentFlexEnd": "pf-m-align-content-flex-end",
    "alignContentCenter": "pf-m-align-content-center",
    "alignContentStretch": "pf-m-align-content-stretch",
    "alignContentSpaceBetween": "pf-m-align-content-space-between",
    "alignContentSpaceAround": "pf-m-align-content-space-around",
    "alignRight": "pf-m-align-right",
    "alignLeft": "pf-m-align-left",
    "grow": "pf-m-grow",
    "shrink": "pf-m-shrink",
    "fullWidth": "pf-m-full-width",
    "flex_1": "pf-m-flex-1",
    "flex_2": "pf-m-flex-2",
    "flex_3": "pf-m-flex-3",
    "flex_4": "pf-m-flex-4",
    "flexDefault": "pf-m-flex-default",
    "flexNone": "pf-m-flex-none",
    "alignSelfFlexStart": "pf-m-align-self-flex-start",
    "alignSelfFlexEnd": "pf-m-align-self-flex-end",
    "alignSelfCenter": "pf-m-align-self-center",
    "alignSelfBaseline": "pf-m-align-self-baseline",
    "alignSelfStretch": "pf-m-align-self-stretch",
    "flexOnSm": "pf-m-flex-on-sm",
    "inlineFlexOnSm": "pf-m-inline-flex-on-sm",
    "columnOnSm": "pf-m-column-on-sm",
    "columnReverseOnSm": "pf-m-column-reverse-on-sm",
    "rowOnSm": "pf-m-row-on-sm",
    "rowReverseOnSm": "pf-m-row-reverse-on-sm",
    "wrapOnSm": "pf-m-wrap-on-sm",
    "wrapReverseOnSm": "pf-m-wrap-reverse-on-sm",
    "nowrapOnSm": "pf-m-nowrap-on-sm",
    "justifyContentFlexStartOnSm": "pf-m-justify-content-flex-start-on-sm",
    "justifyContentFlexEndOnSm": "pf-m-justify-content-flex-end-on-sm",
    "justifyContentCenterOnSm": "pf-m-justify-content-center-on-sm",
    "justifyContentSpaceBetweenOnSm": "pf-m-justify-content-space-between-on-sm",
    "justifyContentSpaceAroundOnSm": "pf-m-justify-content-space-around-on-sm",
    "justifyContentSpaceEvenlyOnSm": "pf-m-justify-content-space-evenly-on-sm",
    "alignItemsFlexStartOnSm": "pf-m-align-items-flex-start-on-sm",
    "alignItemsFlexEndOnSm": "pf-m-align-items-flex-end-on-sm",
    "alignItemsCenterOnSm": "pf-m-align-items-center-on-sm",
    "alignItemsStretchOnSm": "pf-m-align-items-stretch-on-sm",
    "alignItemsBaselineOnSm": "pf-m-align-items-baseline-on-sm",
    "alignContentFlexStartOnSm": "pf-m-align-content-flex-start-on-sm",
    "alignContentFlexEndOnSm": "pf-m-align-content-flex-end-on-sm",
    "alignContentCenterOnSm": "pf-m-align-content-center-on-sm",
    "alignContentStretchOnSm": "pf-m-align-content-stretch-on-sm",
    "alignContentSpaceBetweenOnSm": "pf-m-align-content-space-between-on-sm",
    "alignContentSpaceAroundOnSm": "pf-m-align-content-space-around-on-sm",
    "alignRightOnSm": "pf-m-align-right-on-sm",
    "alignLeftOnSm": "pf-m-align-left-on-sm",
    "growOnSm": "pf-m-grow-on-sm",
    "shrinkOnSm": "pf-m-shrink-on-sm",
    "fullWidthOnSm": "pf-m-full-width-on-sm",
    "flex_1OnSm": "pf-m-flex-1-on-sm",
    "flex_2OnSm": "pf-m-flex-2-on-sm",
    "flex_3OnSm": "pf-m-flex-3-on-sm",
    "flex_4OnSm": "pf-m-flex-4-on-sm",
    "flexDefaultOnSm": "pf-m-flex-default-on-sm",
    "flexNoneOnSm": "pf-m-flex-none-on-sm",
    "alignSelfFlexStartOnSm": "pf-m-align-self-flex-start-on-sm",
    "alignSelfFlexEndOnSm": "pf-m-align-self-flex-end-on-sm",
    "alignSelfCenterOnSm": "pf-m-align-self-center-on-sm",
    "alignSelfBaselineOnSm": "pf-m-align-self-baseline-on-sm",
    "alignSelfStretchOnSm": "pf-m-align-self-stretch-on-sm",
    "flexOnMd": "pf-m-flex-on-md",
    "inlineFlexOnMd": "pf-m-inline-flex-on-md",
    "columnOnMd": "pf-m-column-on-md",
    "columnReverseOnMd": "pf-m-column-reverse-on-md",
    "rowOnMd": "pf-m-row-on-md",
    "rowReverseOnMd": "pf-m-row-reverse-on-md",
    "wrapOnMd": "pf-m-wrap-on-md",
    "wrapReverseOnMd": "pf-m-wrap-reverse-on-md",
    "nowrapOnMd": "pf-m-nowrap-on-md",
    "justifyContentFlexStartOnMd": "pf-m-justify-content-flex-start-on-md",
    "justifyContentFlexEndOnMd": "pf-m-justify-content-flex-end-on-md",
    "justifyContentCenterOnMd": "pf-m-justify-content-center-on-md",
    "justifyContentSpaceBetweenOnMd": "pf-m-justify-content-space-between-on-md",
    "justifyContentSpaceAroundOnMd": "pf-m-justify-content-space-around-on-md",
    "justifyContentSpaceEvenlyOnMd": "pf-m-justify-content-space-evenly-on-md",
    "alignItemsFlexStartOnMd": "pf-m-align-items-flex-start-on-md",
    "alignItemsFlexEndOnMd": "pf-m-align-items-flex-end-on-md",
    "alignItemsCenterOnMd": "pf-m-align-items-center-on-md",
    "alignItemsStretchOnMd": "pf-m-align-items-stretch-on-md",
    "alignItemsBaselineOnMd": "pf-m-align-items-baseline-on-md",
    "alignContentFlexStartOnMd": "pf-m-align-content-flex-start-on-md",
    "alignContentFlexEndOnMd": "pf-m-align-content-flex-end-on-md",
    "alignContentCenterOnMd": "pf-m-align-content-center-on-md",
    "alignContentStretchOnMd": "pf-m-align-content-stretch-on-md",
    "alignContentSpaceBetweenOnMd": "pf-m-align-content-space-between-on-md",
    "alignContentSpaceAroundOnMd": "pf-m-align-content-space-around-on-md",
    "alignRightOnMd": "pf-m-align-right-on-md",
    "alignLeftOnMd": "pf-m-align-left-on-md",
    "growOnMd": "pf-m-grow-on-md",
    "shrinkOnMd": "pf-m-shrink-on-md",
    "fullWidthOnMd": "pf-m-full-width-on-md",
    "flex_1OnMd": "pf-m-flex-1-on-md",
    "flex_2OnMd": "pf-m-flex-2-on-md",
    "flex_3OnMd": "pf-m-flex-3-on-md",
    "flex_4OnMd": "pf-m-flex-4-on-md",
    "flexDefaultOnMd": "pf-m-flex-default-on-md",
    "flexNoneOnMd": "pf-m-flex-none-on-md",
    "alignSelfFlexStartOnMd": "pf-m-align-self-flex-start-on-md",
    "alignSelfFlexEndOnMd": "pf-m-align-self-flex-end-on-md",
    "alignSelfCenterOnMd": "pf-m-align-self-center-on-md",
    "alignSelfBaselineOnMd": "pf-m-align-self-baseline-on-md",
    "alignSelfStretchOnMd": "pf-m-align-self-stretch-on-md",
    "flexOnLg": "pf-m-flex-on-lg",
    "inlineFlexOnLg": "pf-m-inline-flex-on-lg",
    "columnOnLg": "pf-m-column-on-lg",
    "columnReverseOnLg": "pf-m-column-reverse-on-lg",
    "rowOnLg": "pf-m-row-on-lg",
    "rowReverseOnLg": "pf-m-row-reverse-on-lg",
    "wrapOnLg": "pf-m-wrap-on-lg",
    "wrapReverseOnLg": "pf-m-wrap-reverse-on-lg",
    "nowrapOnLg": "pf-m-nowrap-on-lg",
    "justifyContentFlexStartOnLg": "pf-m-justify-content-flex-start-on-lg",
    "justifyContentFlexEndOnLg": "pf-m-justify-content-flex-end-on-lg",
    "justifyContentCenterOnLg": "pf-m-justify-content-center-on-lg",
    "justifyContentSpaceBetweenOnLg": "pf-m-justify-content-space-between-on-lg",
    "justifyContentSpaceAroundOnLg": "pf-m-justify-content-space-around-on-lg",
    "justifyContentSpaceEvenlyOnLg": "pf-m-justify-content-space-evenly-on-lg",
    "alignItemsFlexStartOnLg": "pf-m-align-items-flex-start-on-lg",
    "alignItemsFlexEndOnLg": "pf-m-align-items-flex-end-on-lg",
    "alignItemsCenterOnLg": "pf-m-align-items-center-on-lg",
    "alignItemsStretchOnLg": "pf-m-align-items-stretch-on-lg",
    "alignItemsBaselineOnLg": "pf-m-align-items-baseline-on-lg",
    "alignContentFlexStartOnLg": "pf-m-align-content-flex-start-on-lg",
    "alignContentFlexEndOnLg": "pf-m-align-content-flex-end-on-lg",
    "alignContentCenterOnLg": "pf-m-align-content-center-on-lg",
    "alignContentStretchOnLg": "pf-m-align-content-stretch-on-lg",
    "alignContentSpaceBetweenOnLg": "pf-m-align-content-space-between-on-lg",
    "alignContentSpaceAroundOnLg": "pf-m-align-content-space-around-on-lg",
    "alignRightOnLg": "pf-m-align-right-on-lg",
    "alignLeftOnLg": "pf-m-align-left-on-lg",
    "growOnLg": "pf-m-grow-on-lg",
    "shrinkOnLg": "pf-m-shrink-on-lg",
    "fullWidthOnLg": "pf-m-full-width-on-lg",
    "flex_1OnLg": "pf-m-flex-1-on-lg",
    "flex_2OnLg": "pf-m-flex-2-on-lg",
    "flex_3OnLg": "pf-m-flex-3-on-lg",
    "flex_4OnLg": "pf-m-flex-4-on-lg",
    "flexDefaultOnLg": "pf-m-flex-default-on-lg",
    "flexNoneOnLg": "pf-m-flex-none-on-lg",
    "alignSelfFlexStartOnLg": "pf-m-align-self-flex-start-on-lg",
    "alignSelfFlexEndOnLg": "pf-m-align-self-flex-end-on-lg",
    "alignSelfCenterOnLg": "pf-m-align-self-center-on-lg",
    "alignSelfBaselineOnLg": "pf-m-align-self-baseline-on-lg",
    "alignSelfStretchOnLg": "pf-m-align-self-stretch-on-lg",
    "flexOnXl": "pf-m-flex-on-xl",
    "inlineFlexOnXl": "pf-m-inline-flex-on-xl",
    "columnOnXl": "pf-m-column-on-xl",
    "columnReverseOnXl": "pf-m-column-reverse-on-xl",
    "rowOnXl": "pf-m-row-on-xl",
    "rowReverseOnXl": "pf-m-row-reverse-on-xl",
    "wrapOnXl": "pf-m-wrap-on-xl",
    "wrapReverseOnXl": "pf-m-wrap-reverse-on-xl",
    "nowrapOnXl": "pf-m-nowrap-on-xl",
    "justifyContentFlexStartOnXl": "pf-m-justify-content-flex-start-on-xl",
    "justifyContentFlexEndOnXl": "pf-m-justify-content-flex-end-on-xl",
    "justifyContentCenterOnXl": "pf-m-justify-content-center-on-xl",
    "justifyContentSpaceBetweenOnXl": "pf-m-justify-content-space-between-on-xl",
    "justifyContentSpaceAroundOnXl": "pf-m-justify-content-space-around-on-xl",
    "justifyContentSpaceEvenlyOnXl": "pf-m-justify-content-space-evenly-on-xl",
    "alignItemsFlexStartOnXl": "pf-m-align-items-flex-start-on-xl",
    "alignItemsFlexEndOnXl": "pf-m-align-items-flex-end-on-xl",
    "alignItemsCenterOnXl": "pf-m-align-items-center-on-xl",
    "alignItemsStretchOnXl": "pf-m-align-items-stretch-on-xl",
    "alignItemsBaselineOnXl": "pf-m-align-items-baseline-on-xl",
    "alignContentFlexStartOnXl": "pf-m-align-content-flex-start-on-xl",
    "alignContentFlexEndOnXl": "pf-m-align-content-flex-end-on-xl",
    "alignContentCenterOnXl": "pf-m-align-content-center-on-xl",
    "alignContentStretchOnXl": "pf-m-align-content-stretch-on-xl",
    "alignContentSpaceBetweenOnXl": "pf-m-align-content-space-between-on-xl",
    "alignContentSpaceAroundOnXl": "pf-m-align-content-space-around-on-xl",
    "alignRightOnXl": "pf-m-align-right-on-xl",
    "alignLeftOnXl": "pf-m-align-left-on-xl",
    "growOnXl": "pf-m-grow-on-xl",
    "shrinkOnXl": "pf-m-shrink-on-xl",
    "fullWidthOnXl": "pf-m-full-width-on-xl",
    "flex_1OnXl": "pf-m-flex-1-on-xl",
    "flex_2OnXl": "pf-m-flex-2-on-xl",
    "flex_3OnXl": "pf-m-flex-3-on-xl",
    "flex_4OnXl": "pf-m-flex-4-on-xl",
    "flexDefaultOnXl": "pf-m-flex-default-on-xl",
    "flexNoneOnXl": "pf-m-flex-none-on-xl",
    "alignSelfFlexStartOnXl": "pf-m-align-self-flex-start-on-xl",
    "alignSelfFlexEndOnXl": "pf-m-align-self-flex-end-on-xl",
    "alignSelfCenterOnXl": "pf-m-align-self-center-on-xl",
    "alignSelfBaselineOnXl": "pf-m-align-self-baseline-on-xl",
    "alignSelfStretchOnXl": "pf-m-align-self-stretch-on-xl",
    "flexOn_2xl": "pf-m-flex-on-2xl",
    "inlineFlexOn_2xl": "pf-m-inline-flex-on-2xl",
    "columnOn_2xl": "pf-m-column-on-2xl",
    "columnReverseOn_2xl": "pf-m-column-reverse-on-2xl",
    "rowOn_2xl": "pf-m-row-on-2xl",
    "rowReverseOn_2xl": "pf-m-row-reverse-on-2xl",
    "wrapOn_2xl": "pf-m-wrap-on-2xl",
    "wrapReverseOn_2xl": "pf-m-wrap-reverse-on-2xl",
    "nowrapOn_2xl": "pf-m-nowrap-on-2xl",
    "justifyContentFlexStartOn_2xl": "pf-m-justify-content-flex-start-on-2xl",
    "justifyContentFlexEndOn_2xl": "pf-m-justify-content-flex-end-on-2xl",
    "justifyContentCenterOn_2xl": "pf-m-justify-content-center-on-2xl",
    "justifyContentSpaceBetweenOn_2xl": "pf-m-justify-content-space-between-on-2xl",
    "justifyContentSpaceAroundOn_2xl": "pf-m-justify-content-space-around-on-2xl",
    "justifyContentSpaceEvenlyOn_2xl": "pf-m-justify-content-space-evenly-on-2xl",
    "alignItemsFlexStartOn_2xl": "pf-m-align-items-flex-start-on-2xl",
    "alignItemsFlexEndOn_2xl": "pf-m-align-items-flex-end-on-2xl",
    "alignItemsCenterOn_2xl": "pf-m-align-items-center-on-2xl",
    "alignItemsStretchOn_2xl": "pf-m-align-items-stretch-on-2xl",
    "alignItemsBaselineOn_2xl": "pf-m-align-items-baseline-on-2xl",
    "alignContentFlexStartOn_2xl": "pf-m-align-content-flex-start-on-2xl",
    "alignContentFlexEndOn_2xl": "pf-m-align-content-flex-end-on-2xl",
    "alignContentCenterOn_2xl": "pf-m-align-content-center-on-2xl",
    "alignContentStretchOn_2xl": "pf-m-align-content-stretch-on-2xl",
    "alignContentSpaceBetweenOn_2xl": "pf-m-align-content-space-between-on-2xl",
    "alignContentSpaceAroundOn_2xl": "pf-m-align-content-space-around-on-2xl",
    "alignRightOn_2xl": "pf-m-align-right-on-2xl",
    "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
    "growOn_2xl": "pf-m-grow-on-2xl",
    "shrinkOn_2xl": "pf-m-shrink-on-2xl",
    "fullWidthOn_2xl": "pf-m-full-width-on-2xl",
    "flex_1On_2xl": "pf-m-flex-1-on-2xl",
    "flex_2On_2xl": "pf-m-flex-2-on-2xl",
    "flex_3On_2xl": "pf-m-flex-3-on-2xl",
    "flex_4On_2xl": "pf-m-flex-4-on-2xl",
    "flexDefaultOn_2xl": "pf-m-flex-default-on-2xl",
    "flexNoneOn_2xl": "pf-m-flex-none-on-2xl",
    "alignSelfFlexStartOn_2xl": "pf-m-align-self-flex-start-on-2xl",
    "alignSelfFlexEndOn_2xl": "pf-m-align-self-flex-end-on-2xl",
    "alignSelfCenterOn_2xl": "pf-m-align-self-center-on-2xl",
    "alignSelfBaselineOn_2xl": "pf-m-align-self-baseline-on-2xl",
    "alignSelfStretchOn_2xl": "pf-m-align-self-stretch-on-2xl",
    "spaceItemsNone": "pf-m-space-items-none",
    "spaceItemsXs": "pf-m-space-items-xs",
    "spaceItemsSm": "pf-m-space-items-sm",
    "spaceItemsMd": "pf-m-space-items-md",
    "spaceItemsLg": "pf-m-space-items-lg",
    "spaceItemsXl": "pf-m-space-items-xl",
    "spaceItems_2xl": "pf-m-space-items-2xl",
    "spaceItems_3xl": "pf-m-space-items-3xl",
    "spaceItems_4xl": "pf-m-space-items-4xl",
    "spaceItemsNoneOnSm": "pf-m-space-items-none-on-sm",
    "spaceItemsXsOnSm": "pf-m-space-items-xs-on-sm",
    "spaceItemsSmOnSm": "pf-m-space-items-sm-on-sm",
    "spaceItemsMdOnSm": "pf-m-space-items-md-on-sm",
    "spaceItemsLgOnSm": "pf-m-space-items-lg-on-sm",
    "spaceItemsXlOnSm": "pf-m-space-items-xl-on-sm",
    "spaceItems_2xlOnSm": "pf-m-space-items-2xl-on-sm",
    "spaceItems_3xlOnSm": "pf-m-space-items-3xl-on-sm",
    "spaceItems_4xlOnSm": "pf-m-space-items-4xl-on-sm",
    "spaceItemsNoneOnMd": "pf-m-space-items-none-on-md",
    "spaceItemsXsOnMd": "pf-m-space-items-xs-on-md",
    "spaceItemsSmOnMd": "pf-m-space-items-sm-on-md",
    "spaceItemsMdOnMd": "pf-m-space-items-md-on-md",
    "spaceItemsLgOnMd": "pf-m-space-items-lg-on-md",
    "spaceItemsXlOnMd": "pf-m-space-items-xl-on-md",
    "spaceItems_2xlOnMd": "pf-m-space-items-2xl-on-md",
    "spaceItems_3xlOnMd": "pf-m-space-items-3xl-on-md",
    "spaceItems_4xlOnMd": "pf-m-space-items-4xl-on-md",
    "spaceItemsNoneOnLg": "pf-m-space-items-none-on-lg",
    "spaceItemsXsOnLg": "pf-m-space-items-xs-on-lg",
    "spaceItemsSmOnLg": "pf-m-space-items-sm-on-lg",
    "spaceItemsMdOnLg": "pf-m-space-items-md-on-lg",
    "spaceItemsLgOnLg": "pf-m-space-items-lg-on-lg",
    "spaceItemsXlOnLg": "pf-m-space-items-xl-on-lg",
    "spaceItems_2xlOnLg": "pf-m-space-items-2xl-on-lg",
    "spaceItems_3xlOnLg": "pf-m-space-items-3xl-on-lg",
    "spaceItems_4xlOnLg": "pf-m-space-items-4xl-on-lg",
    "spaceItemsNoneOnXl": "pf-m-space-items-none-on-xl",
    "spaceItemsXsOnXl": "pf-m-space-items-xs-on-xl",
    "spaceItemsSmOnXl": "pf-m-space-items-sm-on-xl",
    "spaceItemsMdOnXl": "pf-m-space-items-md-on-xl",
    "spaceItemsLgOnXl": "pf-m-space-items-lg-on-xl",
    "spaceItemsXlOnXl": "pf-m-space-items-xl-on-xl",
    "spaceItems_2xlOnXl": "pf-m-space-items-2xl-on-xl",
    "spaceItems_3xlOnXl": "pf-m-space-items-3xl-on-xl",
    "spaceItems_4xlOnXl": "pf-m-space-items-4xl-on-xl",
    "spaceItemsNoneOn_2xl": "pf-m-space-items-none-on-2xl",
    "spaceItemsXsOn_2xl": "pf-m-space-items-xs-on-2xl",
    "spaceItemsSmOn_2xl": "pf-m-space-items-sm-on-2xl",
    "spaceItemsMdOn_2xl": "pf-m-space-items-md-on-2xl",
    "spaceItemsLgOn_2xl": "pf-m-space-items-lg-on-2xl",
    "spaceItemsXlOn_2xl": "pf-m-space-items-xl-on-2xl",
    "spaceItems_2xlOn_2xl": "pf-m-space-items-2xl-on-2xl",
    "spaceItems_3xlOn_2xl": "pf-m-space-items-3xl-on-2xl",
    "spaceItems_4xlOn_2xl": "pf-m-space-items-4xl-on-2xl",
    "spacerNone": "pf-m-spacer-none",
    "spacerXs": "pf-m-spacer-xs",
    "spacerSm": "pf-m-spacer-sm",
    "spacerMd": "pf-m-spacer-md",
    "spacerLg": "pf-m-spacer-lg",
    "spacerXl": "pf-m-spacer-xl",
    "spacer_2xl": "pf-m-spacer-2xl",
    "spacer_3xl": "pf-m-spacer-3xl",
    "spacer_4xl": "pf-m-spacer-4xl",
    "spacerNoneOnSm": "pf-m-spacer-none-on-sm",
    "spacerXsOnSm": "pf-m-spacer-xs-on-sm",
    "spacerSmOnSm": "pf-m-spacer-sm-on-sm",
    "spacerMdOnSm": "pf-m-spacer-md-on-sm",
    "spacerLgOnSm": "pf-m-spacer-lg-on-sm",
    "spacerXlOnSm": "pf-m-spacer-xl-on-sm",
    "spacer_2xlOnSm": "pf-m-spacer-2xl-on-sm",
    "spacer_3xlOnSm": "pf-m-spacer-3xl-on-sm",
    "spacer_4xlOnSm": "pf-m-spacer-4xl-on-sm",
    "spacerNoneOnMd": "pf-m-spacer-none-on-md",
    "spacerXsOnMd": "pf-m-spacer-xs-on-md",
    "spacerSmOnMd": "pf-m-spacer-sm-on-md",
    "spacerMdOnMd": "pf-m-spacer-md-on-md",
    "spacerLgOnMd": "pf-m-spacer-lg-on-md",
    "spacerXlOnMd": "pf-m-spacer-xl-on-md",
    "spacer_2xlOnMd": "pf-m-spacer-2xl-on-md",
    "spacer_3xlOnMd": "pf-m-spacer-3xl-on-md",
    "spacer_4xlOnMd": "pf-m-spacer-4xl-on-md",
    "spacerNoneOnLg": "pf-m-spacer-none-on-lg",
    "spacerXsOnLg": "pf-m-spacer-xs-on-lg",
    "spacerSmOnLg": "pf-m-spacer-sm-on-lg",
    "spacerMdOnLg": "pf-m-spacer-md-on-lg",
    "spacerLgOnLg": "pf-m-spacer-lg-on-lg",
    "spacerXlOnLg": "pf-m-spacer-xl-on-lg",
    "spacer_2xlOnLg": "pf-m-spacer-2xl-on-lg",
    "spacer_3xlOnLg": "pf-m-spacer-3xl-on-lg",
    "spacer_4xlOnLg": "pf-m-spacer-4xl-on-lg",
    "spacerNoneOnXl": "pf-m-spacer-none-on-xl",
    "spacerXsOnXl": "pf-m-spacer-xs-on-xl",
    "spacerSmOnXl": "pf-m-spacer-sm-on-xl",
    "spacerMdOnXl": "pf-m-spacer-md-on-xl",
    "spacerLgOnXl": "pf-m-spacer-lg-on-xl",
    "spacerXlOnXl": "pf-m-spacer-xl-on-xl",
    "spacer_2xlOnXl": "pf-m-spacer-2xl-on-xl",
    "spacer_3xlOnXl": "pf-m-spacer-3xl-on-xl",
    "spacer_4xlOnXl": "pf-m-spacer-4xl-on-xl",
    "spacerNoneOn_2xl": "pf-m-spacer-none-on-2xl",
    "spacerXsOn_2xl": "pf-m-spacer-xs-on-2xl",
    "spacerSmOn_2xl": "pf-m-spacer-sm-on-2xl",
    "spacerMdOn_2xl": "pf-m-spacer-md-on-2xl",
    "spacerLgOn_2xl": "pf-m-spacer-lg-on-2xl",
    "spacerXlOn_2xl": "pf-m-spacer-xl-on-2xl",
    "spacer_2xlOn_2xl": "pf-m-spacer-2xl-on-2xl",
    "spacer_3xlOn_2xl": "pf-m-spacer-3xl-on-2xl",
    "spacer_4xlOn_2xl": "pf-m-spacer-4xl-on-2xl",
    "gap": "pf-m-gap",
    "gapNone": "pf-m-gap-none",
    "gapXs": "pf-m-gap-xs",
    "gapSm": "pf-m-gap-sm",
    "gapMd": "pf-m-gap-md",
    "gapLg": "pf-m-gap-lg",
    "gapXl": "pf-m-gap-xl",
    "gap_2xl": "pf-m-gap-2xl",
    "gap_3xl": "pf-m-gap-3xl",
    "gap_4xl": "pf-m-gap-4xl",
    "gapOnSm": "pf-m-gap-on-sm",
    "gapNoneOnSm": "pf-m-gap-none-on-sm",
    "gapXsOnSm": "pf-m-gap-xs-on-sm",
    "gapSmOnSm": "pf-m-gap-sm-on-sm",
    "gapMdOnSm": "pf-m-gap-md-on-sm",
    "gapLgOnSm": "pf-m-gap-lg-on-sm",
    "gapXlOnSm": "pf-m-gap-xl-on-sm",
    "gap_2xlOnSm": "pf-m-gap-2xl-on-sm",
    "gap_3xlOnSm": "pf-m-gap-3xl-on-sm",
    "gap_4xlOnSm": "pf-m-gap-4xl-on-sm",
    "gapOnMd": "pf-m-gap-on-md",
    "gapNoneOnMd": "pf-m-gap-none-on-md",
    "gapXsOnMd": "pf-m-gap-xs-on-md",
    "gapSmOnMd": "pf-m-gap-sm-on-md",
    "gapMdOnMd": "pf-m-gap-md-on-md",
    "gapLgOnMd": "pf-m-gap-lg-on-md",
    "gapXlOnMd": "pf-m-gap-xl-on-md",
    "gap_2xlOnMd": "pf-m-gap-2xl-on-md",
    "gap_3xlOnMd": "pf-m-gap-3xl-on-md",
    "gap_4xlOnMd": "pf-m-gap-4xl-on-md",
    "gapOnLg": "pf-m-gap-on-lg",
    "gapNoneOnLg": "pf-m-gap-none-on-lg",
    "gapXsOnLg": "pf-m-gap-xs-on-lg",
    "gapSmOnLg": "pf-m-gap-sm-on-lg",
    "gapMdOnLg": "pf-m-gap-md-on-lg",
    "gapLgOnLg": "pf-m-gap-lg-on-lg",
    "gapXlOnLg": "pf-m-gap-xl-on-lg",
    "gap_2xlOnLg": "pf-m-gap-2xl-on-lg",
    "gap_3xlOnLg": "pf-m-gap-3xl-on-lg",
    "gap_4xlOnLg": "pf-m-gap-4xl-on-lg",
    "gapOnXl": "pf-m-gap-on-xl",
    "gapNoneOnXl": "pf-m-gap-none-on-xl",
    "gapXsOnXl": "pf-m-gap-xs-on-xl",
    "gapSmOnXl": "pf-m-gap-sm-on-xl",
    "gapMdOnXl": "pf-m-gap-md-on-xl",
    "gapLgOnXl": "pf-m-gap-lg-on-xl",
    "gapXlOnXl": "pf-m-gap-xl-on-xl",
    "gap_2xlOnXl": "pf-m-gap-2xl-on-xl",
    "gap_3xlOnXl": "pf-m-gap-3xl-on-xl",
    "gap_4xlOnXl": "pf-m-gap-4xl-on-xl",
    "gapOn_2xl": "pf-m-gap-on-2xl",
    "gapNoneOn_2xl": "pf-m-gap-none-on-2xl",
    "gapXsOn_2xl": "pf-m-gap-xs-on-2xl",
    "gapSmOn_2xl": "pf-m-gap-sm-on-2xl",
    "gapMdOn_2xl": "pf-m-gap-md-on-2xl",
    "gapLgOn_2xl": "pf-m-gap-lg-on-2xl",
    "gapXlOn_2xl": "pf-m-gap-xl-on-2xl",
    "gap_2xlOn_2xl": "pf-m-gap-2xl-on-2xl",
    "gap_3xlOn_2xl": "pf-m-gap-3xl-on-2xl",
    "gap_4xlOn_2xl": "pf-m-gap-4xl-on-2xl",
    "rowGap": "pf-m-row-gap",
    "rowGapNone": "pf-m-row-gap-none",
    "rowGapXs": "pf-m-row-gap-xs",
    "rowGapSm": "pf-m-row-gap-sm",
    "rowGapMd": "pf-m-row-gap-md",
    "rowGapLg": "pf-m-row-gap-lg",
    "rowGapXl": "pf-m-row-gap-xl",
    "rowGap_2xl": "pf-m-row-gap-2xl",
    "rowGap_3xl": "pf-m-row-gap-3xl",
    "rowGap_4xl": "pf-m-row-gap-4xl",
    "rowGapOnSm": "pf-m-row-gap-on-sm",
    "rowGapNoneOnSm": "pf-m-row-gap-none-on-sm",
    "rowGapXsOnSm": "pf-m-row-gap-xs-on-sm",
    "rowGapSmOnSm": "pf-m-row-gap-sm-on-sm",
    "rowGapMdOnSm": "pf-m-row-gap-md-on-sm",
    "rowGapLgOnSm": "pf-m-row-gap-lg-on-sm",
    "rowGapXlOnSm": "pf-m-row-gap-xl-on-sm",
    "rowGap_2xlOnSm": "pf-m-row-gap-2xl-on-sm",
    "rowGap_3xlOnSm": "pf-m-row-gap-3xl-on-sm",
    "rowGap_4xlOnSm": "pf-m-row-gap-4xl-on-sm",
    "rowGapOnMd": "pf-m-row-gap-on-md",
    "rowGapNoneOnMd": "pf-m-row-gap-none-on-md",
    "rowGapXsOnMd": "pf-m-row-gap-xs-on-md",
    "rowGapSmOnMd": "pf-m-row-gap-sm-on-md",
    "rowGapMdOnMd": "pf-m-row-gap-md-on-md",
    "rowGapLgOnMd": "pf-m-row-gap-lg-on-md",
    "rowGapXlOnMd": "pf-m-row-gap-xl-on-md",
    "rowGap_2xlOnMd": "pf-m-row-gap-2xl-on-md",
    "rowGap_3xlOnMd": "pf-m-row-gap-3xl-on-md",
    "rowGap_4xlOnMd": "pf-m-row-gap-4xl-on-md",
    "rowGapOnLg": "pf-m-row-gap-on-lg",
    "rowGapNoneOnLg": "pf-m-row-gap-none-on-lg",
    "rowGapXsOnLg": "pf-m-row-gap-xs-on-lg",
    "rowGapSmOnLg": "pf-m-row-gap-sm-on-lg",
    "rowGapMdOnLg": "pf-m-row-gap-md-on-lg",
    "rowGapLgOnLg": "pf-m-row-gap-lg-on-lg",
    "rowGapXlOnLg": "pf-m-row-gap-xl-on-lg",
    "rowGap_2xlOnLg": "pf-m-row-gap-2xl-on-lg",
    "rowGap_3xlOnLg": "pf-m-row-gap-3xl-on-lg",
    "rowGap_4xlOnLg": "pf-m-row-gap-4xl-on-lg",
    "rowGapOnXl": "pf-m-row-gap-on-xl",
    "rowGapNoneOnXl": "pf-m-row-gap-none-on-xl",
    "rowGapXsOnXl": "pf-m-row-gap-xs-on-xl",
    "rowGapSmOnXl": "pf-m-row-gap-sm-on-xl",
    "rowGapMdOnXl": "pf-m-row-gap-md-on-xl",
    "rowGapLgOnXl": "pf-m-row-gap-lg-on-xl",
    "rowGapXlOnXl": "pf-m-row-gap-xl-on-xl",
    "rowGap_2xlOnXl": "pf-m-row-gap-2xl-on-xl",
    "rowGap_3xlOnXl": "pf-m-row-gap-3xl-on-xl",
    "rowGap_4xlOnXl": "pf-m-row-gap-4xl-on-xl",
    "rowGapOn_2xl": "pf-m-row-gap-on-2xl",
    "rowGapNoneOn_2xl": "pf-m-row-gap-none-on-2xl",
    "rowGapXsOn_2xl": "pf-m-row-gap-xs-on-2xl",
    "rowGapSmOn_2xl": "pf-m-row-gap-sm-on-2xl",
    "rowGapMdOn_2xl": "pf-m-row-gap-md-on-2xl",
    "rowGapLgOn_2xl": "pf-m-row-gap-lg-on-2xl",
    "rowGapXlOn_2xl": "pf-m-row-gap-xl-on-2xl",
    "rowGap_2xlOn_2xl": "pf-m-row-gap-2xl-on-2xl",
    "rowGap_3xlOn_2xl": "pf-m-row-gap-3xl-on-2xl",
    "rowGap_4xlOn_2xl": "pf-m-row-gap-4xl-on-2xl",
    "columnGap": "pf-m-column-gap",
    "columnGapNone": "pf-m-column-gap-none",
    "columnGapXs": "pf-m-column-gap-xs",
    "columnGapSm": "pf-m-column-gap-sm",
    "columnGapMd": "pf-m-column-gap-md",
    "columnGapLg": "pf-m-column-gap-lg",
    "columnGapXl": "pf-m-column-gap-xl",
    "columnGap_2xl": "pf-m-column-gap-2xl",
    "columnGap_3xl": "pf-m-column-gap-3xl",
    "columnGap_4xl": "pf-m-column-gap-4xl",
    "columnGapOnSm": "pf-m-column-gap-on-sm",
    "columnGapNoneOnSm": "pf-m-column-gap-none-on-sm",
    "columnGapXsOnSm": "pf-m-column-gap-xs-on-sm",
    "columnGapSmOnSm": "pf-m-column-gap-sm-on-sm",
    "columnGapMdOnSm": "pf-m-column-gap-md-on-sm",
    "columnGapLgOnSm": "pf-m-column-gap-lg-on-sm",
    "columnGapXlOnSm": "pf-m-column-gap-xl-on-sm",
    "columnGap_2xlOnSm": "pf-m-column-gap-2xl-on-sm",
    "columnGap_3xlOnSm": "pf-m-column-gap-3xl-on-sm",
    "columnGap_4xlOnSm": "pf-m-column-gap-4xl-on-sm",
    "columnGapOnMd": "pf-m-column-gap-on-md",
    "columnGapNoneOnMd": "pf-m-column-gap-none-on-md",
    "columnGapXsOnMd": "pf-m-column-gap-xs-on-md",
    "columnGapSmOnMd": "pf-m-column-gap-sm-on-md",
    "columnGapMdOnMd": "pf-m-column-gap-md-on-md",
    "columnGapLgOnMd": "pf-m-column-gap-lg-on-md",
    "columnGapXlOnMd": "pf-m-column-gap-xl-on-md",
    "columnGap_2xlOnMd": "pf-m-column-gap-2xl-on-md",
    "columnGap_3xlOnMd": "pf-m-column-gap-3xl-on-md",
    "columnGap_4xlOnMd": "pf-m-column-gap-4xl-on-md",
    "columnGapOnLg": "pf-m-column-gap-on-lg",
    "columnGapNoneOnLg": "pf-m-column-gap-none-on-lg",
    "columnGapXsOnLg": "pf-m-column-gap-xs-on-lg",
    "columnGapSmOnLg": "pf-m-column-gap-sm-on-lg",
    "columnGapMdOnLg": "pf-m-column-gap-md-on-lg",
    "columnGapLgOnLg": "pf-m-column-gap-lg-on-lg",
    "columnGapXlOnLg": "pf-m-column-gap-xl-on-lg",
    "columnGap_2xlOnLg": "pf-m-column-gap-2xl-on-lg",
    "columnGap_3xlOnLg": "pf-m-column-gap-3xl-on-lg",
    "columnGap_4xlOnLg": "pf-m-column-gap-4xl-on-lg",
    "columnGapOnXl": "pf-m-column-gap-on-xl",
    "columnGapNoneOnXl": "pf-m-column-gap-none-on-xl",
    "columnGapXsOnXl": "pf-m-column-gap-xs-on-xl",
    "columnGapSmOnXl": "pf-m-column-gap-sm-on-xl",
    "columnGapMdOnXl": "pf-m-column-gap-md-on-xl",
    "columnGapLgOnXl": "pf-m-column-gap-lg-on-xl",
    "columnGapXlOnXl": "pf-m-column-gap-xl-on-xl",
    "columnGap_2xlOnXl": "pf-m-column-gap-2xl-on-xl",
    "columnGap_3xlOnXl": "pf-m-column-gap-3xl-on-xl",
    "columnGap_4xlOnXl": "pf-m-column-gap-4xl-on-xl",
    "columnGapOn_2xl": "pf-m-column-gap-on-2xl",
    "columnGapNoneOn_2xl": "pf-m-column-gap-none-on-2xl",
    "columnGapXsOn_2xl": "pf-m-column-gap-xs-on-2xl",
    "columnGapSmOn_2xl": "pf-m-column-gap-sm-on-2xl",
    "columnGapMdOn_2xl": "pf-m-column-gap-md-on-2xl",
    "columnGapLgOn_2xl": "pf-m-column-gap-lg-on-2xl",
    "columnGapXlOn_2xl": "pf-m-column-gap-xl-on-2xl",
    "columnGap_2xlOn_2xl": "pf-m-column-gap-2xl-on-2xl",
    "columnGap_3xlOn_2xl": "pf-m-column-gap-3xl-on-2xl",
    "columnGap_4xlOn_2xl": "pf-m-column-gap-4xl-on-2xl"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/l_flex_item_Order.js
var l_flex_item_Order = {
  "name": "--pf-v5-l-flex--item--Order",
  "value": "0",
  "var": "var(--pf-v5-l-flex--item--Order)"
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js
var Flex = (_a) => {
  var { children = null, className = "", component = "div", spacer, spaceItems, gap, rowGap, columnGap, grow, shrink, flex, direction, alignItems, alignContent, alignSelf, align, justifyContent, display, fullWidth, flexWrap, order: order2, style } = _a, props = __rest(_a, ["children", "className", "component", "spacer", "spaceItems", "gap", "rowGap", "columnGap", "grow", "shrink", "flex", "direction", "alignItems", "alignContent", "alignSelf", "align", "justifyContent", "display", "fullWidth", "flexWrap", "order", "style"]);
  const Component44 = component;
  return React343.createElement(Component44, Object.assign({ className: css(flex_default.flex, formatBreakpointMods(spacer, flex_default), formatBreakpointMods(spaceItems, flex_default), formatBreakpointMods(grow, flex_default), formatBreakpointMods(shrink, flex_default), formatBreakpointMods(flex, flex_default), formatBreakpointMods(direction, flex_default), formatBreakpointMods(alignItems, flex_default), formatBreakpointMods(alignContent, flex_default), formatBreakpointMods(alignSelf, flex_default), formatBreakpointMods(align, flex_default), formatBreakpointMods(justifyContent, flex_default), formatBreakpointMods(display, flex_default), formatBreakpointMods(fullWidth, flex_default), formatBreakpointMods(flexWrap, flex_default), formatBreakpointMods(gap, flex_default), formatBreakpointMods(rowGap, flex_default), formatBreakpointMods(columnGap, flex_default), className), style: style || order2 ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order2, l_flex_item_Order.name)) : void 0 }, props), children);
};
Flex.displayName = "Flex";

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/FlexItem.js
init_tslib_es6();
var React344 = __toESM(require_react());
var FlexItem = (_a) => {
  var { children = null, className = "", component = "div", spacer, grow, shrink, flex, alignSelf, align, fullWidth, order: order2, style } = _a, props = __rest(_a, ["children", "className", "component", "spacer", "grow", "shrink", "flex", "alignSelf", "align", "fullWidth", "order", "style"]);
  const Component44 = component;
  return React344.createElement(Component44, Object.assign({}, props, { className: css(formatBreakpointMods(spacer, flex_default), formatBreakpointMods(grow, flex_default), formatBreakpointMods(shrink, flex_default), formatBreakpointMods(flex, flex_default), formatBreakpointMods(alignSelf, flex_default), formatBreakpointMods(align, flex_default), formatBreakpointMods(fullWidth, flex_default), className), style: style || order2 ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order2, l_flex_item_Order.name)) : void 0 }), children);
};
FlexItem.displayName = "FlexItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/Gallery.js
init_tslib_es6();
var React345 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/layouts/Gallery/gallery.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/layouts/Gallery/gallery.css";
var gallery_default = {
  "gallery": "pf-v5-l-gallery",
  "modifiers": {
    "gutter": "pf-m-gutter"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/l_gallery_GridTemplateColumns_min.js
var l_gallery_GridTemplateColumns_min = {
  "name": "--pf-v5-l-gallery--GridTemplateColumns--min",
  "value": "250px",
  "var": "var(--pf-v5-l-gallery--GridTemplateColumns--min)"
};
var l_gallery_GridTemplateColumns_min_default = l_gallery_GridTemplateColumns_min;

// node_modules/@patternfly/react-tokens/dist/esm/l_gallery_GridTemplateColumns_max.js
var l_gallery_GridTemplateColumns_max = {
  "name": "--pf-v5-l-gallery--GridTemplateColumns--max",
  "value": "1fr",
  "var": "var(--pf-v5-l-gallery--GridTemplateColumns--max)"
};
var l_gallery_GridTemplateColumns_max_default = l_gallery_GridTemplateColumns_max;

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/Gallery.js
var Gallery = (_a) => {
  var { children = null, className = "", component = "div", hasGutter = false, minWidths, maxWidths } = _a, props = __rest(_a, ["children", "className", "component", "hasGutter", "minWidths", "maxWidths"]);
  const minWidthStyles = {};
  const Component44 = component;
  if (minWidths) {
    Object.entries(minWidths || {}).map(([breakpoint, value]) => minWidthStyles[`${l_gallery_GridTemplateColumns_min_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
  }
  const maxWidthStyles = {};
  if (maxWidths) {
    Object.entries(maxWidths || {}).map(([breakpoint, value]) => maxWidthStyles[`${l_gallery_GridTemplateColumns_max_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
  }
  const widthStyles = Object.assign(Object.assign({}, minWidthStyles), maxWidthStyles);
  return React345.createElement(Component44, Object.assign({ className: css(gallery_default.gallery, hasGutter && gallery_default.modifiers.gutter, className) }, props, (minWidths || maxWidths) && { style: Object.assign(Object.assign({}, widthStyles), props.style) }), children);
};
Gallery.displayName = "Gallery";

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/GalleryItem.js
init_tslib_es6();
var React346 = __toESM(require_react());
var GalleryItem = (_a) => {
  var { children = null, component = "div" } = _a, props = __rest(_a, ["children", "component"]);
  const Component44 = component;
  return React346.createElement(Component44, Object.assign({}, props), children);
};
GalleryItem.displayName = "GalleryItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/Grid.js
init_tslib_es6();
var React347 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/layouts/Grid/grid.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/layouts/Grid/grid.css";
var grid_default = {
  "grid": "pf-v5-l-grid",
  "gridItem": "pf-v5-l-grid__item",
  "modifiers": {
    "all_1Col": "pf-m-all-1-col",
    "all_2Col": "pf-m-all-2-col",
    "all_3Col": "pf-m-all-3-col",
    "all_4Col": "pf-m-all-4-col",
    "all_5Col": "pf-m-all-5-col",
    "all_6Col": "pf-m-all-6-col",
    "all_7Col": "pf-m-all-7-col",
    "all_8Col": "pf-m-all-8-col",
    "all_9Col": "pf-m-all-9-col",
    "all_10Col": "pf-m-all-10-col",
    "all_11Col": "pf-m-all-11-col",
    "all_12Col": "pf-m-all-12-col",
    "all_1ColOnSm": "pf-m-all-1-col-on-sm",
    "all_2ColOnSm": "pf-m-all-2-col-on-sm",
    "all_3ColOnSm": "pf-m-all-3-col-on-sm",
    "all_4ColOnSm": "pf-m-all-4-col-on-sm",
    "all_5ColOnSm": "pf-m-all-5-col-on-sm",
    "all_6ColOnSm": "pf-m-all-6-col-on-sm",
    "all_7ColOnSm": "pf-m-all-7-col-on-sm",
    "all_8ColOnSm": "pf-m-all-8-col-on-sm",
    "all_9ColOnSm": "pf-m-all-9-col-on-sm",
    "all_10ColOnSm": "pf-m-all-10-col-on-sm",
    "all_11ColOnSm": "pf-m-all-11-col-on-sm",
    "all_12ColOnSm": "pf-m-all-12-col-on-sm",
    "all_1ColOnMd": "pf-m-all-1-col-on-md",
    "all_2ColOnMd": "pf-m-all-2-col-on-md",
    "all_3ColOnMd": "pf-m-all-3-col-on-md",
    "all_4ColOnMd": "pf-m-all-4-col-on-md",
    "all_5ColOnMd": "pf-m-all-5-col-on-md",
    "all_6ColOnMd": "pf-m-all-6-col-on-md",
    "all_7ColOnMd": "pf-m-all-7-col-on-md",
    "all_8ColOnMd": "pf-m-all-8-col-on-md",
    "all_9ColOnMd": "pf-m-all-9-col-on-md",
    "all_10ColOnMd": "pf-m-all-10-col-on-md",
    "all_11ColOnMd": "pf-m-all-11-col-on-md",
    "all_12ColOnMd": "pf-m-all-12-col-on-md",
    "all_1ColOnLg": "pf-m-all-1-col-on-lg",
    "all_2ColOnLg": "pf-m-all-2-col-on-lg",
    "all_3ColOnLg": "pf-m-all-3-col-on-lg",
    "all_4ColOnLg": "pf-m-all-4-col-on-lg",
    "all_5ColOnLg": "pf-m-all-5-col-on-lg",
    "all_6ColOnLg": "pf-m-all-6-col-on-lg",
    "all_7ColOnLg": "pf-m-all-7-col-on-lg",
    "all_8ColOnLg": "pf-m-all-8-col-on-lg",
    "all_9ColOnLg": "pf-m-all-9-col-on-lg",
    "all_10ColOnLg": "pf-m-all-10-col-on-lg",
    "all_11ColOnLg": "pf-m-all-11-col-on-lg",
    "all_12ColOnLg": "pf-m-all-12-col-on-lg",
    "all_1ColOnXl": "pf-m-all-1-col-on-xl",
    "all_2ColOnXl": "pf-m-all-2-col-on-xl",
    "all_3ColOnXl": "pf-m-all-3-col-on-xl",
    "all_4ColOnXl": "pf-m-all-4-col-on-xl",
    "all_5ColOnXl": "pf-m-all-5-col-on-xl",
    "all_6ColOnXl": "pf-m-all-6-col-on-xl",
    "all_7ColOnXl": "pf-m-all-7-col-on-xl",
    "all_8ColOnXl": "pf-m-all-8-col-on-xl",
    "all_9ColOnXl": "pf-m-all-9-col-on-xl",
    "all_10ColOnXl": "pf-m-all-10-col-on-xl",
    "all_11ColOnXl": "pf-m-all-11-col-on-xl",
    "all_12ColOnXl": "pf-m-all-12-col-on-xl",
    "all_1ColOn_2xl": "pf-m-all-1-col-on-2xl",
    "all_2ColOn_2xl": "pf-m-all-2-col-on-2xl",
    "all_3ColOn_2xl": "pf-m-all-3-col-on-2xl",
    "all_4ColOn_2xl": "pf-m-all-4-col-on-2xl",
    "all_5ColOn_2xl": "pf-m-all-5-col-on-2xl",
    "all_6ColOn_2xl": "pf-m-all-6-col-on-2xl",
    "all_7ColOn_2xl": "pf-m-all-7-col-on-2xl",
    "all_8ColOn_2xl": "pf-m-all-8-col-on-2xl",
    "all_9ColOn_2xl": "pf-m-all-9-col-on-2xl",
    "all_10ColOn_2xl": "pf-m-all-10-col-on-2xl",
    "all_11ColOn_2xl": "pf-m-all-11-col-on-2xl",
    "all_12ColOn_2xl": "pf-m-all-12-col-on-2xl",
    "1Col": "pf-m-1-col",
    "2Col": "pf-m-2-col",
    "3Col": "pf-m-3-col",
    "4Col": "pf-m-4-col",
    "5Col": "pf-m-5-col",
    "6Col": "pf-m-6-col",
    "7Col": "pf-m-7-col",
    "8Col": "pf-m-8-col",
    "9Col": "pf-m-9-col",
    "10Col": "pf-m-10-col",
    "11Col": "pf-m-11-col",
    "12Col": "pf-m-12-col",
    "offset_1Col": "pf-m-offset-1-col",
    "offset_2Col": "pf-m-offset-2-col",
    "offset_3Col": "pf-m-offset-3-col",
    "offset_4Col": "pf-m-offset-4-col",
    "offset_5Col": "pf-m-offset-5-col",
    "offset_6Col": "pf-m-offset-6-col",
    "offset_7Col": "pf-m-offset-7-col",
    "offset_8Col": "pf-m-offset-8-col",
    "offset_9Col": "pf-m-offset-9-col",
    "offset_10Col": "pf-m-offset-10-col",
    "offset_11Col": "pf-m-offset-11-col",
    "offset_12Col": "pf-m-offset-12-col",
    "1Row": "pf-m-1-row",
    "2Row": "pf-m-2-row",
    "3Row": "pf-m-3-row",
    "4Row": "pf-m-4-row",
    "5Row": "pf-m-5-row",
    "6Row": "pf-m-6-row",
    "7Row": "pf-m-7-row",
    "8Row": "pf-m-8-row",
    "9Row": "pf-m-9-row",
    "10Row": "pf-m-10-row",
    "11Row": "pf-m-11-row",
    "12Row": "pf-m-12-row",
    "1ColOnSm": "pf-m-1-col-on-sm",
    "2ColOnSm": "pf-m-2-col-on-sm",
    "3ColOnSm": "pf-m-3-col-on-sm",
    "4ColOnSm": "pf-m-4-col-on-sm",
    "5ColOnSm": "pf-m-5-col-on-sm",
    "6ColOnSm": "pf-m-6-col-on-sm",
    "7ColOnSm": "pf-m-7-col-on-sm",
    "8ColOnSm": "pf-m-8-col-on-sm",
    "9ColOnSm": "pf-m-9-col-on-sm",
    "10ColOnSm": "pf-m-10-col-on-sm",
    "11ColOnSm": "pf-m-11-col-on-sm",
    "12ColOnSm": "pf-m-12-col-on-sm",
    "offset_1ColOnSm": "pf-m-offset-1-col-on-sm",
    "offset_2ColOnSm": "pf-m-offset-2-col-on-sm",
    "offset_3ColOnSm": "pf-m-offset-3-col-on-sm",
    "offset_4ColOnSm": "pf-m-offset-4-col-on-sm",
    "offset_5ColOnSm": "pf-m-offset-5-col-on-sm",
    "offset_6ColOnSm": "pf-m-offset-6-col-on-sm",
    "offset_7ColOnSm": "pf-m-offset-7-col-on-sm",
    "offset_8ColOnSm": "pf-m-offset-8-col-on-sm",
    "offset_9ColOnSm": "pf-m-offset-9-col-on-sm",
    "offset_10ColOnSm": "pf-m-offset-10-col-on-sm",
    "offset_11ColOnSm": "pf-m-offset-11-col-on-sm",
    "offset_12ColOnSm": "pf-m-offset-12-col-on-sm",
    "1RowOnSm": "pf-m-1-row-on-sm",
    "2RowOnSm": "pf-m-2-row-on-sm",
    "3RowOnSm": "pf-m-3-row-on-sm",
    "4RowOnSm": "pf-m-4-row-on-sm",
    "5RowOnSm": "pf-m-5-row-on-sm",
    "6RowOnSm": "pf-m-6-row-on-sm",
    "7RowOnSm": "pf-m-7-row-on-sm",
    "8RowOnSm": "pf-m-8-row-on-sm",
    "9RowOnSm": "pf-m-9-row-on-sm",
    "10RowOnSm": "pf-m-10-row-on-sm",
    "11RowOnSm": "pf-m-11-row-on-sm",
    "12RowOnSm": "pf-m-12-row-on-sm",
    "1ColOnMd": "pf-m-1-col-on-md",
    "2ColOnMd": "pf-m-2-col-on-md",
    "3ColOnMd": "pf-m-3-col-on-md",
    "4ColOnMd": "pf-m-4-col-on-md",
    "5ColOnMd": "pf-m-5-col-on-md",
    "6ColOnMd": "pf-m-6-col-on-md",
    "7ColOnMd": "pf-m-7-col-on-md",
    "8ColOnMd": "pf-m-8-col-on-md",
    "9ColOnMd": "pf-m-9-col-on-md",
    "10ColOnMd": "pf-m-10-col-on-md",
    "11ColOnMd": "pf-m-11-col-on-md",
    "12ColOnMd": "pf-m-12-col-on-md",
    "offset_1ColOnMd": "pf-m-offset-1-col-on-md",
    "offset_2ColOnMd": "pf-m-offset-2-col-on-md",
    "offset_3ColOnMd": "pf-m-offset-3-col-on-md",
    "offset_4ColOnMd": "pf-m-offset-4-col-on-md",
    "offset_5ColOnMd": "pf-m-offset-5-col-on-md",
    "offset_6ColOnMd": "pf-m-offset-6-col-on-md",
    "offset_7ColOnMd": "pf-m-offset-7-col-on-md",
    "offset_8ColOnMd": "pf-m-offset-8-col-on-md",
    "offset_9ColOnMd": "pf-m-offset-9-col-on-md",
    "offset_10ColOnMd": "pf-m-offset-10-col-on-md",
    "offset_11ColOnMd": "pf-m-offset-11-col-on-md",
    "offset_12ColOnMd": "pf-m-offset-12-col-on-md",
    "1RowOnMd": "pf-m-1-row-on-md",
    "2RowOnMd": "pf-m-2-row-on-md",
    "3RowOnMd": "pf-m-3-row-on-md",
    "4RowOnMd": "pf-m-4-row-on-md",
    "5RowOnMd": "pf-m-5-row-on-md",
    "6RowOnMd": "pf-m-6-row-on-md",
    "7RowOnMd": "pf-m-7-row-on-md",
    "8RowOnMd": "pf-m-8-row-on-md",
    "9RowOnMd": "pf-m-9-row-on-md",
    "10RowOnMd": "pf-m-10-row-on-md",
    "11RowOnMd": "pf-m-11-row-on-md",
    "12RowOnMd": "pf-m-12-row-on-md",
    "1ColOnLg": "pf-m-1-col-on-lg",
    "2ColOnLg": "pf-m-2-col-on-lg",
    "3ColOnLg": "pf-m-3-col-on-lg",
    "4ColOnLg": "pf-m-4-col-on-lg",
    "5ColOnLg": "pf-m-5-col-on-lg",
    "6ColOnLg": "pf-m-6-col-on-lg",
    "7ColOnLg": "pf-m-7-col-on-lg",
    "8ColOnLg": "pf-m-8-col-on-lg",
    "9ColOnLg": "pf-m-9-col-on-lg",
    "10ColOnLg": "pf-m-10-col-on-lg",
    "11ColOnLg": "pf-m-11-col-on-lg",
    "12ColOnLg": "pf-m-12-col-on-lg",
    "offset_1ColOnLg": "pf-m-offset-1-col-on-lg",
    "offset_2ColOnLg": "pf-m-offset-2-col-on-lg",
    "offset_3ColOnLg": "pf-m-offset-3-col-on-lg",
    "offset_4ColOnLg": "pf-m-offset-4-col-on-lg",
    "offset_5ColOnLg": "pf-m-offset-5-col-on-lg",
    "offset_6ColOnLg": "pf-m-offset-6-col-on-lg",
    "offset_7ColOnLg": "pf-m-offset-7-col-on-lg",
    "offset_8ColOnLg": "pf-m-offset-8-col-on-lg",
    "offset_9ColOnLg": "pf-m-offset-9-col-on-lg",
    "offset_10ColOnLg": "pf-m-offset-10-col-on-lg",
    "offset_11ColOnLg": "pf-m-offset-11-col-on-lg",
    "offset_12ColOnLg": "pf-m-offset-12-col-on-lg",
    "1RowOnLg": "pf-m-1-row-on-lg",
    "2RowOnLg": "pf-m-2-row-on-lg",
    "3RowOnLg": "pf-m-3-row-on-lg",
    "4RowOnLg": "pf-m-4-row-on-lg",
    "5RowOnLg": "pf-m-5-row-on-lg",
    "6RowOnLg": "pf-m-6-row-on-lg",
    "7RowOnLg": "pf-m-7-row-on-lg",
    "8RowOnLg": "pf-m-8-row-on-lg",
    "9RowOnLg": "pf-m-9-row-on-lg",
    "10RowOnLg": "pf-m-10-row-on-lg",
    "11RowOnLg": "pf-m-11-row-on-lg",
    "12RowOnLg": "pf-m-12-row-on-lg",
    "1ColOnXl": "pf-m-1-col-on-xl",
    "2ColOnXl": "pf-m-2-col-on-xl",
    "3ColOnXl": "pf-m-3-col-on-xl",
    "4ColOnXl": "pf-m-4-col-on-xl",
    "5ColOnXl": "pf-m-5-col-on-xl",
    "6ColOnXl": "pf-m-6-col-on-xl",
    "7ColOnXl": "pf-m-7-col-on-xl",
    "8ColOnXl": "pf-m-8-col-on-xl",
    "9ColOnXl": "pf-m-9-col-on-xl",
    "10ColOnXl": "pf-m-10-col-on-xl",
    "11ColOnXl": "pf-m-11-col-on-xl",
    "12ColOnXl": "pf-m-12-col-on-xl",
    "offset_1ColOnXl": "pf-m-offset-1-col-on-xl",
    "offset_2ColOnXl": "pf-m-offset-2-col-on-xl",
    "offset_3ColOnXl": "pf-m-offset-3-col-on-xl",
    "offset_4ColOnXl": "pf-m-offset-4-col-on-xl",
    "offset_5ColOnXl": "pf-m-offset-5-col-on-xl",
    "offset_6ColOnXl": "pf-m-offset-6-col-on-xl",
    "offset_7ColOnXl": "pf-m-offset-7-col-on-xl",
    "offset_8ColOnXl": "pf-m-offset-8-col-on-xl",
    "offset_9ColOnXl": "pf-m-offset-9-col-on-xl",
    "offset_10ColOnXl": "pf-m-offset-10-col-on-xl",
    "offset_11ColOnXl": "pf-m-offset-11-col-on-xl",
    "offset_12ColOnXl": "pf-m-offset-12-col-on-xl",
    "1RowOnXl": "pf-m-1-row-on-xl",
    "2RowOnXl": "pf-m-2-row-on-xl",
    "3RowOnXl": "pf-m-3-row-on-xl",
    "4RowOnXl": "pf-m-4-row-on-xl",
    "5RowOnXl": "pf-m-5-row-on-xl",
    "6RowOnXl": "pf-m-6-row-on-xl",
    "7RowOnXl": "pf-m-7-row-on-xl",
    "8RowOnXl": "pf-m-8-row-on-xl",
    "9RowOnXl": "pf-m-9-row-on-xl",
    "10RowOnXl": "pf-m-10-row-on-xl",
    "11RowOnXl": "pf-m-11-row-on-xl",
    "12RowOnXl": "pf-m-12-row-on-xl",
    "1ColOn_2xl": "pf-m-1-col-on-2xl",
    "2ColOn_2xl": "pf-m-2-col-on-2xl",
    "3ColOn_2xl": "pf-m-3-col-on-2xl",
    "4ColOn_2xl": "pf-m-4-col-on-2xl",
    "5ColOn_2xl": "pf-m-5-col-on-2xl",
    "6ColOn_2xl": "pf-m-6-col-on-2xl",
    "7ColOn_2xl": "pf-m-7-col-on-2xl",
    "8ColOn_2xl": "pf-m-8-col-on-2xl",
    "9ColOn_2xl": "pf-m-9-col-on-2xl",
    "10ColOn_2xl": "pf-m-10-col-on-2xl",
    "11ColOn_2xl": "pf-m-11-col-on-2xl",
    "12ColOn_2xl": "pf-m-12-col-on-2xl",
    "offset_1ColOn_2xl": "pf-m-offset-1-col-on-2xl",
    "offset_2ColOn_2xl": "pf-m-offset-2-col-on-2xl",
    "offset_3ColOn_2xl": "pf-m-offset-3-col-on-2xl",
    "offset_4ColOn_2xl": "pf-m-offset-4-col-on-2xl",
    "offset_5ColOn_2xl": "pf-m-offset-5-col-on-2xl",
    "offset_6ColOn_2xl": "pf-m-offset-6-col-on-2xl",
    "offset_7ColOn_2xl": "pf-m-offset-7-col-on-2xl",
    "offset_8ColOn_2xl": "pf-m-offset-8-col-on-2xl",
    "offset_9ColOn_2xl": "pf-m-offset-9-col-on-2xl",
    "offset_10ColOn_2xl": "pf-m-offset-10-col-on-2xl",
    "offset_11ColOn_2xl": "pf-m-offset-11-col-on-2xl",
    "offset_12ColOn_2xl": "pf-m-offset-12-col-on-2xl",
    "1RowOn_2xl": "pf-m-1-row-on-2xl",
    "2RowOn_2xl": "pf-m-2-row-on-2xl",
    "3RowOn_2xl": "pf-m-3-row-on-2xl",
    "4RowOn_2xl": "pf-m-4-row-on-2xl",
    "5RowOn_2xl": "pf-m-5-row-on-2xl",
    "6RowOn_2xl": "pf-m-6-row-on-2xl",
    "7RowOn_2xl": "pf-m-7-row-on-2xl",
    "8RowOn_2xl": "pf-m-8-row-on-2xl",
    "9RowOn_2xl": "pf-m-9-row-on-2xl",
    "10RowOn_2xl": "pf-m-10-row-on-2xl",
    "11RowOn_2xl": "pf-m-11-row-on-2xl",
    "12RowOn_2xl": "pf-m-12-row-on-2xl",
    "gutter": "pf-m-gutter"
  }
};

// node_modules/@patternfly/react-core/dist/esm/styles/sizes.js
var BaseSizes;
(function(BaseSizes2) {
  BaseSizes2["xs"] = "xs";
  BaseSizes2["sm"] = "sm";
  BaseSizes2["md"] = "md";
  BaseSizes2["lg"] = "lg";
  BaseSizes2["xl"] = "xl";
  BaseSizes2["2xl"] = "2xl";
  BaseSizes2["3xl"] = "3xl";
  BaseSizes2["4xl"] = "4xl";
})(BaseSizes || (BaseSizes = {}));
var DeviceSizes;
(function(DeviceSizes2) {
  DeviceSizes2["sm"] = "Sm";
  DeviceSizes2["md"] = "Md";
  DeviceSizes2["lg"] = "Lg";
  DeviceSizes2["xl"] = "Xl";
  DeviceSizes2["xl2"] = "_2xl";
})(DeviceSizes || (DeviceSizes = {}));

// node_modules/@patternfly/react-tokens/dist/esm/l_grid_item_Order.js
var l_grid_item_Order = {
  "name": "--pf-v5-l-grid--item--Order",
  "value": "0",
  "var": "var(--pf-v5-l-grid--item--Order)"
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/Grid.js
var Grid = (_a) => {
  var { children = null, className = "", component = "div", hasGutter, span = null, order: order2, style } = _a, props = __rest(_a, ["children", "className", "component", "hasGutter", "span", "order", "style"]);
  const classes = [grid_default.grid, span && grid_default.modifiers[`all_${span}Col`]];
  const Component44 = component;
  Object.entries(DeviceSizes).forEach(([propKey, gridSpanModifier]) => {
    const key = propKey;
    const propValue = props[key];
    if (propValue) {
      classes.push(grid_default.modifiers[`all_${propValue}ColOn${gridSpanModifier}`]);
    }
    delete props[key];
  });
  return React347.createElement(Component44, Object.assign({ className: css(...classes, hasGutter && grid_default.modifiers.gutter, className), style: style || order2 ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order2, l_grid_item_Order.name)) : void 0 }, props), children);
};
Grid.displayName = "Grid";

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/GridItem.js
init_tslib_es6();
var React348 = __toESM(require_react());
var GridItem = (_a) => {
  var { children = null, className = "", component = "div", span = null, rowSpan = null, offset: offset2 = null, order: order2, style } = _a, props = __rest(_a, ["children", "className", "component", "span", "rowSpan", "offset", "order", "style"]);
  const classes = [
    grid_default.gridItem,
    span && grid_default.modifiers[`${span}Col`],
    rowSpan && grid_default.modifiers[`${rowSpan}Row`],
    offset2 && grid_default.modifiers[`offset_${offset2}Col`]
  ];
  const Component44 = component;
  Object.entries(DeviceSizes).forEach(([propKey, classModifier]) => {
    const key = propKey;
    const rowSpanKey = `${key}RowSpan`;
    const offsetKey = `${key}Offset`;
    const spanValue = props[key];
    const rowSpanValue = props[rowSpanKey];
    const offsetValue = props[offsetKey];
    if (spanValue) {
      classes.push(grid_default.modifiers[`${spanValue}ColOn${classModifier}`]);
    }
    if (rowSpanValue) {
      classes.push(grid_default.modifiers[`${rowSpanValue}RowOn${classModifier}`]);
    }
    if (offsetValue) {
      classes.push(grid_default.modifiers[`offset_${offsetValue}ColOn${classModifier}`]);
    }
    delete props[key];
    delete props[rowSpanKey];
    delete props[offsetKey];
  });
  return React348.createElement(Component44, Object.assign({ className: css(...classes, className), style: style || order2 ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order2, l_grid_item_Order.name)) : void 0 }, props), children);
};
GridItem.displayName = "GridItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/Level.js
init_tslib_es6();
var React349 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/layouts/Level/level.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/layouts/Level/level.css";
var level_default = {
  "level": "pf-v5-l-level",
  "modifiers": {
    "gutter": "pf-m-gutter"
  }
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/Level.js
var Level = (_a) => {
  var { hasGutter, className = "", children = null } = _a, props = __rest(_a, ["hasGutter", "className", "children"]);
  return React349.createElement("div", Object.assign({}, props, { className: css(level_default.level, hasGutter && level_default.modifiers.gutter, className) }), children);
};
Level.displayName = "Level";

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/LevelItem.js
init_tslib_es6();
var React350 = __toESM(require_react());
var LevelItem = (_a) => {
  var { children = null } = _a, props = __rest(_a, ["children"]);
  return React350.createElement("div", Object.assign({}, props), children);
};
LevelItem.displayName = "LevelItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/Split.js
init_tslib_es6();
var React351 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/layouts/Split/split.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/layouts/Split/split.css";
var split_default = {
  "modifiers": {
    "wrap": "pf-m-wrap",
    "fill": "pf-m-fill",
    "gutter": "pf-m-gutter"
  },
  "split": "pf-v5-l-split",
  "splitItem": "pf-v5-l-split__item"
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/Split.js
var Split = (_a) => {
  var { hasGutter = false, isWrappable = false, className = "", children = null, component = "div" } = _a, props = __rest(_a, ["hasGutter", "isWrappable", "className", "children", "component"]);
  const Component44 = component;
  return React351.createElement(Component44, Object.assign({}, props, { className: css(split_default.split, hasGutter && split_default.modifiers.gutter, isWrappable && split_default.modifiers.wrap, className) }), children);
};
Split.displayName = "Split";

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/SplitItem.js
init_tslib_es6();
var React352 = __toESM(require_react());
var SplitItem = (_a) => {
  var { isFilled = false, className = "", children = null } = _a, props = __rest(_a, ["isFilled", "className", "children"]);
  return React352.createElement("div", Object.assign({}, props, { className: css(split_default.splitItem, isFilled && split_default.modifiers.fill, className) }), children);
};
SplitItem.displayName = "SplitItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/Stack.js
init_tslib_es6();
var React353 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/layouts/Stack/stack.mjs
import "/Users/erikvodanovic/Downloads/School/internet_programming/ci256_final/ci256-final/node_modules/@patternfly/react-styles/css/layouts/Stack/stack.css";
var stack_default = {
  "modifiers": {
    "fill": "pf-m-fill",
    "gutter": "pf-m-gutter"
  },
  "stack": "pf-v5-l-stack",
  "stackItem": "pf-v5-l-stack__item"
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/Stack.js
var Stack = (_a) => {
  var { hasGutter = false, className = "", children = null, component = "div" } = _a, props = __rest(_a, ["hasGutter", "className", "children", "component"]);
  const Component44 = component;
  return React353.createElement(Component44, Object.assign({}, props, { className: css(stack_default.stack, hasGutter && stack_default.modifiers.gutter, className) }), children);
};
Stack.displayName = "Stack";

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/StackItem.js
init_tslib_es6();
var React354 = __toESM(require_react());
var StackItem = (_a) => {
  var { isFilled = false, className = "", children = null } = _a, props = __rest(_a, ["isFilled", "className", "children"]);
  return React354.createElement("div", Object.assign({}, props, { className: css(stack_default.stackItem, isFilled && stack_default.modifiers.fill, className) }), children);
};
StackItem.displayName = "StackItem";
export {
  ASTERISK,
  AboutModal,
  Accordion,
  AccordionContent,
  AccordionExpandableContentBody,
  AccordionItem,
  AccordionToggle,
  ActionGroup,
  ActionList,
  ActionListGroup,
  ActionListItem,
  Alert,
  AlertActionCloseButton,
  AlertActionLink,
  AlertContext,
  AlertGroup,
  AlertVariant,
  Avatar,
  BackToTop,
  Backdrop,
  BackgroundImage,
  Badge,
  Banner,
  BaseSizes,
  Brand,
  Breadcrumb,
  BreadcrumbHeading,
  BreadcrumbItem,
  Bullseye,
  Button,
  ButtonSize,
  ButtonType,
  ButtonVariant,
  CalendarMonth,
  Card,
  CardBody,
  CardContext,
  CardExpandableContent,
  CardFooter,
  CardHeader,
  CardTitle,
  Checkbox,
  Chip,
  ChipGroup,
  ClipboardCopy,
  ClipboardCopyAction,
  ClipboardCopyButton,
  ClipboardCopyVariant,
  CodeBlock,
  CodeBlockAction,
  CodeBlockCode,
  DataList,
  DataListAction,
  DataListCell,
  DataListCheck,
  DataListContent,
  DataListContext,
  DataListControl,
  DataListDragButton,
  DataListItem,
  DataListItemCells,
  DataListItemRow,
  DataListText,
  DataListToggle,
  DataListWrapModifier,
  DatePicker,
  DescriptionList,
  DescriptionListDescription,
  DescriptionListGroup,
  DescriptionListTerm,
  DescriptionListTermHelpText,
  DescriptionListTermHelpTextButton,
  DeviceSizes,
  Divider,
  DividerVariant,
  DragDrop,
  DragDropContext,
  Draggable,
  Drawer,
  DrawerActions,
  DrawerCloseButton,
  DrawerColorVariant,
  DrawerContent,
  DrawerContentBody,
  DrawerContext,
  DrawerHead,
  DrawerPanelBody,
  DrawerPanelContent,
  DrawerSection,
  DrilldownMenu,
  Dropdown,
  DropdownGroup,
  DropdownItem,
  DropdownList,
  Droppable,
  DroppableContext,
  DualListSelector,
  DualListSelectorContext,
  DualListSelectorControl,
  DualListSelectorControlBase,
  DualListSelectorControlsWrapper,
  DualListSelectorControlsWrapperBase,
  DualListSelectorList,
  DualListSelectorListContext,
  DualListSelectorListItem,
  DualListSelectorListItemBase,
  DualListSelectorPane,
  DualListSelectorPaneContext,
  DualListSelectorTree,
  EmptyState,
  EmptyStateActions,
  EmptyStateBody,
  EmptyStateFooter,
  EmptyStateHeader,
  EmptyStateIcon,
  EmptyStateVariant,
  ExpandableSection,
  ExpandableSectionToggle,
  ExpandableSectionVariant,
  FileUpload,
  FileUploadField,
  Flex,
  FlexItem,
  FocusTrap,
  Form,
  FormAlert,
  FormContextConsumer,
  FormContextProvider,
  FormFieldGroup,
  FormFieldGroupExpandable,
  FormFieldGroupHeader,
  FormGroup,
  FormHelperText,
  FormSection,
  FormSelect,
  FormSelectOption,
  FormSelectOptionGroup,
  Gallery,
  GalleryItem,
  GenerateId,
  Grid,
  GridItem,
  HelperText,
  HelperTextItem,
  Hint,
  HintBody,
  HintFooter,
  HintTitle,
  Icon,
  InputGroup,
  InputGroupBase,
  InputGroupItem,
  InputGroupText,
  JumpLinks,
  JumpLinksItem,
  JumpLinksList,
  KEYHANDLER_DIRECTION,
  KeyTypes,
  KeyboardHandler,
  Label,
  LabelGroup,
  Level,
  LevelItem,
  List,
  ListComponent,
  ListItem,
  ListVariant,
  Login,
  LoginFooter,
  LoginFooterItem,
  LoginForm,
  LoginHeader,
  LoginMainBody,
  LoginMainFooter,
  LoginMainFooterBandItem,
  LoginMainFooterLinksItem,
  LoginMainHeader,
  LoginPage,
  Masthead,
  MastheadBrand,
  MastheadContent,
  MastheadMain,
  MastheadToggle,
  Menu,
  MenuBreadcrumb,
  MenuContainer,
  MenuContent,
  MenuFooter,
  MenuGroup,
  MenuItem,
  MenuItemAction,
  MenuList,
  MenuSearch,
  MenuSearchInput,
  MenuToggle,
  MenuToggleAction,
  MenuToggleCheckbox,
  Modal,
  ModalBox,
  ModalBoxBody,
  ModalBoxCloseButton,
  ModalBoxFooter,
  ModalBoxHeader,
  ModalContent,
  ModalVariant,
  MultipleFileUpload,
  MultipleFileUploadContext,
  MultipleFileUploadMain,
  MultipleFileUploadStatus,
  MultipleFileUploadStatusItem,
  Nav,
  NavContext,
  NavExpandable,
  NavGroup,
  NavItem,
  NavItemSeparator,
  NavList,
  NotificationBadge,
  NotificationBadgeVariant,
  NotificationDrawer,
  NotificationDrawerBody,
  NotificationDrawerGroup,
  NotificationDrawerGroupList,
  NotificationDrawerHeader,
  NotificationDrawerList,
  NotificationDrawerListItem,
  NotificationDrawerListItemBody,
  NotificationDrawerListItemHeader,
  NumberInput,
  OrderType,
  OverflowMenu,
  OverflowMenuContent,
  OverflowMenuControl,
  OverflowMenuDropdownItem,
  OverflowMenuGroup,
  OverflowMenuItem,
  Page,
  PageBreadcrumb,
  PageContext,
  PageContextConsumer,
  PageContextProvider,
  PageGroup,
  PageLayouts,
  PageNavigation,
  PageSection,
  PageSectionTypes,
  PageSectionVariants,
  PageSidebar,
  PageSidebarBody,
  PageSidebarContext,
  PageToggleButton,
  Pagination,
  PaginationVariant,
  Panel,
  PanelFooter,
  PanelHeader,
  PanelMain,
  PanelMainBody,
  Popover,
  PopoverPosition,
  Popper,
  Progress,
  ProgressBar,
  ProgressContainer,
  ProgressMeasureLocation,
  ProgressSize,
  ProgressStep,
  ProgressStepVariant,
  ProgressStepper,
  ProgressVariant,
  Radio,
  SIDE,
  SearchInput,
  Select,
  SelectGroup,
  SelectList,
  SelectOption,
  Sidebar,
  SidebarContent,
  SidebarPanel,
  SidebarPanelWidthType,
  SimpleList,
  SimpleListContext,
  SimpleListGroup,
  SimpleListItem,
  Skeleton,
  SkipToContent,
  Slider,
  Spinner,
  Split,
  SplitItem,
  Stack,
  StackItem,
  Switch,
  Tab,
  TabAction,
  TabContent,
  TabContentBody,
  TabTitleIcon,
  TabTitleText,
  Tabs,
  TabsComponent,
  TabsContext,
  TabsContextConsumer,
  TabsContextProvider,
  Text,
  TextAreResizeOrientation,
  TextArea,
  TextAreaReadOnlyVariant,
  TextContent,
  TextInput,
  TextInputBase,
  TextInputGroup,
  TextInputGroupContext,
  TextInputGroupMain,
  TextInputGroupUtilities,
  TextInputReadOnlyVariant,
  TextInputTypes,
  TextList,
  TextListItem,
  TextListItemVariants,
  TextListVariants,
  TextVariants,
  Tile,
  TimePicker,
  Timestamp,
  TimestampFormat,
  TimestampTooltipVariant,
  Title,
  TitleSizes,
  ToggleGroup,
  ToggleGroupItem,
  ToggleTemplate,
  Toolbar,
  ToolbarContent,
  ToolbarContentContext,
  ToolbarContext,
  ToolbarExpandIconWrapper,
  ToolbarExpandableContent,
  ToolbarFilter,
  ToolbarGroup,
  ToolbarGroupVariant,
  ToolbarItem,
  ToolbarItemVariant,
  ToolbarToggleGroup,
  Tooltip,
  TooltipPosition,
  TreeView,
  TreeViewSearch,
  Truncate,
  TruncatePosition,
  ValidatedOptions,
  Weekday,
  Wizard,
  WizardBody,
  WizardContext,
  WizardFooter,
  WizardFooterWrapper,
  WizardHeader,
  WizardNav,
  WizardNavItem,
  WizardNavItemStatus,
  WizardStep,
  WizardStepChangeScope,
  WizardToggle,
  canUseDOM,
  capitalize,
  clearTimeouts,
  clipboardCopyFunc,
  debounce,
  fillTemplate,
  findTabbableElements,
  formatBreakpointMods,
  getBreakpoint,
  getDefaultOUIAId,
  getLanguageDirection,
  getNextIndex,
  getOUIAProps,
  getOpacityTransition,
  getResizeObserver,
  getTextWidth,
  getUniqueId,
  getVerticalBreakpoint,
  globalBreakpoints,
  globalHeightBreakpoints,
  globalWidthBreakpoints,
  handleArrows,
  innerDimensions,
  isCustomWizardFooter,
  isCustomWizardNav,
  isCustomWizardNavItem,
  isElementInView,
  isValidDate,
  isWizardBasicStep,
  isWizardParentStep,
  isWizardSubStep,
  keyHandler,
  navContextDefaults,
  pageContextDefaults,
  pageSidebarContextDefaults,
  pluralize,
  preventedEvents,
  setBreakpointCssVars,
  setTabIndex,
  sideElementIsOutOfView,
  spinnerSize,
  toCamel,
  trimLeft,
  useFormContext,
  useInterval,
  useIsomorphicLayoutEffect,
  useOUIAId,
  useOUIAProps,
  useWizardContext,
  useWizardFooter,
  variantIcons2 as variantIcons,
  yyyyMMddFormat
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 7.5.2
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=@patternfly_react-core.js.map
